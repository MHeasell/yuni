<title>Mutex</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Mechanism to avoid the simultaneous use of a common resource</h2>
<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructor &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Mutex</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Mutex</a></span>(const Mutex&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>Mutex</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Lock &amp; Unlock</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">lock</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">unlock</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>PThread wrapper</h4></td></tr>
<tr><td class="doxygen_index"><code>::pthread_mutex_t&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">pthreadMutex</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>Mutex&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const Mutex&amp; )</code></td></tr>
</table></div>

<h2>Detailed Description</h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor, non recursive by default.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Mutex</a></span>:  ();
</code>
</div></td></tr><tr id="Mutex_34561319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Mutex</a></span>:  (const Mutex&amp; );
</code>
</div></td></tr><tr id="Mutex_34571319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Copy constructor<br /> This constructor does actually nothing but it allows the compilation of other classes which would implement a copy constructor<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>Mutex</a></span>:  ();
</code>
</div></td></tr><tr id="~Mutex_34581319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Lock &amp; Unlock <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Lock the mutex.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ lock</a></span>: void ();
</code>
</div></td></tr><tr id="lock_34591319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Release the lock.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ unlock</a></span>: void ();
</code>
</div></td></tr><tr id="unlock_34611319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">PThread wrapper <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the original PThread mutex.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ pthreadMutex</a></span>: ::pthread_mutex_t&amp; ();
</code>
</div></td></tr><tr id="pthreadMutex_34621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator = (do nothing)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: Mutex&amp; (const Mutex&amp; );
</code>
</div></td></tr><tr id="operator=_34631319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


