<title>Bind</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A delegate implementation</h2>
<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructor &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Bind</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Bind</a></span>(const Bind&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Bind</a></span>(const Yuni::DynamicLibrary::Symbol&amp; symbol)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>Bind</a></span>()</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>How to bind a mere function :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt;yuni/bind.h&gt;

  static  int  Foo( int  value)
  {
     std::cout  &lt;&lt;  "Foo:  "  &lt;&lt;  value  &lt;&lt;  std::endl;
     return  0;
  }

  int  main()
  {
     Yuni::Bind&lt;int (int)&gt;  callback;
     callback.bind(&amp;Foo);
     callback(42);
     callback(61);
     callback(-1)
     return  0;
  }
</source>
<br /> How to bind a member of an object :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt;yuni/bind.h&gt;

  class  Foo
  {
  public :
     int  bar( int  value)
     {
         std::cout  &lt;&lt;  "Foo::bar   :  "  &lt;&lt;  value  &lt;&lt;  std::endl;
         return  0;
     }
     int  bar2( int  value)
     {
         std::cout  &lt;&lt;  "Foo::bar2  :  "  &lt;&lt;  value  &lt;&lt;  std::endl;
         return  0;
     }
  };

  int  main()
  {
     Foo  foo;
     Yuni::Bind&lt;int (int)&gt;  callback;
     callback.bind(foo,  &amp;Foo::bar);
     callback(42);
     callback(61);
     callback(-1)
     callback.bind(foo,  &amp;Foo::bar2);
     callback(42);
     callback(61);
     callback(-1)
     return  0;
  }
</source>
<br /> This class is thread-safe, this is guaranteed by the use of smartptr.<br /><div><b>note</b> :  This class does not take care of deleted objects. It is the responsibility of the user to unbind the delegate before the linked object is delete and/or to not invoke the delegate when the object does not exist.<br /> It is safe to provide a null pointer when binding the delegate<br /> It is always safe to invoke the delegate when unbound.<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> P</code> The prototype of the targetted function/member<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default Constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Bind</a></span>:  ();
</code>
</div></td></tr><tr id="Bind_28401319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Bind</a></span>:  (const Bind&amp; rhs);
</code>
</div></td></tr><tr id="Bind_28411319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> Another bind object<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Bind</a></span>:  (const Yuni::DynamicLibrary::Symbol&amp; symbol);
</code>
</div></td></tr><tr id="Bind_28421319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> symbol</code> Symbol from a dynamic library<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>Bind</a></span>:  ();
</code>
</div></td></tr><tr id="~Bind_28431319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


