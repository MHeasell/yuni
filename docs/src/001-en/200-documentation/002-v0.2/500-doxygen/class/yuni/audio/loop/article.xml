<title>Loop</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>Loop</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Events triggered by the public interface of the event loop (from any thread)</h3>
<p class="doxygen_fun">The event loop has just started.<br />
<code><span class="keyword">static</span> bool <span class="method"><a href="#">onStart</a></span>(); [inline]</code></p>
<p class="doxygen_fun">The event loop has just stopped.<br />
<code><span class="keyword">static</span> bool <span class="method"><a href="#">onStop</a></span>(); [inline]</code></p>
<p class="doxygen_fun">A new request has just been added into the queue.<br />
<code><span class="keyword">template</span>&lt;class U &gt;<br /><span class="keyword">static</span> bool <span class="method"><a href="#">onRequestPosted</a></span>(const U<b>&amp;</b> request); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Events triggered from the main thread of the event loop</h3>
<p class="doxygen_fun">The event loop has started a new cycle.<br />
<code>bool <span class="method"><a href="#">onNewCycle</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">The operator += : Dispatch a new request.<br />
<code>IEventLoop &amp; <span class="method"><a href="#">operator+=</a></span>(const RequestType<b>&amp;</b> request);</code></p>
<p class="doxygen_fun">The operator &lt;&lt; : Dispatch a new request.<br />
<code>IEventLoop &amp; <span class="method"><a href="#">operator&lt;&lt;</a></span>(const RequestType<b>&amp;</b> request);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Events triggered by the public interface of the event loop (from any thread)</h3>
<p class="doxygen_fun">The event loop has just started.<br />
<code><span class="keyword">static</span> void <span class="method"><a href="#">onStart</a></span>(); [inline]</code></p>
<p class="doxygen_fun">The event loop has just stopped.<br />
<code><span class="keyword">static</span> void <span class="method"><a href="#">onStop</a></span>(); [inline]</code></p>
<p class="doxygen_fun">A new request has just been added into the queue.<br />
<code><span class="keyword">template</span>&lt;class U &gt;<br /><span class="keyword">static</span> void <span class="method"><a href="#">onRequestPosted</a></span>(const U<b>&amp;</b> request); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Events triggered from the main thread of the event loop</h3>
<p class="doxygen_fun">The event loop has started a new cycle.<br />
<code><span class="keyword">static</span> void <span class="method"><a href="#">onNewCycle</a></span>(); [inline]</code></p>
<p class="doxygen_fun">The event loop is processing a request.<br />
<code><span class="keyword">template</span>&lt;class U &gt;<br /><span class="keyword">static</span> void <span class="method"><a href="#">onProcessRequest</a></span>(const U<b>&amp;</b> request); [inline]</code></p>
<p class="doxygen_fun">The event loop has just finished a cycle.<br />
<code><span class="keyword">static</span> void <span class="method"><a href="#">onEndOfCycle</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_typedef">The loop itself.<br />
<code><span class="keyword">typedef</span> Core::EventLoop::IEventLoop &lt; Loop , Core::EventLoop::Flow::Timer , Core::EventLoop::Statistics::None , true &gt; <span class="method"><a href="#">LoopType</a></span>;</code></p>
<p class="doxygen_typedef">A request.<br />
<code><span class="keyword">typedef</span> LoopType::RequestType <span class="method"><a href="#">RequestType</a></span>;</code></p>
<p><code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">Parent.<br />
<code><span class="keyword">typedef</span> Loop <span class="method"><a href="#">ParentType</a></span>;</code></p>
<p class="doxygen_typedef">List of requests.<br />
<code><span class="keyword">typedef</span> LinkedList &lt; RequestType &gt; <span class="method"><a href="#">RequestListType</a></span>;</code></p>
<p class="doxygen_typedef">The Event loop.<br />
<code><span class="keyword">typedef</span> IEventLoop&lt; ParentType , Core::EventLoop::Flow::Timer , Core::EventLoop::Statistics::None , DetachedT &gt; <span class="method"><a href="#">EventLoopType</a></span>;</code></p>
<p class="doxygen_typedef">The most suitable smart pointer for the class.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; EventLoopType &gt; <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">The threading policy.<br />
<code><span class="keyword">typedef</span> Policy::ObjectLevelLockableNotRecursive &lt; EventLoopType &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The thread used for the inner loop.<br />
<code><span class="keyword">typedef</span> Yuni::Private::Core::EventLoop::Thread&lt; EventLoopType &gt; <span class="method"><a href="#">ThreadType</a></span>;</code></p>
<p class="doxygen_typedef">The flow policy.<br />
<code><span class="keyword">typedef</span> Core::EventLoop::Flow::Timer &lt; EventLoopType &gt; <span class="method"><a href="#">FlowPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The statistics policy.<br />
<code><span class="keyword">typedef</span> Core::EventLoop::Statistics::None &lt; EventLoopType &gt; <span class="method"><a href="#">StatisticsPolicy</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_var">Audio queue service corresponding to this loop.<br />
<code>QueueService * <span class="method"><a href="#">pAudioService</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Constructor.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Loop</a></span>(QueueService<b>*</b> audioService);</code></p>
<p class="doxygen_fun">Redefinition of the onLoop() callback.<br />
<code>bool <span class="method"><a href="#">onLoop</a></span>();</code></p>
<p class="doxygen_fun">Start the event loop.<br />
<code>void <span class="method"><a href="#">start</a></span>();</code></p>
<p class="doxygen_fun">Gracefully stop the execution of the event loop, and wait for it.<br />
<code>void <span class="method"><a href="#">stop</a></span>(const unsigned int timeout);</code></p>
<p class="doxygen_fun">Post a new request into the queue.<br />
<code>void <span class="method"><a href="#">dispatch</a></span>(const RequestType<b>&amp;</b> request);</code></p>
<p class="doxygen_fun">Set the timeout to wait between each cycle.<br />
<code>void <span class="method"><a href="#">timeout</a></span>(unsigned int t); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Suspend the thread.<br />
<code>void <span class="method"><a href="#">suspend</a></span>(unsigned int timeout);</code></p>
<p class="doxygen_fun">Event triggered from the constructor of the event loop.<br />
<code>void <span class="method"><a href="#">onInitialize</a></span>(EventLoopType<b>*</b> e); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Mutex .<br />
<code>Mutex <span class="method"><a href="#">pMutex</a></span>;</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
