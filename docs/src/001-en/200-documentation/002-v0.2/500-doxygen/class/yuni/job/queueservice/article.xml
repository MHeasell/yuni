<title>QueueService</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>QueueService</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructor &amp; Destructor</h3>
<p class="doxygen_fun">Default Constructor.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">QueueService</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Constructor, with an autostart mode.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">QueueService</a></span>(bool autostart); [inline]</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#">destructor</a></span> <span class="method"><a href="#"><b> ~ </b>QueueService</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Service</h3>
<p class="doxygen_fun">Start the service and execute the jobs.<br />
<code>bool <span class="method"><a href="#">start</a></span>();</code></p>
<p class="doxygen_fun">Wait until all jobs are finished.<br />
<code>bool <span class="method"><a href="#">wait</a></span>(unsigned int timeout, unsigned int pollInterval);</code></p>
<p class="doxygen_fun">Stop the service.<br />
<code>bool <span class="method"><a href="#">stop</a></span>(unsigned int timeout);</code></p>
<p class="doxygen_fun">Stop then start the service.<br />
<code>bool <span class="method"><a href="#">restart</a></span>(unsigned int timeout); [inline]</code></p>
<p class="doxygen_fun">Get if the service is started.<br />
<code>bool <span class="method"><a href="#">started</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Jobs handling</h3>
<p class="doxygen_fun">Add a job into the queue.<br />
<code>void <span class="method"><a href="#">add</a></span>(IJob<b>*</b> job);</code></p>
<p class="doxygen_fun">Add a job into the queue.<br />
<code>void <span class="method"><a href="#">add</a></span>(const IJob::Ptr<b>&amp;</b> job);</code></p>
<p class="doxygen_fun">Add a job into the queue.<br />
<code>void <span class="method"><a href="#">add</a></span>(const IJob::Ptr<b>&amp;</b> job, Priority priority);</code></p>
<p class="doxygen_fun">Add a job into the queue.<br />
<code>void <span class="method"><a href="#">add</a></span>(IJob<b>*</b> job, Priority priority);</code></p>
<p class="doxygen_fun">Retrieve information about the activity of the queue manager.<br />
<code>void <span class="method"><a href="#">activitySnapshot</a></span>(typename ThreadInfo::Vector<b>&amp;</b> out); [inline]</code></p>
<p class="doxygen_fun">Get the number of jobs waiting to be executed.<br />
<code>unsigned int <span class="method"><a href="#">size</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun"><code>unsigned int <span class="method"><a href="#">count</a></span>() <span class="keyword">const</span>; [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Threads</h3>
<p class="doxygen_fun">Get the number of threads.<br />
<code>unsigned int <span class="method"><a href="#">threadCount</a></span>() <span class="keyword">const</span>; [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">The operator &lt;&lt; (add a job)<br />
<code>QueueService &amp; <span class="method"><a href="#">operator+=</a></span>(IJob<b>*</b> job); [inline]</code></p>
<p class="doxygen_fun">The operator &lt;&lt; (add a job)<br />
<code>QueueService &amp; <span class="method"><a href="#">operator&lt;&lt;</a></span>(IJob<b>*</b> job); [inline]</code></p>
<p class="doxygen_fun">The operator &lt;&lt; (add a job)<br />
<code>QueueService &amp; <span class="method"><a href="#">operator+=</a></span>(const IJob::Ptr<b>&amp;</b> job); [inline]</code></p>
<p class="doxygen_fun">The operator &lt;&lt; (add a job)<br />
<code>QueueService &amp; <span class="method"><a href="#">operator&lt;&lt;</a></span>(const IJob::Ptr<b>&amp;</b> job); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>A default timeout.<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">QueueService .<br />
<code><span class="keyword">typedef</span> QueueService &lt; SchedulerT &gt; <span class="method"><a href="#">QueueServiceType</a></span>;</code></p>
<p class="doxygen_typedef">The threading policy.<br />
<code><span class="keyword">typedef</span> Policy::ObjectLevelLockable &lt; QueueServiceType &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The most suitable smart pointer for the class.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; QueueServiceType &gt; <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">The Scheduler policy.<br />
<code><span class="keyword">typedef</span> SchedulerT <span class="method"><a href="#">SchedulerPolicy</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Mutex.<br />
<code>Mutex <span class="method"><a href="#">pMutex</a></span>;</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
