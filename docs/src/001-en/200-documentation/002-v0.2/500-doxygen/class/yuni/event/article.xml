<title>Event</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>Event</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Public</h3>
<p class="doxygen_fun">name Constructor &amp; Destructor<br />
<code> <span class="method"><a href="#">Event</a></span>();</code></p>
<p class="doxygen_fun">Copy constructor.<br />
<code> <span class="method"><a href="#">Event</a></span>(const Event<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#"><b> ~ </b>Event</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Connection</h3>
<p class="doxygen_fun">Connect to a function.<br />
<code>void <span class="method"><a href="#">connect</a></span>(typename BindType::FunctionType pointer);</code></p>
<p class="doxygen_fun">Connect to a function with a custom user data.<br />
<code><span class="keyword">template</span>&lt;class U &gt;<br />void <span class="method"><a href="#">connect</a></span>(typename BindType::template WithUserData&lt; U &gt;:: FunctionType pointer, typename BindType::template WithUserData&lt; U &gt;::ParameterType userdata);</code></p>
<p class="doxygen_fun">Connect to a object member.<br />
<code><span class="keyword">template</span>&lt;class C &gt;<br />void <span class="method"><a href="#">connect</a></span>(C<b>*</b> o, typename PointerToMember &lt; C &gt;::Type method);</code></p>
<p class="doxygen_fun">Connect to a const object member.<br />
<code><span class="keyword">template</span>&lt;class C &gt;<br />void <span class="method"><a href="#">connect</a></span>(const C<b>*</b> o, typename PointerToMember &lt; C &gt;::ConstType method);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Disconnection</h3>
<p class="doxygen_fun">Disconnect all methods of an arbitrary object connected to the event.<br />
<code><span class="keyword">template</span>&lt;class U &gt;<br />void <span class="method"><a href="#">remove</a></span>(const U<b>*</b> object);</code></p>
<p class="doxygen_fun">Disconnect all.<br />
<code>void <span class="method"><a href="#">clear</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Misc</h3>
<p class="doxygen_fun">Get the number of current connections.<br />
<code>unsigned int <span class="method"><a href="#">size</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun"><code>unsigned int <span class="method"><a href="#">count</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Get if the event does not have any single callback.<br />
<code>bool <span class="method"><a href="#">empty</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Get if the event has at least one callback.<br />
<code>bool <span class="method"><a href="#">notEmpty</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">Assignment with a nullptr (equivalent to clear() )<br />
<code>Event &amp; <span class="method"><a href="#">operator=</a></span>(const NullPtr<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Copy operator.<br />
<code>Event &amp; <span class="method"><a href="#">operator=</a></span>(const Event<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Get if the event is empty.<br />
<code>bool <span class="method"><a href="#">operator!</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>The number of arguments.<br />
<code><i>(unmanaged tag)</i></code></p>
<p>A non-zero value if the prototype has a return value (!= void)<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">Event .<br />
<code><span class="keyword">typedef</span> Event &lt; P &gt; <span class="method"><a href="#">EventType</a></span>;</code></p>
<p class="doxygen_typedef">The Bind Type.<br />
<code><span class="keyword">typedef</span> Bind &lt; P &gt; <span class="method"><a href="#">BindType</a></span>;</code></p>
<p class="doxygen_typedef">Type of the Ancestor.<br />
<code><span class="keyword">typedef</span> Private::EventImpl::template WithNArguments &lt; BindType::argumentCount, BindType &gt; <span class="method"><a href="#">AncestorType</a></span>;</code></p>
<p class="doxygen_typedef">The Threading Policy .<br />
<code><span class="keyword">typedef</span> AncestorType::ThreadingPolicy <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The most suitable smartptr for the class.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; Event &gt; <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">Pointer-to-function.<br />
<code><span class="keyword">typedef</span> BindType::FunctionType <span class="method"><a href="#">FunctionType</a></span>;</code></p>
<p class="doxygen_typedef">The type of the return value.<br />
<code><span class="keyword">typedef</span> BindType::ReturnType <span class="method"><a href="#">ReturnType</a></span>;</code></p>
<p class="doxygen_typedef">IEvent list.<br />
<code><span class="keyword">typedef</span> std::map&lt; IEvent *, unsigned int &gt; <span class="method"><a href="#">Map</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;class C &gt;<br />void <span class="method"><a href="#">connect</a></span>(C<b>*</b> o, typename Event &lt; P &gt;::template PointerToMember &lt; C &gt;::Type method);</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;class C &gt;<br />void <span class="method"><a href="#">connect</a></span>(const C<b>*</b> o, typename Event &lt; P &gt;::template PointerToMember &lt; C &gt;::ConstType method);</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Unregister an observer.<br />
<code>void <span class="method"><a href="#">unregisterObserver</a></span>(const IEventObserverBase<b>*</b> pointer);</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
