<title>Event</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2><code>Event</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">name Constructor &amp; Destructor<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Event</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Event</a></span>:  (const Event&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>Event</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Connection <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Connect to a function.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">connect</a></span>: void (typename BindType::FunctionType pointer);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Connect to a function with a custom user data.<div class="doxygen_name_spacer"></div>
<code><div id="connect_22961319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">connect</a></span>: void (typename BindType::template WithUserData&lt; U&gt;:: FunctionType pointer, typename BindType::template WithUserData&lt; U&gt;::ParameterType userdata);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Connect to a object member.<div class="doxygen_name_spacer"></div>
<code><div id="connect_22971319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class C &gt;</div>
 <span class="method"><a href="#">connect</a></span>: void (C* o, typename PointerToMember&lt;C&gt;::Type method);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Connect to a const object member.<div class="doxygen_name_spacer"></div>
<code><div id="connect_22981319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class C &gt;</div>
 <span class="method"><a href="#">connect</a></span>: void (const C* o, typename PointerToMember&lt;C&gt;::ConstType method);
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Disconnection <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Disconnect all methods of an arbitrary object connected to the event.<div class="doxygen_name_spacer"></div>
<code><div id="remove_22991319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">remove</a></span>: void (const U* object);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Disconnect all.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">clear</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Misc <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of current connections.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: unsigned int () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">count</a></span>: unsigned int () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the event does not have any single callback.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the event has at least one callback.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">notEmpty</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assignment with a nullptr (equivalent to clear() )<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Event&amp; (const NullPtr&amp; );
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Event&amp; (const Event&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the event is empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">The number of arguments.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone">A non-zero value if the prototype has a return value (!= void)<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Event .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">EventType</a></span>: <span class="keyword">typedef</span> Event&lt;P&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Bind Type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">BindType</a></span>: <span class="keyword">typedef</span> Bind&lt;P&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Type of the Ancestor.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">AncestorType</a></span>: <span class="keyword">typedef</span> Private::EventImpl::template WithNArguments&lt;BindType::argumentCount, BindType&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Threading Policy .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> AncestorType::ThreadingPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The most suitable smartptr for the class.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Event&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer-to-function.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">FunctionType</a></span>: <span class="keyword">typedef</span> BindType::FunctionType;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The type of the return value.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ReturnType</a></span>: <span class="keyword">typedef</span> BindType::ReturnType;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">IEvent list.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Map</a></span>: <span class="keyword">typedef</span> std::map&lt; IEvent*, unsigned int&gt;;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code><div id="connect_23201319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class C &gt;</div>
 <span class="method"><a href="#">connect</a></span>: void (C* o, typename Event&lt;P&gt;::template PointerToMember&lt;C&gt;::Type method);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code><div id="connect_23211319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class C &gt;</div>
 <span class="method"><a href="#">connect</a></span>: void (const C* o, typename Event&lt;P&gt;::template PointerToMember&lt;C&gt;::ConstType method);
</code>
</td></tr>
</table>


