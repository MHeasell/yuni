<title>IComponent</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>IComponent</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructor &amp; Destructor</h3>
<p class="doxygen_fun">Empty constructor.<br />
<code> <span class="method"><a href="#">IComponent</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Constructor with dimensions.<br />
<code> <span class="method"><a href="#">IComponent</a></span>(float width, float height); [inline]</code></p>
<p class="doxygen_fun">Full constructor.<br />
<code> <span class="method"><a href="#">IComponent</a></span>(float x, float y, float width, float height); [inline]</code></p>
<p class="doxygen_fun">Full constructor.<br />
<code><span class="keyword">template</span>&lt;class T &gt;<br /> <span class="method"><a href="#">IComponent</a></span>(const Point2D &lt; T &gt;<b>&amp;</b> pos, float width, float height); [inline]</code></p>
<p class="doxygen_fun">Virtual destructor.<br />
<code> <span class="method"><a href="#"><b> ~ </b>IComponent</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Methods</h3>
<p class="doxygen_fun">Resize the component.<br />
<code>void <span class="method"><a href="#">resize</a></span>(float width, float height);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Accessors</h3>
<p class="doxygen_fun">Get the class name (identifier for the type of component)<br />
<code>const ClassName &amp; <span class="method"><a href="#">className</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Set the class name (identifier for the type of component)<br />
<code>void <span class="method"><a href="#">className</a></span>(ClassName<b>&amp;</b> ); [inline]</code></p>
<p class="doxygen_fun">Get the unique Identifier for this component.<br />
<code>ID <span class="method"><a href="#">id</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Get the width of the component.<br />
<code>float <span class="method"><a href="#">width</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the height of the component.<br />
<code>float <span class="method"><a href="#">height</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the position of the component.<br />
<code>Point2D &lt; float &gt; <span class="method"><a href="#">position</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the size of the component.<br />
<code>void <span class="method"><a href="#">size</a></span>(float<b>&amp;</b> width, float<b>&amp;</b> height) <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the X position of the component.<br />
<code>float <span class="method"><a href="#">x</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the Y position of the component.<br />
<code>float <span class="method"><a href="#">y</a></span>() <span class="keyword">const</span>; [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Pointer management</h3>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">addRef</a></span>(); [inline]</code></p>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">release</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_typedef"><code><span class="keyword">typedef</span> SmartPtrInfo &lt; IComponent &gt;::Type <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">Ancestor type.<br />
<code><span class="keyword">typedef</span> IEventObserver &lt; IComponent , Policy::ObjectLevelLockable &gt; <span class="method"><a href="#">EventObserverType</a></span>;</code></p>
<p class="doxygen_typedef">Threading policy.<br />
<code><span class="keyword">typedef</span> EventObserverType::ThreadingPolicy <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">A class name is a string tag representing a type of component.<br />
<code><span class="keyword">typedef</span> CString &lt; 64, false, false &gt; <span class="method"><a href="#">ClassName</a></span>;</code></p>
<p class="doxygen_typedef">Unique local identifier.<br />
<code><span class="keyword">typedef</span> Yuni::UI::ID::Type <span class="method"><a href="#">ID</a></span>;</code></p>
<p class="doxygen_typedef">Type of the Event observer.<br />
<code><span class="keyword">typedef</span> IEventObserver &lt; IComponent , Policy::ObjectLevelLockable &gt; <span class="method"><a href="#">IEventObserverType</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Unique local identifier.<br />
<code>const ID <span class="method"><a href="#">pLocalID</a></span>;</code></p>
<p class="doxygen_var">Class name for this component (type of component)<br />
<code>ClassName <span class="method"><a href="#">pClass</a></span>;</code></p>
<p class="doxygen_var">Adapter for Virtual UI &lt;-&gt; UI Representation communication.<br />
<code>Adapter::ForVirtual * <span class="method"><a href="#">pAdapter</a></span>;</code></p>
<p class="doxygen_var">Position of the component relative to its parent.<br />
<code>Point2D &lt; float &gt; <span class="method"><a href="#">pPosition</a></span>;</code></p>
<p class="doxygen_var">Width of the component.<br />
<code>float <span class="method"><a href="#">pWidth</a></span>;</code></p>
<p class="doxygen_var">Height of the component.<br />
<code>float <span class="method"><a href="#">pHeight</a></span>;</code></p>
<p class="doxygen_var">Mutex .<br />
<code>Mutex <span class="method"><a href="#">pMutex</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Protected resize, without locks.<br />
<code>void <span class="method"><a href="#">resizeWL</a></span>(float<b>&amp;</b> newWidth, float<b>&amp;</b> newHeight); [inline]</code></p>
<p class="doxygen_fun">Detach the component from the tree.<br />
<code>void <span class="method"><a href="#">detachWL</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Destroy all existing and future bound events.<br />
<code>void <span class="method"><a href="#">destroyBoundEvents</a></span>();</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
