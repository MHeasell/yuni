<title>MutexLocker</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Locks a mutex in the constructor and unlocks it in the destructor (RAII)</h2>
<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructor &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1MutexLocker_1a1be835b3e3f69d15571899757195a7d3">MutexLocker</a></span>(Mutex&amp; m)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1MutexLocker_1a7f89b93e36f2e2380cf01f6b8bad2e7e"><b> ~ </b>MutexLocker</a></span>()</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>This class is especially usefull for `get` accessor` and/or returned values which have to be thread-safe. This is a very common C++ idiom, known as "Resource Acquisition Is Initialization" (RAII).<br /><source type="cpp">       class  Foo
       {
       public :
           Foo()  :  pValue(42)  {}
           ~Foo()  {}
           int  getValue()
           {
               MutexLocker  locker(pMutex);
               return  pValue;
           }
           void  setValue( const  int  i)
           {
               pMutex.lock();
               pValue  =  i;
               pMutex.unlock();
           }
       private :
           int  pValue;
           Mutex  pMutex;
       };
</source>
<br /></div><div style="margin-top:3em;border:1px solid #aaa;border-bottom-style:none;border-left-style:none;border-right-style:none"></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1MutexLocker_1a1be835b3e3f69d15571899757195a7d3" href="#">+ MutexLocker</a></span>:  (Mutex&amp; m);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> m</code> The mutex to lock<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Destructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1MutexLocker_1a7f89b93e36f2e2380cf01f6b8bad2e7e" href="#">+ <b> ~ </b>MutexLocker</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


