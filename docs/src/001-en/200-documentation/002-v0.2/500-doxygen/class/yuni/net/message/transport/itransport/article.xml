<title>ITransport</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>ITransport</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructor &amp; Destructor</h3>
<p class="doxygen_fun">Default constructor.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">ITransport</a></span>(Mode m); [inline]</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#">destructor</a></span> <span class="method"><a href="#"><b> ~ </b>ITransport</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Attached thread</h3>
<p class="doxygen_fun">Get the attached thread.<br />
<code>Thread::IThread * <span class="method"><a href="#">attachedThread</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Get the attached thread (const)<br />
<code>const Thread::IThread * <span class="method"><a href="#">attachedThread</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Set the attached thread.<br />
<code>void <span class="method"><a href="#">attachedThread</a></span>(Thread::IThread<b>*</b> thread); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Public</h3>
<p class="doxygen_fun">Service.<br />
<code>Yuni::Net::Error <span class="method"><a href="#">execute</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Execute the transport layer.<br />
<code>Yuni::Net::Error <span class="method"><a href="#">operator()</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_typedef">The most suitable smart pointer for the class.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; ITransport &gt; <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">Set.<br />
<code><span class="keyword">typedef</span> std::set&lt; Ptr &gt; <span class="method"><a href="#">Set</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_var">Address to listen.<br />
<code>HostAddress <span class="method"><a href="#">address</a></span>;</code></p>
<p class="doxygen_var">Port .<br />
<code>Port <span class="method"><a href="#">port</a></span>;</code></p>
<p class="doxygen_var">Mode (server/client)<br />
<code>const Mode <span class="method"><a href="#">mode</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">The attached thread.<br />
<code>Thread::IThread * <span class="method"><a href="#">pAttachedThread</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Execute the transport layer.<br />
<code>Yuni::Net::Error <span class="method"><a href="#">onExecute</a></span>();</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
