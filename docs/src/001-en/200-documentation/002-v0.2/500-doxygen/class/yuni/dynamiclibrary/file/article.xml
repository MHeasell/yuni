<title>File</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>An Executable Object file</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1DynamicLibrary_1_1File_1aa745782b48760f9e26c6038ae0a425be" href="#">Handle</a></span> : void*</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructor &amp; DEstructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a478a99938b4f702d4419d7b9852c64de">File</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a48474d0c4bc78996809f1460cb9245df">File</a></span>(const AnyString&amp; filename, const Relocation r, const Visibility v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a0d6f478b7e65de75db560c206971a872"><b> ~ </b>File</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Loading / Unloading</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1ae170f9f789788f6cc459bd8122c1465e">loadFromFile</a></span>(const AnyString&amp; filename, const Relocation r, const Visibility v)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1ac3b46f168585d13f144875ed191e0b7b">loadFromRawFilename</a></span>(const AnyString&amp; filename, const Relocation r, const Visibility v)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a0ec329ddefdd2163ff6458ab39f27f96">unload</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a7a5b6454103a9544a8a4f8dc0cd6b48c">loaded</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>const String&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a7e39d6edacb8bea0aaf5c4b4c7746419">filename</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Symbols</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1af7e83cba862f042781196d3cd4e3db43">hasSymbol</a></span>(const StringT&amp; name) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Symbol </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a5d5f04f521a064911ebb80ce0a9cb22d">resolve</a></span>(const StringT&amp; name) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Handle</h4></td></tr>
<tr><td class="doxygen_index"><code>Handle </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1a7f46004b77b4b4b5e7f70fd4134b7ed9">handle</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>Symbol </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1DynamicLibrary_1_1File_1acac933b86d2b0bb7731a0bad11bdaf52">operator[]</a></span>(const StringT&amp; name) <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>Here is an example of a typical use of a dynamic library. Assuming we have the following shared library :<source type="cpp">  #include  &lt; yuni/yuni.h &gt;  //  For  `YUNI_LIB_EXPORT`,  which  is  OS  Dependant
  #include  &lt;string.h&gt;     //  For  `strlen()`

  extern  "C"  YUNI_LIB_EXPORT  const  char *  myname( void )
  {
     return  "The  'my'  library" ;
  }

  extern  "C"  YUNI_LIB_EXPORT  int  mylength( const  char *  s)
  {
     return  s  ?  strlen(s)  :  0;
  }
</source>
<br /> We could safely use it in this way, which is the simplest one :<source type="cpp">  #include  &lt; yuni/yuni.h &gt;
  #include  &lt; yuni/core/dynamiclibrary.h &gt;
  #include  &lt; yuni/core/bind.h &gt;
  #include  &lt;iostream&gt;


  using  namespace  Yuni;

  int  main( void )
  {
         //  Our  dynamic  library
         //  (might  be  `mylib.so`  on  Unix,  `my.dynlib`  on  Darwin,  or  `my.dll`  on  Windows)
         //  The  current  path  (`./`)  is  by  default  in  the  search  paths
         DynamicLibrary::File  lib( "my" );

         //  Binding  with  a  C  function,  which  has  only  one  argument  and  an  `int`
         //  as  its  returned  type
         //  warning:  This  binding  will  be  only  valid  for  the  lifetime  of  the
         //  variable  `lib`.  After  that,  you  should  encounter  some  crash  if  you
         //  try  to  use  it.
         Bind&lt;int (const char*)&gt;  f  =  lib[ "mylength" ];

         //  Calling  the  exported  function
         //  It  is  safe  to  directly  call  the  function  like  this.
         //  The  default  constructor  of  the  returned  type  is  used  if  the  library
         //  has  not  been  successfully  loaded.
         int  result  =  f( "Hello  world" );

         std::cout  &lt;&lt;  "Library  loaded  :  "  &lt;&lt;  (lib. loaded ()  ?  "Yes"  :  "No" )  &lt;&lt;  std::endl;
         std::cout  &lt;&lt;  "Returned  Value  :  "  &lt;&lt;  result  &lt;&lt;  std::endl;

         //  Extra:  Displaying  the  name  of  our  library
         Bind&lt;const char* ()&gt;  libname  =  lib[ "myname" ];
         const  char *  s  =  libname();
         std::cout  &lt;&lt;  "Library  name:  "  &lt;&lt;  (s  ?  s  :  "(null)" )  &lt;&lt;  std::endl;
  }
</source>
<br /></div><div style="margin-top:3em;border:1px solid #aaa;border-bottom-style:none;border-left-style:none;border-right-style:none"></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><b>Relocation options.<br /></b><div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">When an object is brought into the address space of a process, it may contain references to symbols whose addresses are not known until the object is loaded. These references shall be relocated before the symbols can be accessed (man dlopen).<br /> These options are actually ignored on Windows.<br />
</div>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><b>Scope of visibility options.<br /></b><div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>OS Dependant Handle of a shared library.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1aa745782b48760f9e26c6038ae0a425be" href="#">+ Handle</a></span>: <span class="keyword">typedef</span> void*;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; DEstructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Default constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a478a99938b4f702d4419d7b9852c64de" href="#">+ File</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor - Load an dynamic library.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a48474d0c4bc78996809f1460cb9245df" href="#">+ File</a></span>:  (const AnyString&amp; filename, const Relocation r, const Visibility v);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> Filename of the library to load<br /></li><li><code> r</code> The relocation mode (no effect on Windows)<br /></li><li><code> v</code> The visibility mode (no effect on Windows)<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Destructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a0d6f478b7e65de75db560c206971a872" href="#">+ <b> ~ </b>File</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The library will be automatically unloaded if needed.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Loading / Unloading <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Load a dynamic library from its filename.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1ae170f9f789788f6cc459bd8122c1465e" href="#">+ loadFromFile</a></span>: bool (const AnyString&amp; filename, const Relocation r, const Visibility v);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The filename may be modified, according the current operating system. A prefix and/or a suffix may be added to suit to the OS.<br /> The prefix : `lib` may be added as prefix on Unix platforms The suffixes :<ul><li> Mac OS : .dylib, .bundle, .so<br /></li><li> Unix/Linux : .so<br /></li><li> AIX : .a<br /></li><li> HP-UX : .sl, .so<br /></li><li> Windows : .dll<br /></li></ul><br /> The library will be searched in all system-specific library locations (e.g. LD_LIBRARY_PATH on Unix), then in all given search paths, unless the file name has an absolute path.<br /> If a library is already loaded, it will be unloaded first.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The absolute or relative filename to the library<br /></li><li><code> r</code> The relocation mode (no effect on Windows)<br /></li><li><code> v</code> The visibility mode (no effect on Windows)<br /></li></ul><div><code>return</code>  True if the library has been loaded<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Load a dynamic library from its filename.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1ac3b46f168585d13f144875ed191e0b7b" href="#">+ loadFromRawFilename</a></span>: bool (const AnyString&amp; filename, const Relocation r, const Visibility v);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">No modification will be made on the provided filename, contrary to load() where a suffic and/or a prefix might be added.<br /> If a library is already loaded, it will be unloaded first.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The absolute or relative filename to the library<br /></li><li><code> r</code> The relocation mode (no effect on Windows)<br /></li><li><code> v</code> The visibility mode (no effect on Windows)<br /></li></ul><div><code>return</code>  True if the library has been loaded<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Unload the dynamic library.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a0ec329ddefdd2163ff6458ab39f27f96" href="#">+ unload</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Nothing will be done if the library is not already loaded<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the dynamic library is loaded.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a7a5b6454103a9544a8a4f8dc0cd6b48c" href="#">+ loaded</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the filename of the loaded library.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a7e39d6edacb8bea0aaf5c4b4c7746419" href="#">+ filename</a></span>: const String&amp; () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  The full filename of the library, or empty if not loaded<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Symbols <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if a symbol exists in the library.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;class StringT &gt;</div>
 <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1af7e83cba862f042781196d3cd4e3db43" href="#">+ hasSymbol</a></span>: bool (const StringT&amp; name) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> name</code> Name of the exported symbol<br /></li></ul><div><code>return</code>  True if the library is loaded and the symbol exists, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Try to resolve the address of an exported symbol by the library.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;class StringT &gt;</div>
 <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a5d5f04f521a064911ebb80ce0a9cb22d" href="#">+ resolve</a></span>: Symbol (const StringT&amp; name) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><source type="cpp">  Yuni::DynamicLibrary::File  lib;
  if  (lib.load( "my" ))
  {
         //  The  shared  library  has  been  loaded
         //  We  can  try  to  resolve  a  symbol
         Yuni::DynamicLibrary::Symbol  s  =  lib. resolve ( "myentry" );
         if  (s. valid ())
         {
             //  The  symbol  has  been  found,  let's  continue
             //  ...
         }
         else
         {
             //  The  symbol  has  not  been  found  in  the  library
         }
  }
</source>
<br /><div class="doxygen_params">Parameters :</div><ul><li><code> name</code> Name of the exported symbol<br /></li></ul><div><code>return</code>  The Symbol . Use Symbol::valid() or Symbol::null() to know if the result is valid<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Handle <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the OS Dependant handle of the dynamic library.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1a7f46004b77b4b4b5e7f70fd4134b7ed9" href="#">+ handle</a></span>: Handle () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>The operator [].<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;class StringT &gt;</div>
 <span class="method"><a name="classYuni_1_1DynamicLibrary_1_1File_1acac933b86d2b0bb7731a0bad11bdaf52" href="#">+ operator[]</a></span>: Symbol (const StringT&amp; name) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  resolve()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief"><b>An invalid handle.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ NullHandle</a></span>: const Handle;</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


