<title>Vector3D</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>Vector3D</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Vector3D</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Vector3D</a></span>:  (const U x1, const V y1, const W z1);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor using two points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Vector3D</a></span>:  (const Point3D &lt; U &gt;<b>&amp;</b> origin, const Point3D &lt; V &gt;<b>&amp;</b> end);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor by copy.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Vector3D</a></span>:  (const Vector3D<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor by copy.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Vector3D</a></span>:  (const Vector3D &lt; U &gt;<b>&amp;</b> v);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Reset the coordinates <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the vector to the null vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reset</a></span>: Vector3D &lt; T &gt; &amp; ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Translation <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add the same value for all coordinates to the vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">translate</a></span>: void (const U k);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with relative coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">translate</a></span>: void (const U x1, const V y1, const W z1);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with relative coordinates from another Point.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">translate</a></span>: void (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Components <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the vector is null.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">null</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the magnitude of the vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">magnitude</a></span>: T () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the square magnitude of the vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">squareMagnitude</a></span>: T () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the dot product with another arbitrary vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">dotProduct</a></span>: T (const Vector3D<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Normalize the vector (coefficient = 1.)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">normalize</a></span>: Vector3D &amp; ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Normalize the vector with a different coefficient.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">normalize</a></span>: Vector3D &amp; (const T coeff);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Mean <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Calculate the mean between two points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">mean</a></span>: Vector3D &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Calculate the mean between two points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">mean</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p1, const Vector3D &lt; V &gt;<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">X component.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">x</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Y component.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">y</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Z component.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">z</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset all coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const U x1, const V y1, const W z1);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy all coordinates from another vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const Vector3D &lt; U &gt;<b>&amp;</b> v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset a vector using two points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const Point3D &lt; U &gt;<b>&amp;</b> origin, const Point3D &lt; V &gt;<b>&amp;</b> end);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with the same value for all coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Vector3D &lt; T &gt; &amp; (const T k);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with relative coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with the same value for all coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-=</a></span>: Vector3D &lt; T &gt; &amp; (const T k);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Translate the point with relative coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-=</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Uniform scaling.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator*=</a></span>: Vector3D &lt; T &gt; &amp; (const T k);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Dot product.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator*=</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Uniform scaling.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator/=</a></span>: Vector3D &lt; T &gt; &amp; (const T k);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Dot product.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator/=</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Comparison operator (equal with)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: bool (const Vector3D &lt; U &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Comparison operator (non equal with)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!=</a></span>: bool (const Vector3D &lt; U &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign new values for all coordinates from another vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Vector3D &lt; T &gt; &amp; (const Vector3D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Print the vector.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">print</a></span>: std::ostream &amp; (std::ostream<b>&amp;</b> out) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the mean between two arbitrary vectors.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Mean</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D<b>&amp;</b> p1, const Vector3D<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the magnitude of the addition of two arbitrary vectors.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Magnitude</a></span>: <span class="keyword">static</span> T (const Vector3D<b>&amp;</b> p1, const Vector3D<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the dot product of two arbitrary vectors.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">DotProduct</a></span>: <span class="keyword">static</span> T (const Vector3D<b>&amp;</b> p1, const Vector3D<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the cross product of two arbitrary vectors.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CrossProduct</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D<b>&amp;</b> p1, const Vector3D<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the angle between two arbitrary vectors.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Angle</a></span>: <span class="keyword">static</span> T (const Vector3D<b>&amp;</b> p1, const Vector3D<b>&amp;</b> p2);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the angle between two vectors, with a specific return type.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Angle</a></span>: void (R<b>&amp;</b> out, const Vector3D &lt; T &gt;<b>&amp;</b> p1, const Vector3D &lt; T &gt;<b>&amp;</b> p2);</code>
</td></tr>
</table>


