<title>Vector3D</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Represents a 3D-vector, with generic homogeneous content</h2>
<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Vector3D</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Vector3D</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Vector3D</a></span>(const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Vector3D</a></span>(const Vector3D&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Vector3D</a></span>(const Vector3D&lt;U&gt;&amp; v)</code></td></tr>
<tr><td></td><td><br /><h4>Reset the coordinates</h4></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">reset</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Translation</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">translate</a></span>(const U k)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">translate</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">translate</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td></td><td><br /><h4>Components</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">null</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">magnitude</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">squareMagnitude</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">dotProduct</a></span>(const Vector3D&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">normalize</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">normalize</a></span>(const T coeff)</code></td></tr>
<tr><td></td><td><br /><h4>Mean</h4></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">mean</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">mean</a></span>(const Vector3D&lt;U&gt;&amp; p1, const Vector3D&lt;V&gt;&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> Vector3D </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Mean</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Magnitude</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">DotProduct</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> Vector3D </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">CrossProduct</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Angle</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Angle</a></span>(R&amp; out, const Vector3D&lt;T&gt;&amp; p1, const Vector3D&lt;T&gt;&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator()</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator()</a></span>(const Vector3D&lt;U&gt;&amp; v)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator()</a></span>(const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator*=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator*=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator/=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator/=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator==</a></span>(const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!=</a></span>(const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>std::ostream&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">print</a></span>(std::ostream&amp; out) <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Vector3D</a></span>:  ();
</code>
</div></td></tr><tr id="Vector3D_37271319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="Vector3D_37281319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a href="#">+ Vector3D</a></span>:  (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr id="Vector3D_37281319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The default X coordinate<br /></li><li><code> y1</code> The default Y coordinate<br /></li><li><code> z1</code> The default Z coordinate<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor using two points.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="Vector3D_37291319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a href="#">+ Vector3D</a></span>:  (const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end);
</code>
</div></td></tr><tr id="Vector3D_37291319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> origin</code> Origin point of the vector<br /></li><li><code> end</code> End point of the vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor by copy.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Vector3D</a></span>:  (const Vector3D&amp; rhs);
</code>
</div></td></tr><tr id="Vector3D_37301319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor by copy.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="Vector3D_37311319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ Vector3D</a></span>:  (const Vector3D&lt;U&gt;&amp; v);
</code>
</div></td></tr><tr id="Vector3D_37311319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Reset the coordinates <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Reset the vector to the null vector.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ reset</a></span>: Vector3D&lt;T&gt;&amp; ();
</code>
</div></td></tr><tr id="reset_37321319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Translation <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add the same value for all coordinates to the vector.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="translate_37331319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ translate</a></span>: void (const U k);
</code>
</div></td></tr><tr id="translate_37331319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with relative coordinates.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="translate_37341319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a href="#">+ translate</a></span>: void (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr id="translate_37341319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The value to add to the X coordinate<br /></li><li><code> y1</code> The value to add to the Y coordinate<br /></li><li><code> z1</code> The value to add to the Z coordinate<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with relative coordinates from another Point.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="translate_37351319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ translate</a></span>: void (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="translate_37351319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to the coordinates<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Components <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the vector is null.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ null</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="null_37361319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the magnitude of the vector.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ magnitude</a></span>: T () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="magnitude_37371319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the square magnitude of the vector.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ squareMagnitude</a></span>: T () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="squareMagnitude_37381319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the dot product with another arbitrary vector.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ dotProduct</a></span>: T (const Vector3D&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="dotProduct_37391319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Normalize the vector (coefficient = 1.)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ normalize</a></span>: Vector3D&amp; ();
</code>
</div></td></tr><tr id="normalize_37401319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Normalize the vector with a different coefficient.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ normalize</a></span>: Vector3D&amp; (const T coeff);
</code>
</div></td></tr><tr id="normalize_37411319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Mean <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Calculate the mean between two points.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="mean_37421319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ mean</a></span>: Vector3D&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="mean_37421319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The calling object is modified to store the value<br /><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> Point to compute the mean with<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Calculate the mean between two points.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="mean_37431319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a href="#">+ mean</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p1, const Vector3D&lt;V&gt;&amp; p2);
</code>
</div></td></tr><tr id="mean_37431319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The calling object is modified to store the value<br /><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> Point to compute the mean with<br /></li><li><code> p2</code> Second point to compute the mean with<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the mean between two arbitrary vectors.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Mean</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr id="Mean_37441319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  A new instance of Vector3D<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the magnitude of the addition of two arbitrary vectors.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Magnitude</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr id="Magnitude_37451319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><source type="cpp">  Yuni::Vector3D&lt;&gt;  a(1.,    2,4,  6.9);
  Yuni::Vector3D&lt;&gt;  b(4.1.,  0.2,  3.1);

  //  This  way  is  faster
  std::cout  &lt;&lt;  "Magnitude  :  "  &lt;&lt;  Yuni::Vector3D&lt;&gt;::Magnitude (a,  b)  &lt;&lt;  std::endl;
  //  than
  std::cout  &lt;&lt;  "Magnitude  :  "  &lt;&lt;  (a  +  b). magnitude ()  &lt;&lt;  std::endl;
</source>
<div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  The magnitude of the addition of the 2 vectors<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the dot product of two arbitrary vectors.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ DotProduct</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr id="DotProduct_37461319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  The magnitude of the addition of the 2 vectors<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the cross product of two arbitrary vectors.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ CrossProduct</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr id="CrossProduct_37471319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the angle between two arbitrary vectors.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Angle</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr id="Angle_37481319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Compute the angle between two vectors, with a specific return type.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="Angle_37491319844517_tmpl"><span class="keyword">template</span>&lt;class R &gt;</div>
 <span class="method"><a href="#">+ Angle</a></span>: void (R&amp; out, const Vector3D&lt;T&gt;&amp; p1, const Vector3D&lt;T&gt;&amp; p2);
</code>
</div></td></tr><tr id="Angle_37491319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> out</code> Where to store the result<br /></li><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief">X component.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ x</a></span>: T;</code>
</div></td></tr><tr id="x_37501319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief">Y component.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ y</a></span>: T;</code>
</div></td></tr><tr id="y_37511319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief">Z component.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ z</a></span>: T;</code>
</div></td></tr><tr id="z_37521319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Reset all coordinates.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator()_37531319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a href="#">+ operator()</a></span>: void (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr id="operator()_37531319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The new value for the X coordinate<br /></li><li><code> y1</code> The new value for the Y coordinate<br /></li><li><code> z1</code> The new value for the Z coordinate<br /></li></ul><div><code>see</code> :  move()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy all coordinates from another vector.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator()_37541319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator()</a></span>: void (const Vector3D&lt;U&gt;&amp; v);
</code>
</div></td></tr><tr id="operator()_37541319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> v</code> The coordinates to copy<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Reset a vector using two points.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator()_37551319844517_tmpl"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a href="#">+ operator()</a></span>: void (const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end);
</code>
</div></td></tr><tr id="operator()_37551319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> origin</code> Start point of the vector<br /></li><li><code> end</code> End point of the vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with the same value for all coordinates.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator+=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr id="operator+=_37561319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with relative coordinates.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator+=_37571319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator+=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="operator+=_37571319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with the same value for all coordinates.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator-=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr id="operator_=_37591319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Translate the point with relative coordinates.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator_=_37611319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator-=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="operator_=_37611319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Uniform scaling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator*=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr id="operator*=_37621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Dot product.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator*=_37631319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator*=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="operator*=_37631319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Uniform scaling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator/=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr id="operator/=_37641319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Dot product.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator/=_37651319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator/=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="operator/=_37651319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Comparison operator (equal with)<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator==_37661319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator==</a></span>: bool (const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator==_37661319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> The other point to compare with<br /></li></ul><div><code>return</code>  True if the two points are equal<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Comparison operator (non equal with)<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator!=_37671319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator!=</a></span>: bool (const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!=_37671319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> The other point to compare with<br /></li></ul><div><code>return</code>  True if the two points are not equal<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Assign new values for all coordinates from another vector.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator=_37681319844517_tmpl"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a href="#">+ operator=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr id="operator=_37681319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The new coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  move()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Print the vector.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ print</a></span>: std::ostream&amp; (std::ostream&amp; out) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="print_37691319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> out</code> An output stream<br /></li></ul><div><code>return</code>  The output stream `out`<br /></div><br />
</div>
</td></tr>
</table>


