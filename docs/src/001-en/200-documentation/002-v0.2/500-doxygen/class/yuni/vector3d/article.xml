<title>Vector3D</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Represents a 3D-vector, with generic homogeneous content</h2>
<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a7b5262d7029ff97b8372aaaeb8c5a6d4">Vector3D</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1add8160865e2170c608bc153685376551">Vector3D</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a127bd8cf5a16fa6fbf7dadf1c8a0c21c">Vector3D</a></span>(const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1ad686ab93a6960a8bd2783a8388d062aa">Vector3D</a></span>(const Vector3D&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a8bd2bba1802d39e70d8e35fd22075e4f">Vector3D</a></span>(const Vector3D&lt;U&gt;&amp; v)</code></td></tr>
<tr><td></td><td><br /><h4>Reset the coordinates</h4></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a7d556a42764d41ddcb2b59b62297bd98">reset</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Translation</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a867f89fe1eb9604af9a08cb47b315898">translate</a></span>(const U k)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a15c0be3a4da9776a2175e3fb2c6a21ee">translate</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1ad19786cd8a6f151e80bfe58e61d475be">translate</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td></td><td><br /><h4>Components</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a74652ecfa2e78ccd141ed968ae53b129">null</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a2367fb9b8db8e4963ec2e50a36a6a27f">magnitude</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1afa03bc7338152dbefa3ddb80fc00d4aa">squareMagnitude</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a0f4175ce2c4a8c9823ca0d8a91366aaf">dotProduct</a></span>(const Vector3D&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1ac32775a6a217d943a4194eae61eab1af">normalize</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a18e9f59956ebd0a26cb7ab6b971937e6">normalize</a></span>(const T coeff)</code></td></tr>
<tr><td></td><td><br /><h4>Mean</h4></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a734f53c155df333c4c184f1f3f1da924">mean</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a1b839e25767df818c7872f4540e69514">mean</a></span>(const Vector3D&lt;U&gt;&amp; p1, const Vector3D&lt;V&gt;&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> Vector3D </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a94c430fb9eb10ed119f807937cfe5b23">Mean</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1aca7e9da3edc844171125775dc987e310">Magnitude</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1aa427637c72a3073bd3e7d6f8e997c77c">DotProduct</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> Vector3D </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1ae033d0f7da41d1852573c474d2fb3b19">CrossProduct</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a4ff9d8aa5269b74f18e60abd628adb4f">Angle</a></span>(const Vector3D&amp; p1, const Vector3D&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a6a082e4e815bdabb3af757e34019fe98">Angle</a></span>(R&amp; out, const Vector3D&lt;T&gt;&amp; p1, const Vector3D&lt;T&gt;&amp; p2)</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a8879dda4b2df41aca12017210eccfb86">operator()</a></span>(const U x1, const V y1, const W z1)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a023ccfa91d1e05ca01892c0a9320a03e">operator()</a></span>(const Vector3D&lt;U&gt;&amp; v)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1adbd2c943b7dc91af2768d6d2019aee8b">operator()</a></span>(const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a22aba749418470dfd95791df762239fc">operator+=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1aef97e3f43a359ae125871622fe09770b">operator+=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1abfa3a44fda58c162f38bb58f35908a34">operator-=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a86eacdb8b67ca22138df4f3ffda7edf3">operator-=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1aedc9ac9a953fb08c3bce886483e07ed3">operator*=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a31f108c0612c72c079245e8e1d155b88">operator*=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a1544798636d2bee68fe13e9a2a384498">operator/=</a></span>(const T k)</code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a89f5a32d2a360e58ab052b5cdb19f69b">operator/=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a6123e76144895a5063ce124d23cc6431">operator==</a></span>(const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1af388e2eb88131e1992c80902ba87f7d9">operator!=</a></span>(const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Vector3D&lt;T&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1a3a3972e755e0d1d683cb0f040ad23611">operator=</a></span>(const Vector3D&lt;U&gt;&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code>std::ostream&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Vector3D_1ad0e1764925de56f165bfee07e16a20f0">print</a></span>(std::ostream&amp; out) <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Default constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a7b5262d7029ff97b8372aaaeb8c5a6d4" href="#">+ Vector3D</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1add8160865e2170c608bc153685376551" href="#">+ Vector3D</a></span>:  (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The default X coordinate<br /></li><li><code> y1</code> The default Y coordinate<br /></li><li><code> z1</code> The default Z coordinate<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor using two points.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a127bd8cf5a16fa6fbf7dadf1c8a0c21c" href="#">+ Vector3D</a></span>:  (const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> origin</code> Origin point of the vector<br /></li><li><code> end</code> End point of the vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor by copy.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1ad686ab93a6960a8bd2783a8388d062aa" href="#">+ Vector3D</a></span>:  (const Vector3D&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor by copy.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a8bd2bba1802d39e70d8e35fd22075e4f" href="#">+ Vector3D</a></span>:  (const Vector3D&lt;U&gt;&amp; v);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Reset the coordinates <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Reset the vector to the null vector.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a7d556a42764d41ddcb2b59b62297bd98" href="#">+ reset</a></span>: Vector3D&lt;T&gt;&amp; ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Translation <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Add the same value for all coordinates to the vector.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a867f89fe1eb9604af9a08cb47b315898" href="#">+ translate</a></span>: void (const U k);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with relative coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a15c0be3a4da9776a2175e3fb2c6a21ee" href="#">+ translate</a></span>: void (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The value to add to the X coordinate<br /></li><li><code> y1</code> The value to add to the Y coordinate<br /></li><li><code> z1</code> The value to add to the Z coordinate<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with relative coordinates from another Point.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1ad19786cd8a6f151e80bfe58e61d475be" href="#">+ translate</a></span>: void (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to the coordinates<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Components <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the vector is null.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a74652ecfa2e78ccd141ed968ae53b129" href="#">+ null</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the magnitude of the vector.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a2367fb9b8db8e4963ec2e50a36a6a27f" href="#">+ magnitude</a></span>: T () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the square magnitude of the vector.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1afa03bc7338152dbefa3ddb80fc00d4aa" href="#">+ squareMagnitude</a></span>: T () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the dot product with another arbitrary vector.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a0f4175ce2c4a8c9823ca0d8a91366aaf" href="#">+ dotProduct</a></span>: T (const Vector3D&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Normalize the vector (coefficient = 1.)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1ac32775a6a217d943a4194eae61eab1af" href="#">+ normalize</a></span>: Vector3D&amp; ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Normalize the vector with a different coefficient.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a18e9f59956ebd0a26cb7ab6b971937e6" href="#">+ normalize</a></span>: Vector3D&amp; (const T coeff);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Mean <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Calculate the mean between two points.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a734f53c155df333c4c184f1f3f1da924" href="#">+ mean</a></span>: Vector3D&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The calling object is modified to store the value<br /><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> Point to compute the mean with<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Calculate the mean between two points.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a1b839e25767df818c7872f4540e69514" href="#">+ mean</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p1, const Vector3D&lt;V&gt;&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The calling object is modified to store the value<br /><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> Point to compute the mean with<br /></li><li><code> p2</code> Second point to compute the mean with<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the mean between two arbitrary vectors.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a94c430fb9eb10ed119f807937cfe5b23" href="#">+ Mean</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  A new instance of Vector3D<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the magnitude of the addition of two arbitrary vectors.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1aca7e9da3edc844171125775dc987e310" href="#">+ Magnitude</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><source type="cpp">  Yuni::Vector3D&lt;&gt;  a(1.,    2,4,  6.9);
  Yuni::Vector3D&lt;&gt;  b(4.1.,  0.2,  3.1);

  //  This  way  is  faster
  std::cout  &lt;&lt;  "Magnitude  :  "  &lt;&lt;  Yuni::Vector3D&lt;&gt;::Magnitude (a,  b)  &lt;&lt;  std::endl;
  //  than
  std::cout  &lt;&lt;  "Magnitude  :  "  &lt;&lt;  (a  +  b). magnitude ()  &lt;&lt;  std::endl;
</source>
<div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  The magnitude of the addition of the 2 vectors<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the dot product of two arbitrary vectors.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1aa427637c72a3073bd3e7d6f8e997c77c" href="#">+ DotProduct</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><div><code>return</code>  The magnitude of the addition of the 2 vectors<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the cross product of two arbitrary vectors.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1ae033d0f7da41d1852573c474d2fb3b19" href="#">+ CrossProduct</a></span>: <span class="keyword">static</span> Vector3D (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the angle between two arbitrary vectors.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a4ff9d8aa5269b74f18e60abd628adb4f" href="#">+ Angle</a></span>: <span class="keyword">static</span> T (const Vector3D&amp; p1, const Vector3D&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Compute the angle between two vectors, with a specific return type.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;class R &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a6a082e4e815bdabb3af757e34019fe98" href="#">+ Angle</a></span>: void (R&amp; out, const Vector3D&lt;T&gt;&amp; p1, const Vector3D&lt;T&gt;&amp; p2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> out</code> Where to store the result<br /></li><li><code> p1</code> The first vector<br /></li><li><code> p2</code> The second vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief"><b>X component.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ x</a></span>: T;</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief"><b>Y component.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ y</a></span>: T;</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief"><b>Z component.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ z</a></span>: T;</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Reset all coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V , typename W &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a8879dda4b2df41aca12017210eccfb86" href="#">+ operator()</a></span>: void (const U x1, const V y1, const W z1);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> x1</code> The new value for the X coordinate<br /></li><li><code> y1</code> The new value for the Y coordinate<br /></li><li><code> z1</code> The new value for the Z coordinate<br /></li></ul><div><code>see</code> :  move()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy all coordinates from another vector.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a023ccfa91d1e05ca01892c0a9320a03e" href="#">+ operator()</a></span>: void (const Vector3D&lt;U&gt;&amp; v);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> v</code> The coordinates to copy<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Reset a vector using two points.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U , typename V &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1adbd2c943b7dc91af2768d6d2019aee8b" href="#">+ operator()</a></span>: void (const Point3D&lt;U&gt;&amp; origin, const Point3D&lt;V&gt;&amp; end);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> origin</code> Start point of the vector<br /></li><li><code> end</code> End point of the vector<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with the same value for all coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a22aba749418470dfd95791df762239fc" href="#">+ operator+=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with relative coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1aef97e3f43a359ae125871622fe09770b" href="#">+ operator+=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with the same value for all coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1abfa3a44fda58c162f38bb58f35908a34" href="#">+ operator-=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> k</code> The value to add to all coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Translate the point with relative coordinates.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a86eacdb8b67ca22138df4f3ffda7edf3" href="#">+ operator-=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The values to add to coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  translate()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Uniform scaling.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1aedc9ac9a953fb08c3bce886483e07ed3" href="#">+ operator*=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Dot product.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a31f108c0612c72c079245e8e1d155b88" href="#">+ operator*=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Uniform scaling.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1a1544798636d2bee68fe13e9a2a384498" href="#">+ operator/=</a></span>: Vector3D&lt;T&gt;&amp; (const T k);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Dot product.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a89f5a32d2a360e58ab052b5cdb19f69b" href="#">+ operator/=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Comparison operator (equal with)<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a6123e76144895a5063ce124d23cc6431" href="#">+ operator==</a></span>: bool (const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> The other point to compare with<br /></li></ul><div><code>return</code>  True if the two points are equal<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Comparison operator (non equal with)<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1af388e2eb88131e1992c80902ba87f7d9" href="#">+ operator!=</a></span>: bool (const Vector3D&lt;U&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> The other point to compare with<br /></li></ul><div><code>return</code>  True if the two points are not equal<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Assign new values for all coordinates from another vector.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename U &gt;</div>
 <span class="method"><a name="classYuni_1_1Vector3D_1a3a3972e755e0d1d683cb0f040ad23611" href="#">+ operator=</a></span>: Vector3D&lt;T&gt;&amp; (const Vector3D&lt;U&gt;&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The new coordinates<br /></li></ul><div><code>return</code>  Always *this<br /></div><div><code>see</code> :  move()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Print the vector.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Vector3D_1ad0e1764925de56f165bfee07e16a20f0" href="#">+ print</a></span>: std::ostream&amp; (std::ostream&amp; out) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> out</code> An output stream<br /></li></ul><div><code>return</code>  The output stream `out`<br /></div><br />
</div>
</td></tr>
</table>


