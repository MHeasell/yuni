<title>DepthPrefixIterator</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>DepthPrefixIterator</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Common operations</h3>
<p class="doxygen_fun">Increment the iterator by the distance n.<br />
<code>void <span class="method"><a href="#">forward</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Decrement the iterator by the distance n.<br />
<code>void <span class="method"><a href="#">backward</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Increment/Decrement the iterator by the distance n.<br />
<code>void <span class="method"><a href="#">advance</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Get the distance between this iterator and another one.<br />
<code>difference_type <span class="method"><a href="#">distance</a></span>(const IIterator &lt; M, C &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">Increment the operator by the distance 1.<br />
<code>IteratorType &amp; <span class="method"><a href="#">operator++</a></span>();</code></p>
<p class="doxygen_fun">(Post) Increment the iterator by the distance 1<br />
<code>IteratorType <span class="method"><a href="#">operator++</a></span>(int );</code></p>
<p class="doxygen_fun">Decrement the iterator by the distance 1.<br />
<code>IteratorType &amp; <span class="method"><a href="#">operator--</a></span>();</code></p>
<p class="doxygen_fun">(Post) Decrement the iterator by the distance 1<br />
<code>IteratorType <span class="method"><a href="#">operator--</a></span>(int );</code></p>
<p class="doxygen_fun">Increment the operator by the distance n.<br />
<code>IteratorType &amp; <span class="method"><a href="#">operator+=</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Decrement the operator by the distance n.<br />
<code>IteratorType &amp; <span class="method"><a href="#">operator-=</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Equality comparison.<br />
<code>bool <span class="method"><a href="#">operator==</a></span>(const IIterator &lt; M, C &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Non-equality comparison.<br />
<code>bool <span class="method"><a href="#">operator!=</a></span>(const IIterator &lt; M, C &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">STL Compatibility</h3>
<p class="doxygen_typedef">Value type.<br />
<code><span class="keyword">typedef</span> NodeT <span class="method"><a href="#">value_type</a></span>;</code></p>
<p class="doxygen_typedef">Pointer.<br />
<code><span class="keyword">typedef</span> NodeT * <span class="method"><a href="#">pointer</a></span>;</code></p>
<p class="doxygen_typedef">Const pointer.<br />
<code><span class="keyword">typedef</span> const NodeT * <span class="method"><a href="#">const_pointer</a></span>;</code></p>
<p class="doxygen_typedef">Reference.<br />
<code><span class="keyword">typedef</span> NodeT &amp; <span class="method"><a href="#">reference</a></span>;</code></p>
<p class="doxygen_typedef">Const reference.<br />
<code><span class="keyword">typedef</span> const NodeT &amp; <span class="method"><a href="#">const_reference</a></span>;</code></p>
<p class="doxygen_typedef">Category.<br />
<code><span class="keyword">typedef</span> std::bidirectional_iterator_tag <span class="method"><a href="#">iterator_category</a></span>;</code></p>
<p class="doxygen_typedef">Difference type.<br />
<code><span class="keyword">typedef</span> ptrdiff_t <span class="method"><a href="#">difference_type</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructors</h3>
<p class="doxygen_fun"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>();</code></p>
<p class="doxygen_fun"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>(const DepthPrefixIterator<b>&amp;</b> it);</code></p>
<p class="doxygen_fun"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>(const NodeT<b>&amp;</b> p);</code></p>
<p class="doxygen_fun"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>(const Ptr<b>&amp;</b> p);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Static overloads from IIterator</h3>
<p class="doxygen_fun">Increment the iterator by the distance 1.<br />
<code>void <span class="method"><a href="#">forward</a></span>();</code></p>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">forward</a></span>(difference_type n);</code></p>
<p class="doxygen_fun">Decrement the iterator by the distance n.<br />
<code>void <span class="method"><a href="#">backward</a></span>();</code></p>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">backward</a></span>(difference_type n);</code></p>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">advance</a></span>(difference_type n);</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;class N , bool C&gt;<br />difference_type <span class="method"><a href="#">distance</a></span>(const DepthPrefixIterator &lt; N, C &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operator overloads</h3>
<p class="doxygen_fun">The operator `*`.<br />
<code>DepthPrefixIterator &lt; NodeT, ConstT &gt;:: reference <span class="method"><a href="#">operator*</a></span>();</code></p>
<p class="doxygen_fun">The operator `*`.<br />
<code>DepthPrefixIterator &lt; NodeT, ConstT &gt;:: const_reference <span class="method"><a href="#">operator*</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `-&gt;`.<br />
<code>DepthPrefixIterator &lt; NodeT, ConstT &gt;:: pointer <span class="method"><a href="#">operator-&gt;</a></span>();</code></p>
<p class="doxygen_fun">The operator `-&gt;`.<br />
<code>DepthPrefixIterator &lt; NodeT, ConstT &gt;:: const_pointer <span class="method"><a href="#">operator-&gt;</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `==`.<br />
<code>bool <span class="method"><a href="#">operator==</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `!=`.<br />
<code>bool <span class="method"><a href="#">operator!=</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `&lt;`.<br />
<code>bool <span class="method"><a href="#">operator&lt;</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `&gt;`.<br />
<code>bool <span class="method"><a href="#">operator&gt;</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `&lt;=`.<br />
<code>bool <span class="method"><a href="#">operator&lt;=</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">The operator `&gt;=`.<br />
<code>bool <span class="method"><a href="#">operator&gt;=</a></span>(const IteratorType<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>A non-zero value if the iterator can go forward. A non-zero value if the iterator can go backward.<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">The iterator type.<br />
<code><span class="keyword">typedef</span> DepthPrefixIterator &lt; NodeT, ConstT &gt; <span class="method"><a href="#">IteratorType</a></span>;</code></p>
<p class="doxygen_typedef"><code><span class="keyword">typedef</span> IIterator &lt; DepthPrefixIterator &lt; NodeT, ConstT &gt;, ConstT &gt; <span class="method"><a href="#">BaseIterator</a></span>;</code></p>
<p class="doxygen_typedef"><code><span class="keyword">typedef</span> NodeT::Ptr <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p><code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">The model implementation.<br />
<code><span class="keyword">typedef</span> DepthPrefixIterator &lt; NodeT, ConstT &gt; <span class="method"><a href="#">ModelType</a></span>;</code></p>
<p class="doxygen_typedef">Ancestor.<br />
<code><span class="keyword">typedef</span> DepthPrefixIterator &lt; NodeT, ConstT &gt; <span class="method"><a href="#">AncestorType</a></span>;</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
