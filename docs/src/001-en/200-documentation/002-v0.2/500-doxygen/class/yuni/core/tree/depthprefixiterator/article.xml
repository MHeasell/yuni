<title>DepthPrefixIterator</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2><code>DepthPrefixIterator</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Common operations <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment the iterator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">forward</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement the iterator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">backward</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment/Decrement the iterator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">advance</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the distance between this iterator and another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">distance</a></span>: difference_type (const IIterator&lt;M, C&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment the operator by the distance 1.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator++</a></span>: IteratorType&amp; ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">(Post) Increment the iterator by the distance 1<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator++</a></span>: IteratorType (int );
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement the iterator by the distance 1.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator--</a></span>: IteratorType&amp; ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">(Post) Decrement the iterator by the distance 1<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator--</a></span>: IteratorType (int );
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment the operator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: IteratorType&amp; (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement the operator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-=</a></span>: IteratorType&amp; (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Equality comparison.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: bool (const IIterator&lt;M, C&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Non-equality comparison.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!=</a></span>: bool (const IIterator&lt;M, C&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">STL Compatibility <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Value type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">value_type</a></span>: <span class="keyword">typedef</span> NodeT;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">pointer</a></span>: <span class="keyword">typedef</span> NodeT*;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Const pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_pointer</a></span>: <span class="keyword">typedef</span> const NodeT*;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Reference.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">reference</a></span>: <span class="keyword">typedef</span> NodeT&amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Const reference.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_reference</a></span>: <span class="keyword">typedef</span> const NodeT&amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Category.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">iterator_category</a></span>: <span class="keyword">typedef</span> std::bidirectional_iterator_tag;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Difference type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">difference_type</a></span>: <span class="keyword">typedef</span> ptrdiff_t;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>:  (const DepthPrefixIterator&amp; it);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>:  (const NodeT&amp; p);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">DepthPrefixIterator</a></span>:  (const Ptr&amp; p);
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Static overloads from IIterator <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment the iterator by the distance 1.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">forward</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">forward</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement the iterator by the distance n.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">backward</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">backward</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">advance</a></span>: void (difference_type n);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code><div id="distance_22741319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class N , bool C&gt;</div>
 <span class="method"><a href="#">distance</a></span>: difference_type (const DepthPrefixIterator&lt;N, C&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operator overloads <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `*`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator*</a></span>: DepthPrefixIterator&lt;NodeT, ConstT&gt;:: reference ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `*`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator*</a></span>: DepthPrefixIterator&lt;NodeT, ConstT&gt;:: const_reference () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `-&gt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-&gt;</a></span>: DepthPrefixIterator&lt;NodeT, ConstT&gt;:: pointer ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `-&gt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-&gt;</a></span>: DepthPrefixIterator&lt;NodeT, ConstT&gt;:: const_pointer () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `==`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `!=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!=</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&lt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&gt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&gt;</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&lt;=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;=</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&gt;=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&gt;=</a></span>: bool (const IteratorType&amp; rhs) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">A non-zero value if the iterator can go forward. A non-zero value if the iterator can go backward.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The iterator type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">IteratorType</a></span>: <span class="keyword">typedef</span> DepthPrefixIterator&lt;NodeT, ConstT&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><code><span class="method"><a href="#">BaseIterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;DepthPrefixIterator&lt;NodeT, ConstT&gt;, ConstT&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> NodeT::Ptr;</code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The model implementation.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ModelType</a></span>: <span class="keyword">typedef</span> DepthPrefixIterator&lt;NodeT, ConstT&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Ancestor.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">AncestorType</a></span>: <span class="keyword">typedef</span> DepthPrefixIterator&lt;NodeT, ConstT&gt;;</code>
</td></tr>
</table>


