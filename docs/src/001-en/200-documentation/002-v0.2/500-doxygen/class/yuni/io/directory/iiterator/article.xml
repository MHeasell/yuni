<title>IIterator</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Iterate through subfolders and files of a given directory</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">IteratorType</a></span> : IIterator&lt;detached&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ThreadingPolicy</a></span> : Policy::ObjectLevelLockable&lt;IteratorType&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructor &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">IIterator</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">IIterator</a></span>(const IIterator&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>IIterator</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Search paths</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">clear</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">add</a></span>(const StringT&amp; folder)</code></td></tr>
<tr><td></td><td><br /><h4>Execution flow</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">start</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">stop</a></span>(const uint32 timeout)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">wait</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">wait</a></span>(const uint32 timeout)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">gracefulStop</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">started</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>IIterator&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const IIterator&amp; rhs)</code></td></tr>
</table></div>

<h3>Protected function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onStart</a></span>(const String&amp; root)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onTerminate</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onAbort</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>Flow </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onBeginFolder</a></span>(const String&amp; filename, const String&amp; parent, const String&amp; name)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onEndFolder</a></span>(const String&amp; filename, const String&amp; parent, const String&amp; name)</code></td></tr>
<tr><td class="doxygen_index"><code>Flow </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onFile</a></span>(const String&amp; filename, const String&amp; parent, const String&amp; name, uint64 size)</code></td></tr>
<tr><td class="doxygen_index"><code>Flow </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onError</a></span>(const String&amp; filename)</code></td></tr>
<tr><td class="doxygen_index"><code>Flow </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">onAccessError</a></span>(const String&amp; filename)</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>This class is reentrant. Consequently, it will be thread-safe as long as the user custom implementation is thread-safe.<br /><source type="cpp">  #include  &lt; yuni/yuni.h &gt;
  #include  &lt; yuni/io/directory/iterator.h &gt;
  #include  &lt;iostream&gt;

  using  namespace  Yuni;


  class  MyIterator  :  public  IO::Directory:: IIterator &lt;true&gt;
  {
  public :
     //!  Flow
     typedef  IO::Flow  Flow ;

  public :
     MyIterator()  {}
     virtual  ~MyIterator()
     {
         //  For  code  robustness  and  to  avoid  corrupt  vtable
         stop ();
     }

  protected :
     virtual  bool  onStart ( const  String &amp;  rootFolder)
     {
         std::cout  &lt;&lt;  "  [+]  "  &lt;&lt;  rootFolder  &lt;&lt;  std::endl;
         pCounter  =  1;
         pFileCount  =  0;
         pFolderCount  =  0;
         pTotalSize  =  0;
         return  true ;
     }

     virtual  Flow  onBeginFolder ( const  String &amp;,  const  String &amp;,  const  String &amp;  name)
     {
         printSpaces();
         std::cout  &lt;&lt;  "  [+]  "  &lt;&lt;  name  &lt;&lt;  std::endl;
         ++pCounter;
         ++pFolderCount;
         return  IO::flowContinue ;
     }

     virtual  void  onEndFolder ( const  String &amp;,  const  String &amp;,  const  String &amp;)
     {
         --pCounter;
     }

     virtual  Flow  onFile ( const  String &amp;,  const  String &amp;,  const  String &amp;  name,  uint64  size)
     {
         printSpaces();
         std::cout  &lt;&lt;  "   -   "  &lt;&lt;  name  &lt;&lt;  "  ("  &lt;&lt;  size  &lt;&lt;  "  bytes)"  &lt;&lt;  std::endl;
         ++pFileCount;
         pTotalSize  +=  size;
         return  IO::flowContinue ;
     }

     virtual  void  onTerminate ()
     {
         std::cout  &lt;&lt;  "\n" ;
         std::cout  &lt;&lt;  pFolderCount  &lt;&lt;  "  folder(s),  "  &lt;&lt;  pFileCount  &lt;&lt;  "  file(s),   "
             &lt;&lt;  pTotalSize  &lt;&lt;  "  bytes"  &lt;&lt;  std::endl;
     }

  private :
     void  printSpaces()
     {
         for  ( unsigned  int  i  =  0;  i  !=  pCounter;  ++i)
             std::cout  &lt;&lt;  "     " ;
     }

  private :
     unsigned  int  pCounter;
     unsigned  int  pFolderCount;
     unsigned  int  pFileCount;
     uint64  pTotalSize;
  };


  int  main()
  {
         MyIterator  iterator;
         iterator.add( "/tmp" );
         iterator.start();
         iterator.wait();
         return  0;
  }
</source>
<br /> This class is thread-safe even when not in detached mode.<div class="doxygen_params">Parameters :</div><ul><li><code> DetachedT</code> True to perform the operation into a separate thread<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr id="@358detacheddefaultTimeout_29411319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Itself.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ IteratorType</a></span>: <span class="keyword">typedef</span> IIterator&lt;detached&gt;;
</code>
</div></td></tr><tr id="IteratorType_29421319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> Policy::ObjectLevelLockable&lt;IteratorType&gt;;
</code>
</div></td></tr><tr id="ThreadingPolicy_29441319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief">Get if this policy is thread-safe.<br /><div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr id="@369_29461319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default Constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ IIterator</a></span>:  ();
</code>
</div></td></tr><tr id="IIterator_29491319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ IIterator</a></span>:  (const IIterator&amp; rhs);
</code>
</div></td></tr><tr id="IIterator_29501319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>IIterator</a></span>:  ();
</code>
</div></td></tr><tr id="~IIterator_29521319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Search paths <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Clear the list of path.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ clear</a></span>: void ();
</code>
</div></td></tr><tr id="clear_29541319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a new entry in the search paths.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="add_29551319844517_tmpl"><span class="keyword">template</span>&lt;class StringT &gt;</div>
 <span class="method"><a href="#">+ add</a></span>: void (const StringT&amp; folder);
</code>
</div></td></tr><tr id="add_29551319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Execution flow <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Perform the traversing the root folder.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ start</a></span>: bool ();
</code>
</div></td></tr><tr id="start_29581319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">In not in detached mode, this method will block the calling thread only the traversing is complete. It will have no effect if a traversing is already currently in progress.<div><code>return</code>  True if the thread has been started (detached mode)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Stop the traversing of the root folder.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ stop</a></span>: bool (const uint32 timeout);
</code>
</div></td></tr><tr id="stop_29601319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> timeout</code> The timeout in milliseconds before killing the thread (detached mode only)<br /></li></ul><div><code>return</code>  An error status (`errNone` if succeeded)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Wait for the end of the operation (infinite amount of time)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ wait</a></span>: void ();
</code>
</div></td></tr><tr id="wait_29621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This routine has no effect if not in detached mode.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Wait for the end of the operation.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ wait</a></span>: void (const uint32 timeout);
</code>
</div></td></tr><tr id="wait_29641319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This routine has no effect if not in detached mode.<div class="doxygen_params">Parameters :</div><ul><li><code> timeout</code> The timeout in milliseconds<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Ask to Stop the traversing as soon as possible.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ gracefulStop</a></span>: void ();
</code>
</div></td></tr><tr id="gracefulStop_29651319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This routine has no effect if not in detached mode.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the detached thread is currently running.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ started</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="started_29671319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the thread is running. Always false if not in detached mode.<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">assignment<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: IIterator&amp; (const IIterator&amp; rhs);
</code>
</div></td></tr><tr id="operator=_29681319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected <code class="doxygen_visibility">Protected</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : An iteration has started.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onStart</a></span>: bool (const String&amp; root);
</code>
</div></td></tr><tr id="onStart_29711319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The given root path<br /></li></ul><div><code>return</code>  False to cancel the operation<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : The operation is complete.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onTerminate</a></span>: void ();
</code>
</div></td></tr><tr id="onTerminate_29731319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread). This method will not be called if the process has been canceled.<div><code>see</code> :  onAbort()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">The process has been aborted.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onAbort</a></span>: void ();
</code>
</div></td></tr><tr id="onAbort_29751319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : Starting to Traverse a new folder.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onBeginFolder</a></span>: Flow (const String&amp; filename, const String&amp; parent, const String&amp; name);
</code>
</div></td></tr><tr id="onBeginFolder_29771319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The full filename (ex: /path/to/my/file.txt)<br /></li><li><code> parent</code> The parent folder (ex: /path/to/my)<br /></li><li><code> name</code> The name of the folder found only (ex: file.txt)<br /></li></ul><div><code>return</code>  itSkip to not go deeper in this folder<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : A folder has been traversed.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onEndFolder</a></span>: void (const String&amp; filename, const String&amp; parent, const String&amp; name);
</code>
</div></td></tr><tr id="onEndFolder_29791319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The full filename (ex: /path/to/my/file.txt)<br /></li><li><code> parent</code> The parent folder (ex: /path/to/my)<br /></li><li><code> name</code> The name of the folder found only (ex: file.txt)<br /></li></ul><div><code>return</code>  itSkip to not go deeper in this folder<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : A file has been found.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onFile</a></span>: Flow (const String&amp; filename, const String&amp; parent, const String&amp; name, uint64 size);
</code>
</div></td></tr><tr id="onFile_29821319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The full filename (ex: /path/to/my/file.txt)<br /></li><li><code> parent</code> The parent folder<br /></li><li><code> name</code> The name of the file only<br /></li><li><code> size</code> Size in bytes<br /></li></ul><div><code>return</code>  itAbort to abort the whole process, itSkip to skip the current folder and its sub-folders<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : It was impossible to open a folder.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onError</a></span>: Flow (const String&amp; filename);
</code>
</div></td></tr><tr id="onError_29851319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The full filename (ex: /path/to/my/file.txt)<br /></li></ul><div><code>return</code>  itAbort to abort the whole process, itContinue will be used otherwise.<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Event : It was impossible to the status of a file.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"># onAccessError</a></span>: Flow (const String&amp; filename);
</code>
</div></td></tr><tr id="onAccessError_29871319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method may be called from any thread in detached mode (the calling thread otherwise, but always by the same thread).<br /><div class="doxygen_params">Parameters :</div><ul><li><code> filename</code> The full filename (ex: /path/to/my/file.txt)<br /></li></ul><div><code>return</code>  itAbort to abort the whole process, itContinue will be used otherwise.<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected <code class="doxygen_visibility">Protected</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><div class="doxygen_brief">Mutex.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#"># pMutex</a></span>: Mutex;</code>
</div></td></tr><tr id="pMutex_29891319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


