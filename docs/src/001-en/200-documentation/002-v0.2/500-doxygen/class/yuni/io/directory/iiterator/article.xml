<title>IIterator</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>IIterator</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructor &amp; Destructor</h3>
<p class="doxygen_fun">Default Constructor.<br />
<code> <span class="method"><a href="#">IIterator</a></span>();</code></p>
<p class="doxygen_fun">Copy constructor.<br />
<code> <span class="method"><a href="#">IIterator</a></span>(const IIterator<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#"><b> ~ </b>IIterator</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Search paths</h3>
<p class="doxygen_fun">Clear the list of path.<br />
<code>void <span class="method"><a href="#">clear</a></span>();</code></p>
<p class="doxygen_fun">Add a new entry in the search paths.<br />
<code><span class="keyword">template</span>&lt;class StringT &gt;<br />void <span class="method"><a href="#">add</a></span>(const StringT<b>&amp;</b> folder);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Execution flow</h3>
<p class="doxygen_fun">Perform the traversing the root folder.<br />
<code>bool <span class="method"><a href="#">start</a></span>();</code></p>
<p class="doxygen_fun">Stop the traversing of the root folder.<br />
<code>bool <span class="method"><a href="#">stop</a></span>(const uint32 timeout);</code></p>
<p class="doxygen_fun">Wait for the end of the operation (infinite amount of time)<br />
<code>void <span class="method"><a href="#">wait</a></span>();</code></p>
<p class="doxygen_fun">Wait for the end of the operation.<br />
<code>void <span class="method"><a href="#">wait</a></span>(const uint32 timeout);</code></p>
<p class="doxygen_fun">Ask to Stop the traversing as soon as possible.<br />
<code>void <span class="method"><a href="#">gracefulStop</a></span>();</code></p>
<p class="doxygen_fun">Get if the detached thread is currently running.<br />
<code>bool <span class="method"><a href="#">started</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">assignment<br />
<code>IIterator &amp; <span class="method"><a href="#">operator=</a></span>(const IIterator<b>&amp;</b> rhs);</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>Detached mode. The default timeout for stopping a thread.<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">Itself.<br />
<code><span class="keyword">typedef</span> IIterator &lt; detached &gt; <span class="method"><a href="#">IteratorType</a></span>;</code></p>
<p class="doxygen_typedef">The threading policy.<br />
<code><span class="keyword">typedef</span> Policy::ObjectLevelLockable &lt; IteratorType &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Event : An iteration has started.<br />
<code>bool <span class="method"><a href="#">onStart</a></span>(const String<b>&amp;</b> root);</code></p>
<p class="doxygen_fun">Event : The operation is complete.<br />
<code>void <span class="method"><a href="#">onTerminate</a></span>();</code></p>
<p class="doxygen_fun">The process has been aborted.<br />
<code>void <span class="method"><a href="#">onAbort</a></span>();</code></p>
<p class="doxygen_fun">Event : Starting to Traverse a new folder.<br />
<code>Flow <span class="method"><a href="#">onBeginFolder</a></span>(const String<b>&amp;</b> filename, const String<b>&amp;</b> parent, const String<b>&amp;</b> name);</code></p>
<p class="doxygen_fun">Event : A folder has been traversed.<br />
<code>void <span class="method"><a href="#">onEndFolder</a></span>(const String<b>&amp;</b> filename, const String<b>&amp;</b> parent, const String<b>&amp;</b> name);</code></p>
<p class="doxygen_fun">Event : A file has been found.<br />
<code>Flow <span class="method"><a href="#">onFile</a></span>(const String<b>&amp;</b> filename, const String<b>&amp;</b> parent, const String<b>&amp;</b> name, uint64 size);</code></p>
<p class="doxygen_fun">Event : It was impossible to open a folder.<br />
<code>Flow <span class="method"><a href="#">onError</a></span>(const String<b>&amp;</b> filename);</code></p>
<p class="doxygen_fun">Event : It was impossible to the status of a file.<br />
<code>Flow <span class="method"><a href="#">onAccessError</a></span>(const String<b>&amp;</b> filename);</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Mutex.<br />
<code>Mutex <span class="method"><a href="#">pMutex</a></span>;</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
