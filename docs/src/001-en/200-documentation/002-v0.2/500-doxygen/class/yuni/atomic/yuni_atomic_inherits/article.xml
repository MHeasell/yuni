<title>YUNI_ATOMIC_INHERITS</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>An atomic scalar type</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ThreadingPolicy</a></span> : Private::AtomicImpl::ThreadingPolicy&lt; threadSafe, Int&lt; Size, TP&gt;&gt;:: Type</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Type</a></span> : Private::AtomicImpl::TypeFromSize&lt; Size&gt;:: Type</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ScalarType</a></span> : Type</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">InnerType</a></span> : Private::AtomicImpl::Volatile&lt; threadSafe, Type&gt;:: Type</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>(const sint16 v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>(const sint32 v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>(const sint64 v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>(const Int&amp; v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Int</a></span>(const Int&lt; Size2, TP2&gt;&amp; v)</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>ScalarType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator++</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ScalarType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator--</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ScalarType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator++</a></span>(int )</code></td></tr>
<tr><td class="doxygen_index"><code>ScalarType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator--</a></span>(int )</code></td></tr>
<tr><td class="doxygen_index"><code>Int&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const ScalarType v)</code></td></tr>
<tr><td class="doxygen_index"><code>Int&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(const ScalarType v)</code></td></tr>
<tr><td class="doxygen_index"><code>Int&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-=</a></span>(const ScalarType v)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator ScalarType</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!</a></span>() <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>An atomic scalar value is a value that may be updated atomically (means without the use of a mutex).<br /><source type="cpp">  Atomic::Int&lt;32&gt;  i;
  ++i;
</source>
<br /><div class="doxygen_params">Parameters :</div><ul><li><code> Size</code> Size (in bits) of the scalar type (16 or 32 or 64)<br /></li><li><code> TP</code> A threading policy to guarantee thread-safety or not<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr id="@2threadSafethreadSafe_67421319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr id="@3mustUseMutex_67431319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><code><i>(unmanaged tag: 4)</i></code>
</div></td></tr><tr id="@4size_67441319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Threading Policy .<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::ThreadingPolicy&lt; threadSafe, Int&lt; Size, TP&gt;&gt;:: Type;
</code>
</div></td></tr><tr id="ThreadingPolicy_67451319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The threading policy will be Policy::SingleThreaded in all cases, except when the compiler or the operating system can not provide methods on atomic scalar types. It is the case when the version of gcc is &lt; 4.1 for example.<br />
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The scalar type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Type</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::TypeFromSize&lt; Size&gt;:: Type;
</code>
</div></td></tr><tr id="Type_67461319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The scalar type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ScalarType</a></span>: <span class="keyword">typedef</span> Type;
</code>
</div></td></tr><tr id="ScalarType_67471319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Type of the inner variable.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ InnerType</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::Volatile&lt; threadSafe, Type&gt;:: Type;
</code>
</div></td></tr><tr id="InnerType_67481319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Most of the time the keyword `volatile` is required (to avoid dangerous optimizations by the compiler), except when there is no need for thread-safety or when a mutex is used.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default Constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Int</a></span>:  ();
</code>
</div></td></tr><tr id="Int_67491319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with an initial value (int16)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Int</a></span>:  (const sint16 v);
</code>
</div></td></tr><tr id="Int_67501319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with an initial value (int32)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Int</a></span>:  (const sint32 v);
</code>
</div></td></tr><tr id="Int_67511319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with an initial value (int64)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Int</a></span>:  (const sint64 v);
</code>
</div></td></tr><tr id="Int_67521319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Int</a></span>:  (const Int&amp; v);
</code>
</div></td></tr><tr id="Int_67531319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor from another type and another threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="Int_67541319844517_tmpl"><span class="keyword">template</span>&lt;int Size2, template&lt; class&gt;class TP2&gt;</div>
 <span class="method"><a href="#">+ Int</a></span>:  (const Int&lt; Size2, TP2&gt;&amp; v);
</code>
</div></td></tr><tr id="Int_67541319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Pre increment operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator++</a></span>: ScalarType ();
</code>
</div></td></tr><tr id="operator++_67551319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Pre decrement operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator--</a></span>: ScalarType ();
</code>
</div></td></tr><tr id="operator___67561319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Post increment operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator++</a></span>: ScalarType (int );
</code>
</div></td></tr><tr id="operator++_67571319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Post decrement operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator--</a></span>: ScalarType (int );
</code>
</div></td></tr><tr id="operator___67581319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Pre increment operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: Int&amp; (const ScalarType v);
</code>
</div></td></tr><tr id="operator=_67591319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Increment.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator+=</a></span>: Int&amp; (const ScalarType v);
</code>
</div></td></tr><tr id="operator+=_67601319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Decrement.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator-=</a></span>: Int&amp; (const ScalarType v);
</code>
</div></td></tr><tr id="operator_=_67611319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Cast operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator ScalarType</a></span>:  () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator ScalarType_67621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">not<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!_67631319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


