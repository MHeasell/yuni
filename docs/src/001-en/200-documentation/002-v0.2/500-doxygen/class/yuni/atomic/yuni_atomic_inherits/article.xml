<title>YUNI_ATOMIC_INHERITS</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>YUNI_ATOMIC_INHERITS</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default Constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with an initial value (int16)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  (const sint16 v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with an initial value (int32)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  (const sint32 v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with an initial value (int64)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  (const sint64 v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  (const Int<b>&amp;</b> v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor from another type and another threading policy.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Int</a></span>:  (const Int&lt; Size2, TP2 &gt;<b>&amp;</b> v);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Pre increment operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator++</a></span>: ScalarType ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Pre decrement operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator--</a></span>: ScalarType ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Post increment operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator++</a></span>: ScalarType (int );</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Post decrement operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator--</a></span>: ScalarType (int );</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Pre increment operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Int &amp; (const ScalarType v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Int &amp; (const ScalarType v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-=</a></span>: Int &amp; (const ScalarType v);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Cast operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator ScalarType</a></span>:  () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">not<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">Get if the class must be thread-safe. Get if the class must be thread-safe.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone">Get if we have to guarantee ourselves the thread-safety.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone">Size (in bits) of the scalar type.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Threading Policy .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::ThreadingPolicy&lt; threadSafe, Int&lt; Size, TP &gt; &gt;:: Type;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The scalar type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Type</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::TypeFromSize&lt; Size &gt;:: Type;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The scalar type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ScalarType</a></span>: <span class="keyword">typedef</span> Type;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Type of the inner variable.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">InnerType</a></span>: <span class="keyword">typedef</span> Private::AtomicImpl::Volatile&lt; threadSafe, Type &gt;:: Type;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
</table>


