<title>Emitter</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>Emitter</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructors &amp; Destructor</h3>
<p class="doxygen_fun">Shortest constructor.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Emitter</a></span>(bool loop); [inline]</code></p>
<p class="doxygen_fun">Constructor with 3D position.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Emitter</a></span>(const Point3D &lt;&gt;<b>&amp;</b> position, bool loop); [inline]</code></p>
<p class="doxygen_fun">Constructor with position, velocity and direction.<br />
<code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Emitter</a></span>(const Point3D &lt;&gt;<b>&amp;</b> position, const Vector3D &lt;&gt;<b>&amp;</b> velocity, const Vector3D &lt;&gt;<b>&amp;</b> direction, bool loop); [inline]</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#">destructor</a></span> <span class="method"><a href="#"><b> ~ </b>Emitter</a></span>(); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Methods</h3>
<p class="doxygen_fun">Attach a buffer to the emitter.<br />
<code>bool <span class="method"><a href="#">attachBufferDispatched</a></span>(Sound::Ptr<b>&amp;</b> buffer);</code></p>
<p class="doxygen_fun">Prepare the emitter for playing.<br />
<code>bool <span class="method"><a href="#">prepareDispatched</a></span>();</code></p>
<p class="doxygen_fun">Play the sound.<br />
<code>bool <span class="method"><a href="#">playSoundDispatched</a></span>();</code></p>
<p class="doxygen_fun">Play the sound.<br />
<code>bool <span class="method"><a href="#">playSoundDispatched</a></span>(Sound::Ptr<b>&amp;</b> buffer);</code></p>
<p class="doxygen_fun">Update buffers if necessary.<br />
<code>bool <span class="method"><a href="#">updateDispatched</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Accessors</h3>
<p class="doxygen_fun">Set the 3D position of the emitter.<br />
<code>void <span class="method"><a href="#">position</a></span>(const Point3D &lt;&gt;<b>&amp;</b> position); [inline]</code></p>
<p class="doxygen_fun">Get the 3D position of the emitter.<br />
<code>Point3D <span class="method"><a href="#">position</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Set the velocity of the emitter.<br />
<code>void <span class="method"><a href="#">velocity</a></span>(const Vector3D &lt;&gt;<b>&amp;</b> position); [inline]</code></p>
<p class="doxygen_fun">Get the velocity of the emitter.<br />
<code>Vector3D <span class="method"><a href="#">velocity</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Set the direction of the emitter.<br />
<code>void <span class="method"><a href="#">direction</a></span>(const Vector3D &lt;&gt;<b>&amp;</b> position); [inline]</code></p>
<p class="doxygen_fun">Get the direction of the emitter.<br />
<code>Vector3D <span class="method"><a href="#">direction</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Set the volume modifier on the emitter.<br />
<code>void <span class="method"><a href="#">gain</a></span>(float newGain); [inline]</code></p>
<p class="doxygen_fun">Get the current volume modifier.<br />
<code>float <span class="method"><a href="#">gain</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the elapsed playback time (in seconds)<br />
<code>sint64 <span class="method"><a href="#">elapsedTime</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Get the identifier for the emitter.<br />
<code>unsigned int <span class="method"><a href="#">id</a></span>() <span class="keyword">const</span>; [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>Default value for attenuation (enabled) Default value for looping (false)<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">The most suitable smart pointer for the class.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; Emitter &gt; <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">Threading Policy .<br />
<code><span class="keyword">typedef</span> Policy::ObjectLevelLockable &lt; Emitter &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">Map.<br />
<code><span class="keyword">typedef</span> std::map&lt; String , Ptr &gt; <span class="method"><a href="#">Map</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_var">Default value for pitch (1.0)<br />
<code>const float <span class="method"><a href="#">DefaultPitch</a></span>;</code></p>
<p class="doxygen_var">Default value for gain (1.0)<br />
<code>const float <span class="method"><a href="#">DefaultGain</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Mutex.<br />
<code>Mutex <span class="method"><a href="#">pMutex</a></span>;</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
