<title>Emitter</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2><code>Emitter</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Shortest constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Emitter</a></span>:  (bool loop);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with 3D position.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Emitter</a></span>:  (const Point3D &lt;&gt;&amp; position, bool loop);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with position, velocity and direction.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Emitter</a></span>:  (const Point3D &lt;&gt;&amp; position, const Vector3D &lt;&gt;&amp; velocity, const Vector3D &lt;&gt;&amp; direction, bool loop);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>Emitter</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Methods <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Attach a buffer to the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">attachBufferDispatched</a></span>: bool (Sound::Ptr&amp; buffer);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Prepare the emitter for playing.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">prepareDispatched</a></span>: bool ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Play the sound.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">playSoundDispatched</a></span>: bool ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Play the sound.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">playSoundDispatched</a></span>: bool (Sound::Ptr&amp; buffer);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Update buffers if necessary.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">updateDispatched</a></span>: bool ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Accessors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the 3D position of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">position</a></span>: void (const Point3D &lt;&gt;&amp; position);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the 3D position of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">position</a></span>: Point3D () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the velocity of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">velocity</a></span>: void (const Vector3D &lt;&gt;&amp; position);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the velocity of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">velocity</a></span>: Vector3D () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the direction of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">direction</a></span>: void (const Vector3D &lt;&gt;&amp; position);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the direction of the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">direction</a></span>: Vector3D () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the volume modifier on the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">gain</a></span>: void (float newGain);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the current volume modifier.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">gain</a></span>: float () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the elapsed playback time (in seconds)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">elapsedTime</a></span>: sint64 () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the identifier for the emitter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">id</a></span>: unsigned int () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">Default value for attenuation (enabled) Default value for looping (false)<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The most suitable smart pointer for the class.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Emitter&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Threading Policy .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> Policy::ObjectLevelLockable&lt;Emitter&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Map.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Map</a></span>: <span class="keyword">typedef</span> std::map&lt; String, Ptr&gt;;</code>
</td></tr>
<tr><td></td><td class="doxnone">Get if this policy is thread-safe.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Default value for pitch (1.0)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">DefaultPitch</a></span>: const float;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Default value for gain (1.0)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">DefaultGain</a></span>: const float;</code>
</td></tr>
</table>


