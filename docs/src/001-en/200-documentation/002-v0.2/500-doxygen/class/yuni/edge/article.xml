<title>Edge</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>An edge is a segment between two vertices</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Edge_1a3be35a1a11ea6ee0710d44c720dac3c4" href="#">Ptr</a></span> : SmartPtr&lt;Edge&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Edge_1a0b2434d740424e4d621f9c86aa9cea6e" href="#">Vector</a></span> : std::vector&lt; SmartPtr&lt;Edge&gt;&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Edge_1a5c5bc839215404193d8d9bfc2e3bbb3a" href="#">List</a></span> : std::list&lt; SmartPtr&lt;Edge&gt;&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors and destructors</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1abfa9fb95520c102866259287d4de7204">Edge</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1acd96e5a71c395087ef6a99f461d3fc92">Edge</a></span>(const Vertex&amp; v1, const Vertex&amp; v2)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1a04511fbded144ebaa0a60b96312a6308"><b> ~ </b>Edge</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>const Vertex&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1aeacddd3023c2728ac6f0e720c1e3d0f4">vertex1</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>const Vertex&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1a3cae19da6976a76b7a48493febf97629">vertex2</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1ad09a04c82650f0040ac56f965dd06de4">operator==</a></span>(const Edge&amp; other) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Edge_1a9016dcc0ac37365b34ecb8b85f7f4636">operator!=</a></span>(const Edge&amp; other) <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Edge_1a3be35a1a11ea6ee0710d44c720dac3c4" href="#">+ Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Edge&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Vector of Edges.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Edge_1a0b2434d740424e4d621f9c86aa9cea6e" href="#">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; SmartPtr&lt;Edge&gt;&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>List of Edges.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Edge_1a5c5bc839215404193d8d9bfc2e3bbb3a" href="#">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; SmartPtr&lt;Edge&gt;&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors and destructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1Edge_1abfa9fb95520c102866259287d4de7204" href="#">+ Edge</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1Edge_1acd96e5a71c395087ef6a99f461d3fc92" href="#">+ Edge</a></span>:  (const Vertex&amp; v1, const Vertex&amp; v2);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1Edge_1a04511fbded144ebaa0a60b96312a6308" href="#">+ <b> ~ </b>Edge</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Access to the vertices composing the edge.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Edge_1aeacddd3023c2728ac6f0e720c1e3d0f4" href="#">+ vertex1</a></span>: const Vertex&amp; () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1Edge_1a3cae19da6976a76b7a48493febf97629" href="#">+ vertex2</a></span>: const Vertex&amp; () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Comparison operator (equal with)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Edge_1ad09a04c82650f0040ac56f965dd06de4" href="#">+ operator==</a></span>: bool (const Edge&amp; other) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> other</code> The other edge to compare with<br /></li></ul><div><code>return</code>  True if the two edges share the same points<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Comparison operator (non equal with)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Edge_1a9016dcc0ac37365b34ecb8b85f7f4636" href="#">+ operator!=</a></span>: bool (const Edge&amp; other) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> other</code> The other edge to compare with<br /></li></ul><div><code>return</code>  True if the two edges do not share the same points<br /></div><br />
</div>
</td></tr>
</table>


