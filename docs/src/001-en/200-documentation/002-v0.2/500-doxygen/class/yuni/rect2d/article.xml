<title>Rect2D</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>Rect2D</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Rect2D</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Construct the rectangle to cover two 2D-points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Rect2D</a></span>:  (const Point2D &lt; U &gt;<b>&amp;</b> a, const Point2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with given coordinates.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Rect2D</a></span>:  (const U ax1, const V ay1, const W ax2, const X ay2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Construct the rectangle to cover two other rectangles.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Rect2D</a></span>:  (const Rect2D &lt; U &gt;<b>&amp;</b> a, const Rect2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Reset values <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset all coordinates to zero.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reset</a></span>: Rect2D &lt; T &gt; &amp; ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the rectangle coordinates to cover two 2D-points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reset</a></span>: Rect2D &lt; T &gt; &amp; (const Point2D &lt; U &gt;<b>&amp;</b> a, const Point2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the rectangle coordinates to cover two 2D-points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reset</a></span>: Rect2D &lt; T &gt; &amp; (const U a, const V b, const W c, const X d);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the rectangle coordinates to cover two other rectangles.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reset</a></span>: Rect2D &lt; T &gt; &amp; (const Rect2D &lt; U &gt;<b>&amp;</b> a, const Rect2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Measurement <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the surface occupied by the rectangle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: T () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the width of the rectangle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">width</a></span>: T () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the height of the rectangle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">height</a></span>: T () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Move the entire rect <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the entire rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">move</a></span>: void (const U ax1, const U ay1);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the entire rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">move</a></span>: void (const Point2D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the entire rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const U<b>&amp;</b> ax1, const V<b>&amp;</b> ay1);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the entire rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const Point2D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the rectangle coordinates to cover two 2D-points.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const Point2D &lt; U &gt;<b>&amp;</b> a, const Point2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the rectangle coordinates to cover two other rectangles.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator()</a></span>: void (const Rect2D &lt; U &gt;<b>&amp;</b> a, const Rect2D &lt; V &gt;<b>&amp;</b> b);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Geometrical localisation <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a point is contained inside the rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (const Point2D &lt; U &gt;<b>&amp;</b> p) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a point is contained inside the rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (const U nx, const V ny) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if another rectangle is contained inside this rectangle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (const Rect2D &lt; U &gt;<b>&amp;</b> r) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if another rectangle collides with this rectangle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">collidedWith</a></span>: bool (const Rect2D &lt; U &gt;<b>&amp;</b> r) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Assignment <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the entire rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Rect2D &lt; T &gt; &amp; (const Point2D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign new values for all coordinates from another rect.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Rect2D &lt; T &gt; &amp; (const Rect2D &lt; U &gt;<b>&amp;</b> p);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Stream printing <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Print the point.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">print</a></span>: std::ostream &amp; (std::ostream<b>&amp;</b> out) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The original type T.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Type</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The original type T.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">value_type</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Complete type for Rect2D .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Rect2DType</a></span>: <span class="keyword">typedef</span> Rect2D &lt; Type &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Point2D .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">PointType</a></span>: <span class="keyword">typedef</span> Point2D &lt; Type &gt;;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">The top left X-coordinate.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">x1</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">The top left Y-coordinate.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">y1</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">The bottom right X-coordinate.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">x2</a></span>: T;</code>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">The bottom right Y-coordinate.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">y2</a></span>: T;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the equivalent Point2D for the top left.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">topLeft</a></span>: PointType () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the equivalent Point2D for the bottom right.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">bottomRight</a></span>: PointType () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Swap coordinates if needed to have x1/y1 at the top-left and x2/y2 at the bottom-right.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">normalize</a></span>: void ();</code>
</td></tr>
</table>


