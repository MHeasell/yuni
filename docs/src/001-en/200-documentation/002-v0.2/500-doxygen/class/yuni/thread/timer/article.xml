<title>Timer</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A thread that executes a method every X milliseconds.<br /></h2>
<div><source type="cpp">  using  namespace  Yuni;

  class  MyTimer  :  public  Thread:: Timer
  {
  public :
      Timer ()  {}
      virtual  ~Timer ()  { stop ();}  //  Absolutely  needed

  protected :
      virtual  bool  onInterval ();
  };

  bool  Timer::onInterval ( unsigned  int  cycle)
  {
     std::cout  &lt;&lt;  cycle  &lt;&lt;  std::endl;
     return  true ;
  }

  int  main( void )
  {
      MyTimer  timer;
      timer.cycleCount(5);
      timer.interval(1000);  //  1  seconds

      //  Run  the  timer
      timer.start();

      //  Waiting  for  max.  10  seconds
      timer.stop(10000);
      return  0;
  }
</source>
<br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Execution flow <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Start the execution of the thread, if not already started.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('start_9431319583276')">+ start</a></span>: Error ();
</code>
</div></td></tr><tr id="start_9431319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">If already started, the thread will be woke up<div><code>return</code>  True if the thread has been started<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Stop the execution of the thread and wait for it, if not already stopped.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('stop_9441319583276')">+ stop</a></span>: Error (unsigned int timeout);
</code>
</div></td></tr><tr id="stop_9441319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> timeout</code> The timeout in milliseconds before killing the thread (default: 5000ms)<br /></li></ul><div><code>return</code>  An error status (`errNone` if succeeded)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Wait for an infinite amount of time for the end of the thread.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('wait_9451319583276')">+ wait</a></span>: Error ();
</code>
</div></td></tr><tr id="wait_9451319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The thread is not stopped during the process.<div><code>return</code>  An error status (`errNone` if succeeded)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Wait for the end of the thread.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('wait_9461319583276')">+ wait</a></span>: Error (unsigned int timeout);
</code>
</div></td></tr><tr id="wait_9461319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The thread is not stopped during the process.<br />Parameters :<ul><li><code> timeout</code> The timeout in milliseconds<br /></li></ul><div><code>return</code>  An error status (`errNone` if succeeded)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Restart the thread.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('restart_9471319583276')">+ restart</a></span>: Error (unsigned int timeout);
</code>
</div></td></tr><tr id="restart_9471319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> timeout</code> The timeout in milliseconds before killing the thread (default: 5000ms)<br /></li></ul><div><code>return</code>  True if the thread has been stopped then started<br /></div><div><code>see</code> :  stop()<br /> start()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Ask to Stop the execution of the thread as soon as possible.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('gracefulStop_9481319583276')">+ gracefulStop</a></span>: void ();
</code>
</div></td></tr><tr id="gracefulStop_9481319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">After a call to this method, the method suspend() will return true, which indicates that the thread should stop.<div><code>see</code> :  suspend()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the thread is currently running.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('started_9491319583276')">+ started</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="started_9491319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the thread is running<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Interrupt the thread if suspended.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('wakeUp_9501319583276')">+ wakeUp</a></span>: void ();
</code>
</div></td></tr><tr id="wakeUp_9501319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">A call to this methid will interrupt a suspended state. This method has no effect if the thread is not started.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the thread is currently stopped.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator!_9511319583276')">+ operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!_9511319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('Timer_9521319583276')">+ Timer</a></span>:  ();
</code>
</div></td></tr><tr id="Timer_9521319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">By default, the constant `defaultInterval` will be used for the time interval with an infinite number of cycles.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with a time interval.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('Timer_9531319583276')">+ Timer</a></span>:  (const unsigned int interval);
</code>
</div></td></tr><tr id="Timer_9531319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">An infinite number of cycles will be used by default.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with a time interval + cycle count.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('Timer_9541319583276')">+ Timer</a></span>:  (const unsigned int interval, const unsigned int cycles);
</code>
</div></td></tr><tr id="Timer_9541319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> interval</code> The new time interval (in milliseconds)<br /></li><li><code> cycles</code> The number of cycles [0 .. n[<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('Timer_9551319583276')">+ Timer</a></span>:  (const Timer&amp; rhs);
</code>
</div></td></tr><tr id="Timer_9551319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The given timer will be locked to copy its settings.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('~Timer_9561319583276')">+ <b> ~ </b>Timer</a></span>:  ();
</code>
</div></td></tr><tr id="~Timer_9561319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Settings (Time interval &amp; Cycles) <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Reload the settings.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('reload_9571319583276')">+ reload</a></span>: void ();
</code>
</div></td></tr><tr id="reload_9571319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The timer will reload its settings (time interval and number of cycles) if it is already started. It has not effect otherwise. Prefer to use this method instead of restarting the timer.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Modify then Reload the settings.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('reload_9581319583276')">+ reload</a></span>: void (unsigned int interval);
</code>
</div></td></tr><tr id="reload_9581319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Modify the settings (time interval only) with a single lock and ask to reload them if the timer is started. This method is a convenient and faster replacement for the following code: (assuming we want one second for the time interval)<source type="cpp">  timer.interval(1000);  //  1  second
  timer.reload();
</source>
<br /><br />Parameters :<ul><li><code> interval</code> The new time interval (in milliseconds)<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Modify then Reload the settings.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('reload_9591319583276')">+ reload</a></span>: void (unsigned int interval, unsigned int cycles);
</code>
</div></td></tr><tr id="reload_9591319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Modify the settings (time interval and number of cycles) with a single lock and ask to reload them if the timer is started. This method is a convenient and faster replacement for the following code: (assuming we want one second for the time interval and three cycles)<source type="cpp">  timer.interval(1000);  //  1  second
  timer.cycleCount(3);
  timer.reload();
</source>
<br /><br />Parameters :<ul><li><code> interval</code> The new time interval (in milliseconds)<br /></li><li><code> cycles</code> The number of cycles [0 .. n[<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the time interval (in milliseconds)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('interval_9601319583276')">+ interval</a></span>: unsigned int () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="interval_9601319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Set the time interval (in `ms`)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('interval_9611319583276')">+ interval</a></span>: void (const unsigned int t);
</code>
</div></td></tr><tr id="interval_9611319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Use `reload()` to apply the changes if the timer is already started.<br />Parameters :<ul><li><code> t</code> The new time interval (in milliseconds)<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the number of cycle to run.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('cycleCount_9621319583276')">+ cycleCount</a></span>: unsigned int () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="cycleCount_9621319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  Timer::infinite<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Set the number of cycle to run.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('cycleCount_9631319583276')">+ cycleCount</a></span>: void (const unsigned int n);
</code>
</div></td></tr><tr id="cycleCount_9631319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Use `reload()` to apply the changes if the timer is already started.<br />Parameters :<ul><li><code> n</code> The number of cycles [0 .. n[<br /></li></ul><div><code>see</code> :  Timer::infinite<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">The assignment operator (=)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator=_9641319583276')">+ operator=</a></span>: Timer&amp; (const Timer&amp; rhs);
</code>
</div></td></tr><tr id="operator=_9641319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Both the given timer and this object will be locked to copy the settings. Use `reload()` to apply the changes if the timer is already started.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief"><code><i>(unmanaged tag: 6)</i></code>
</div></td></tr><tr id="@372infinitedefaultInterval_9651319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('ThreadingPolicy_9661319583276')">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> IThread::ThreadingPolicy;</code>
</div></td></tr><tr id="ThreadingPolicy_9661319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The most suitable smart pointer for the class.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('Ptr_9671319583276')">+ Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;IThread&gt;;</code>
</div></td></tr><tr id="Ptr_9671319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_enum"></td><td class="doxnone"><div class="doxygen_brief">Get if this policy is thread-safe.<br /><div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 6)</i></code>
</div></td></tr><tr id="@369_9681319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
</table>


