<title>Timer</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>Timer</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Execution flow <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Start the execution of the thread, if not already started.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">start</a></span>: Error ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Stop the execution of the thread and wait for it, if not already stopped.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">stop</a></span>: Error (unsigned int timeout);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Wait for an infinite amount of time for the end of the thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">wait</a></span>: Error ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Wait for the end of the thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">wait</a></span>: Error (unsigned int timeout);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Restart the thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">restart</a></span>: Error (unsigned int timeout);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Ask to Stop the execution of the thread as soon as possible.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">gracefulStop</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the thread is currently running.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">started</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Interrupt the thread if suspended.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">wakeUp</a></span>: void ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the thread is currently stopped.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Timer</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with a time interval.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Timer</a></span>:  (const unsigned int interval);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with a time interval + cycle count.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Timer</a></span>:  (const unsigned int interval, const unsigned int cycles);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Timer</a></span>:  (const Timer<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>Timer</a></span>:  ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Settings (Time interval &amp; Cycles) <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reload the settings.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reload</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Modify then Reload the settings.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reload</a></span>: void (unsigned int interval);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Modify then Reload the settings.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reload</a></span>: void (unsigned int interval, unsigned int cycles);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the time interval (in milliseconds)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">interval</a></span>: unsigned int () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the time interval (in `ms`)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">interval</a></span>: void (const unsigned int t);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of cycle to run.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">cycleCount</a></span>: unsigned int () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set the number of cycle to run.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">cycleCount</a></span>: void (const unsigned int n);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The assignment operator (=)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Timer &amp; (const Timer<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">Special value to use for an infinite loop. The default time interval (in milliseconds)<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Threading policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> IThread::ThreadingPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The most suitable smart pointer for the class.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr &lt; IThread &gt;;</code>
</td></tr>
<tr><td></td><td class="doxnone">Get if this policy is thread-safe.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected
 <code class="doxygen_visibility">Protected
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : The timer has just been started.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onStarting</a></span>: bool ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : Execute a new cycle.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onInterval</a></span>: bool (unsigned int cycle);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : The timer has been stopped.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onStopped</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Suspend the execution of the thread of X miliseconds.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">suspend</a></span>: bool (const unsigned int delay);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the thread should abort as soon as possible.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">shouldAbort</a></span>: bool ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : The thread has finished its job and is waiting for being re-executed.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onPause</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : The thread has been gracefully stopped.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onStop</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Event : The thread has been killed.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">onKill</a></span>: void ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected
 <code class="doxygen_visibility">Protected
</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Mutex.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">pMutex</a></span>: Mutex;</code>
</td></tr>
</table>


