<title>TreeN</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A generic N-ary tree class</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Iterators</h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">iterator</a></span> : IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_iterator</a></span> : IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">depth_prefix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_depth_prefix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">depth_infix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_depth_infix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Node</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">TreeNNode</a></span> : TreeN&lt;T, TP, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ThreadingPolicy</a></span> : TP&lt; TreeNNode&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">PtrThreadSafe</a></span> : SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">PtrSingleThreaded</a></span> : SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Ptr</a></span> : Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">StoragePolicy</a></span> : Ptr::StoragePolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">OwnershipPolicy</a></span> : Ptr::OwnershipPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConversionPolicy</a></span> : Ptr::ConversionPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">CheckingPolicy</a></span> : Ptr::CheckingPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstnessPolicy</a></span> : Ptr::ConstnessPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstPtr</a></span> : Ptr::ConstSmartPtrType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">NonConstPtr</a></span> : Ptr::NonConstSmartPtrType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">SizeType</a></span> : unsigned int</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">SignedSizeType</a></span> : int</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Vector</a></span> : std::vector&lt; Ptr&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">List</a></span> : std::list&lt; Ptr&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">TreeN</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>TreeN</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Parent of the node</h4></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">parent</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">parent</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">parent</a></span>(Ptr newParent)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">detachFromParent</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Adding</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">append</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">append</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(T* node)</code></td></tr>
<tr><td></td><td><br /><h4>Removing</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">clear</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td></td><td><br /><h4>Searching</h4></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">begin</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">begin</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">end</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">end</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">empty</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">count</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">size</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">firstChild</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">firstChild</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">lastChild</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">lastChild</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">previousSibling</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">previousSibling</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">nextSibling</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">nextSibling</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Extra</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">leaf</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">depth</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">treeHeight</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Comparisons</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">equals</a></span>(const Ptr&amp; node) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Z-Order</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">bringToFront</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">sendToBack</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">invalidate</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">isInvalidated</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-=</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&lt;&lt;</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&lt;&lt;</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator==</a></span>(const Ptr&amp; node) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator[]</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator[]</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td></td><td><br /><h4>Pointer management</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">addRef</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">release</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>std::ostream&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">print</a></span>(std::ostream&amp; out, bool recursive, unsigned int level)</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>This class provides a generic and thread-safe implementation for N-ary trees. It behaves like an STL container class.<br /><source type="cpp">  class  MyNode  :  public  Core:: TreeN &lt;MyNode,  Policy::SingleThreaded&gt;
  {
  public :
         MyNode()
             :pValue()
         {}

         explicit  MyNode( const  String &amp;  v)
             :pValue(v)
         {}

         virtual  ~MyNode()  {}

         String  value()
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }

         void  value( const  String &amp;  s)
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  s;
         }

  private :
         //!  Put  here  variables  for  each  node
         String  pValue;
  };

  int  main( void )
  {
         MyNode::Ptr  root( new  MyNode( "Here  is  a  root  node" ));
         MyNode*  n  =  new  MyNode( "SubNode  1" );

         //  Adding  `n`  as  a  child  for  the  root  node
         *root  +=  n;

         //  A  few  children  for  the  node  `n`
         //  The  operator  `+=`  and  `&lt;&lt;`  are  equivalent
         n  &lt;&lt;  new  MyNode( "SubSubNode  1" )  &lt;&lt;  new  MyNode( "SubSubNode  2" )
             &lt;&lt;  new  MyNode( "SubSubNode  3" );

         return  0;
  }
</source>
<br /> Example of a pseudo XML tree :<source type="cpp">  class  MyXMLNode  :  public  Yuni::Core:: TreeN &lt;MyXMLNode&gt;
  {
  public :
         MyXMLNode()  :pValue()  {}
         virtual  MyXMLNode()  {}

         Yuni::String  value()
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }
         void  value( const  Yuni::String &amp;  v)
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  v;
         }

  protected :
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;node&gt;&lt;![CDATA["  &lt;&lt;  pValue  &lt;&lt;  "]]&gt;" ;
         }
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;/node&gt;" ;
         }

  private :
         Yuni::String  pValue;

  };

  int  main( void )
  {
         MyXMLNode::Ptr  root( new  MyXMLNode( "root  node" ));
         MyXMLNode*  sub  =  new  MyXMLNode( "Sub  Node  1" );
         //  Adding  sub  nodes
         *root  &lt;&lt;  sub  &lt;&lt;  new  MyXMLNode( "Sub  Node  2" );
         //  Adding  sub-sub  nodes
         *sub  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  1" )  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  2" );

         //  print
         root-&gt;print(std::cout)  &lt;&lt;  std::endl;

         return  0;
  }
</source>
<br /><div><b>note</b> :  Contrary to an STL-like container class, this class is not designed to be instantiated directly, but to be used as a base class.<br /> Each node is managed by a smart pointer, and assuming the `SingleThreaded` policy is not used, it is safe to manipulate a node from everywhere.<br /> When manipulating nodes, always prefer to use the `Ptr` typedef.<br /> Any checking policy might be used (passed to the smart pointer). However, we want to be able to have NULL pointers.<br /> This implementation will be more efficient when handling large datasets, and in a multithreaded context.<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> T</code> The real type of the tree class (CRTP)<br /></li><li><code> TP</code> The Threading policy<br /></li><li><code> ChckP</code> The Checking policy<br /></li><li><code> ConvP</code> The Conversion policy<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr id="iterator_7031319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ const_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr id="const_iterator_7451319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr id="depth_prefix_iterator_7461319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ const_depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr id="const_depth_prefix_iterator_7471319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr id="depth_infix_iterator_7481319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ const_depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr id="const_depth_infix_iterator_7491319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The real type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="Type_7501319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Node</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="Node_7511319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The template class tree node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ TreeNNode</a></span>: <span class="keyword">typedef</span> TreeN&lt;T, TP, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr id="TreeNNode_7521319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> TP&lt; TreeNNode&gt;;
</code>
</div></td></tr><tr id="ThreadingPolicy_7531319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A thread-safe node type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ PtrThreadSafe</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr id="PtrThreadSafe_7541319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A default node type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ PtrSingleThreaded</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr id="PtrSingleThreaded_7551319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Pointer to a node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Ptr</a></span>: <span class="keyword">typedef</span> Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType;
</code>
</div></td></tr><tr id="Ptr_7561319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Storage policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ StoragePolicy</a></span>: <span class="keyword">typedef</span> Ptr::StoragePolicy;
</code>
</div></td></tr><tr id="StoragePolicy_7571319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Ownership policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ OwnershipPolicy</a></span>: <span class="keyword">typedef</span> Ptr::OwnershipPolicy;
</code>
</div></td></tr><tr id="OwnershipPolicy_7581319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Conversion policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConversionPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConversionPolicy;
</code>
</div></td></tr><tr id="ConversionPolicy_7591319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Checking policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ CheckingPolicy</a></span>: <span class="keyword">typedef</span> Ptr::CheckingPolicy;
</code>
</div></td></tr><tr id="CheckingPolicy_7601319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Constness policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstnessPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConstnessPolicy;
</code>
</div></td></tr><tr id="ConstnessPolicy_7611319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::ConstSmartPtrType;
</code>
</div></td></tr><tr id="ConstPtr_7621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A non-const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ NonConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::NonConstSmartPtrType;
</code>
</div></td></tr><tr id="NonConstPtr_7631319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ SizeType</a></span>: <span class="keyword">typedef</span> unsigned int;
</code>
</div></td></tr><tr id="SizeType_7641319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size (signed)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ SignedSizeType</a></span>: <span class="keyword">typedef</span> int;
</code>
</div></td></tr><tr id="SignedSizeType_7651319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A vector of nodes (std::vector)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; Ptr&gt;;
</code>
</div></td></tr><tr id="Vector_7661319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A list of nodes (std::list)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; Ptr&gt;;
</code>
</div></td></tr><tr id="List_7671319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ TreeN</a></span>:  ();
</code>
</div></td></tr><tr id="TreeN_7681319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>TreeN</a></span>:  ();
</code>
</div></td></tr><tr id="~TreeN_7691319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Parent of the node <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the parent of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ parent</a></span>: Ptr ();
</code>
</div></td></tr><tr id="parent_7701319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the parent of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ parent</a></span>: Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="parent_7711319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">ReAttach to another parent.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ parent</a></span>: void (Ptr newParent);
</code>
</div></td></tr><tr id="parent_7721319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Detach the node from its parent.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ detachFromParent</a></span>: void ();
</code>
</div></td></tr><tr id="detachFromParent_7731319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Adding <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ append</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="append_7741319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ append</a></span>: void (T* node);
</code>
</div></td></tr><tr id="append_7751319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_back</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="push_back_7761319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_back</a></span>: void (T* node);
</code>
</div></td></tr><tr id="push_back_7771319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node at the begining.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_front</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="push_front_7781319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_front</a></span>: void (T* node);
</code>
</div></td></tr><tr id="push_front_7791319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Removing <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ clear</a></span>: void ();
</code>
</div></td></tr><tr id="clear_7801319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove a child node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ remove</a></span>: bool (Ptr&amp; node);
</code>
</div></td></tr><tr id="remove_7811319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ remove</a></span>: bool (const SizeType index);
</code>
</div></td></tr><tr id="remove_7821319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ remove</a></span>: bool (const SignedSizeType index);
</code>
</div></td></tr><tr id="remove_7831319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Searching <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ begin</a></span>: iterator ();
</code>
</div></td></tr><tr id="begin_7841319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ begin</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="begin_7851319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the last child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ end</a></span>: iterator ();
</code>
</div></td></tr><tr id="end_7861319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ end</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="end_7871319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Find the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ find</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr id="find_7881319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  A pointer to a Ptr, NULL of not found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ find</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr id="find_7891319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the node has children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="empty_7901319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ count</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="count_7911319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Alias for count()<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ size</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="size_7921319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first child.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ firstChild</a></span>: Ptr ();
</code>
</div></td></tr><tr id="firstChild_7931319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ firstChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="firstChild_7941319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the last child.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ lastChild</a></span>: Ptr ();
</code>
</div></td></tr><tr id="lastChild_7951319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ lastChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="lastChild_7961319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the previous sibling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ previousSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr id="previousSibling_7971319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ previousSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="previousSibling_7981319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the next sibling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ nextSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr id="nextSibling_7991319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ nextSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="nextSibling_8001319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Extra <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the node is a leaf.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ leaf</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="leaf_8011319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">A leaf is merely a node without any children<div><code>return</code>  True if this node is a leaf, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Computes the depth of this node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ depth</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="depth_8021319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The depth of a node n is the length of the path from the root to the node. The set of all nodes at a given depth is sometimes called a level of the tree. The root node is at depth zero.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Computes the height from this node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ treeHeight</a></span>: SizeType ();
</code>
</div></td></tr><tr id="treeHeight_8031319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The height of a tree is the length of the path from the root to the deepest node in the tree. A (rooted) tree with only a node (the root) has a height of zero.<br /><div><code>return</code>  The height of the tree<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Test if the current node is equals to another one.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ equals</a></span>: bool (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="equals_8041319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the two nodes are equal, false otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Z-Order <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Move the node to the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ bringToFront</a></span>: void ();
</code>
</div></td></tr><tr id="bringToFront_8051319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer. When iterating over all children, the last one can be considered as the last drawn thus the first visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Move the node to the begining.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ sendToBack</a></span>: void ();
</code>
</div></td></tr><tr id="sendToBack_8061319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer When iterating over all children, the first one can be considered as the first drawn thus the last visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Schedule an asynchronous update of the item (depending upon the implementation)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ invalidate</a></span>: void ();
</code>
</div></td></tr><tr id="invalidate_8071319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the item is invalidated (depending upon the implementation)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ isInvalidated</a></span>: bool ();
</code>
</div></td></tr><tr id="isInvalidated_8081319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator+=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator+=_8091319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator+=</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr id="operator+=_8101319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove a child node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator-=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator_=_8111319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator&lt;&lt;</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator<<_8121319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator&lt;&lt;</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr id="operator<<_8131319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Comparison with another node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator==</a></span>: Node&amp; (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator==_8141319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator[]</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr id="operator[]_8151319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator[]</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr id="operator[]_8161319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Pointer management <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Increment the internal reference counter.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ addRef</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="addRef_8171319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Decrement the internal reference counter.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ release</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="release_8181319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Print the entire tree to the output stream.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ print</a></span>: std::ostream&amp; (std::ostream&amp; out, bool recursive, unsigned int level);
</code>
</div></td></tr><tr id="print_8191319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Should only be used for debugging purposes only<br />
</div>
</td></tr>
</table>


