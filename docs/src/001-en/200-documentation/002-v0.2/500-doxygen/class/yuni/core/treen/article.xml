<title>TreeN</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A generic N-ary tree class.<br /></h2>
<div>This class provides a generic and thread-safe implementation for N-ary trees. It behaves like an STL container class.<br /><source type="cpp">  class  MyNode  :  public  Core:: TreeN &lt;MyNode,  Policy::SingleThreaded&gt;
  {
  public :
         MyNode()
             :pValue()
         {}

         explicit  MyNode( const  String &amp;  v)
             :pValue(v)
         {}

         virtual  ~MyNode()  {}

         String  value()
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }

         void  value( const  String &amp;  s)
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  s;
         }

  private :
         //!  Put  here  variables  for  each  node
         String  pValue;
  };

  int  main( void )
  {
         MyNode::Ptr  root( new  MyNode( "Here  is  a  root  node" ));
         MyNode*  n  =  new  MyNode( "SubNode  1" );

         //  Adding  `n`  as  a  child  for  the  root  node
         *root  +=  n;

         //  A  few  children  for  the  node  `n`
         //  The  operator  `+=`  and  `&lt;&lt;`  are  equivalent
         n  &lt;&lt;  new  MyNode( "SubSubNode  1" )  &lt;&lt;  new  MyNode( "SubSubNode  2" )
             &lt;&lt;  new  MyNode( "SubSubNode  3" );

         return  0;
  }
</source>
<br /> Example of a pseudo XML tree :<source type="cpp">  class  MyXMLNode  :  public  Yuni::Core:: TreeN &lt;MyXMLNode&gt;
  {
  public :
         MyXMLNode()  :pValue()  {}
         virtual  MyXMLNode()  {}

         Yuni::String  value()
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }
         void  value( const  Yuni::String &amp;  v)
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  v;
         }

  protected :
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;node&gt;&lt;![CDATA["  &lt;&lt;  pValue  &lt;&lt;  "]]&gt;" ;
         }
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;/node&gt;" ;
         }

  private :
         Yuni::String  pValue;

  };

  int  main( void )
  {
         MyXMLNode::Ptr  root( new  MyXMLNode( "root  node" ));
         MyXMLNode*  sub  =  new  MyXMLNode( "Sub  Node  1" );
         //  Adding  sub  nodes
         *root  &lt;&lt;  sub  &lt;&lt;  new  MyXMLNode( "Sub  Node  2" );
         //  Adding  sub-sub  nodes
         *sub  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  1" )  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  2" );

         //  print
         root-&gt;print(std::cout)  &lt;&lt;  std::endl;

         return  0;
  }
</source>
<br /><div><b>note</b> :  Contrary to an STL-like container class, this class is not designed to be instantiated directly, but to be used as a base class.<br /> Each node is managed by a smart pointer, and assuming the `SingleThreaded` policy is not used, it is safe to manipulate a node from everywhere.<br /> When manipulating nodes, always prefer to use the `Ptr` typedef.<br /> Any checking policy might be used (passed to the smart pointer). However, we want to be able to have NULL pointers.<br /> This implementation will be more efficient when handling large datasets, and in a multithreaded context.<br /></div><br />Parameters :<ul><li><code> T</code> The real type of the tree class (CRTP)<br /></li><li><code> TP</code> The Threading policy<br /></li><li><code> ChckP</code> The Checking policy<br /></li><li><code> ConvP</code> The Conversion policy<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('iterator_6981319583276')">+ iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, false&gt;;</code>
</div></td></tr><tr id="iterator_6981319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('const_iterator_7011319583276')">+ const_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, true&gt;;</code>
</div></td></tr><tr id="const_iterator_7011319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('depth_prefix_iterator_7031319583276')">+ depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, false&gt;;</code>
</div></td></tr><tr id="depth_prefix_iterator_7031319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('const_depth_prefix_iterator_7061319583276')">+ const_depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, true&gt;;</code>
</div></td></tr><tr id="const_depth_prefix_iterator_7061319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('depth_infix_iterator_7071319583276')">+ depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, false&gt;;</code>
</div></td></tr><tr id="depth_infix_iterator_7071319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="javascript:toggleVisibility('const_depth_infix_iterator_7091319583276')">+ const_depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, true&gt;;</code>
</div></td></tr><tr id="const_depth_infix_iterator_7091319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('TreeN_7151319583276')">+ TreeN</a></span>:  ();
</code>
</div></td></tr><tr id="TreeN_7151319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('~TreeN_7161319583276')">+ <b> ~ </b>TreeN</a></span>:  ();
</code>
</div></td></tr><tr id="~TreeN_7161319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Parent of the node <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the parent of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('parent_7181319583276')">+ parent</a></span>: Ptr ();
</code>
</div></td></tr><tr id="parent_7181319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the parent of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('parent_7191319583276')">+ parent</a></span>: Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="parent_7191319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">ReAttach to another parent.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('parent_7211319583276')">+ parent</a></span>: void (Ptr newParent);
</code>
</div></td></tr><tr id="parent_7211319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Detach the node from its parent.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('detachFromParent_7231319583276')">+ detachFromParent</a></span>: void ();
</code>
</div></td></tr><tr id="detachFromParent_7231319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Adding <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('append_7261319583276')">+ append</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="append_7261319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('append_7281319583276')">+ append</a></span>: void (T* node);
</code>
</div></td></tr><tr id="append_7281319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('push_back_7291319583276')">+ push_back</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="push_back_7291319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('push_back_7311319583276')">+ push_back</a></span>: void (T* node);
</code>
</div></td></tr><tr id="push_back_7311319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node at the begining.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('push_front_7331319583276')">+ push_front</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr id="push_front_7331319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child node to the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('push_front_7351319583276')">+ push_front</a></span>: void (T* node);
</code>
</div></td></tr><tr id="push_front_7351319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Parameters :<ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Removing <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('clear_7371319583276')">+ clear</a></span>: void ();
</code>
</div></td></tr><tr id="clear_7371319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove a child node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('remove_7391319583276')">+ remove</a></span>: bool (Ptr&amp; node);
</code>
</div></td></tr><tr id="remove_7391319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('remove_7411319583276')">+ remove</a></span>: bool (const SizeType index);
</code>
</div></td></tr><tr id="remove_7411319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><br />Parameters :<ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('remove_7421319583276')">+ remove</a></span>: bool (const SignedSizeType index);
</code>
</div></td></tr><tr id="remove_7421319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Searching <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('begin_7441319583276')">+ begin</a></span>: iterator ();
</code>
</div></td></tr><tr id="begin_7441319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('begin_7461319583276')">+ begin</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="begin_7461319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the last child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('end_7481319583276')">+ end</a></span>: iterator ();
</code>
</div></td></tr><tr id="end_7481319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('end_7491319583276')">+ end</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="end_7491319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Find the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('find_7511319583276')">+ find</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr id="find_7511319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><br />Parameters :<ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  A pointer to a Ptr, NULL of not found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('find_7531319583276')">+ find</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr id="find_7531319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the node has children.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('empty_7551319583276')">+ empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="empty_7551319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('count_7571319583276')">+ count</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="count_7571319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Alias for count()<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('size_7581319583276')">+ size</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="size_7581319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first child.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('firstChild_7601319583276')">+ firstChild</a></span>: Ptr ();
</code>
</div></td></tr><tr id="firstChild_7601319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('firstChild_7611319583276')">+ firstChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="firstChild_7611319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the last child.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('lastChild_7641319583276')">+ lastChild</a></span>: Ptr ();
</code>
</div></td></tr><tr id="lastChild_7641319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('lastChild_7651319583276')">+ lastChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="lastChild_7651319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the previous sibling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('previousSibling_7671319583276')">+ previousSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr id="previousSibling_7671319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('previousSibling_7691319583276')">+ previousSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="previousSibling_7691319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the next sibling.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('nextSibling_7711319583276')">+ nextSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr id="nextSibling_7711319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Return iterator to the first child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('nextSibling_7731319583276')">+ nextSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="nextSibling_7731319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Extra <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the node is a leaf.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('leaf_7751319583276')">+ leaf</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="leaf_7751319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">A leaf is merely a node without any children<div><code>return</code>  True if this node is a leaf, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Computes the depth of this node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('depth_7771319583276')">+ depth</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="depth_7771319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The depth of a node n is the length of the path from the root to the node. The set of all nodes at a given depth is sometimes called a level of the tree. The root node is at depth zero.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Computes the height from this node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('treeHeight_7791319583276')">+ treeHeight</a></span>: SizeType ();
</code>
</div></td></tr><tr id="treeHeight_7791319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The height of a tree is the length of the path from the root to the deepest node in the tree. A (rooted) tree with only a node (the root) has a height of zero.<br /><div><code>return</code>  The height of the tree<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Test if the current node is equals to another one.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('equals_7811319583276')">+ equals</a></span>: bool (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="equals_7811319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the two nodes are equal, false otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Z-Order <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Move the node to the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('bringToFront_7841319583276')">+ bringToFront</a></span>: void ();
</code>
</div></td></tr><tr id="bringToFront_7841319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer. When iterating over all children, the last one can be considered as the last drawn thus the first visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Move the node to the begining.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('sendToBack_7861319583276')">+ sendToBack</a></span>: void ();
</code>
</div></td></tr><tr id="sendToBack_7861319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer When iterating over all children, the first one can be considered as the first drawn thus the last visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Schedule an asynchronous update of the item (depending upon the implementation)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('invalidate_7881319583276')">+ invalidate</a></span>: void ();
</code>
</div></td></tr><tr id="invalidate_7881319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the item is invalidated (depending upon the implementation)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('isInvalidated_7901319583276')">+ isInvalidated</a></span>: bool ();
</code>
</div></td></tr><tr id="isInvalidated_7901319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator+=_7911319583276')">+ operator+=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator+=_7911319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator+=_7921319583276')">+ operator+=</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr id="operator+=_7921319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove a child node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator_=_7931319583276')">+ operator-=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator_=_7931319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator<<_7941319583276')">+ operator&lt;&lt;</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr id="operator<<_7941319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a child at the end.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator<<_7951319583276')">+ operator&lt;&lt;</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr id="operator<<_7951319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Comparison with another node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator==_7961319583276')">+ operator==</a></span>: Node&amp; (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator==_7961319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator[]_7971319583276')">+ operator[]</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr id="operator[]_7971319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the n-th child of the node.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('operator[]_7981319583276')">+ operator[]</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr id="operator[]_7981319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Pointer management <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Increment the internal reference counter.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('addRef_7991319583276')">+ addRef</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="addRef_7991319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Decrement the internal reference counter.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('release_8001319583276')">+ release</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="release_8001319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The real type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('Type_8011319583276')">+ Type</a></span>: <span class="keyword">typedef</span> T;</code>
</div></td></tr><tr id="Type_8011319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('Node_8021319583276')">+ Node</a></span>: <span class="keyword">typedef</span> T;</code>
</div></td></tr><tr id="Node_8021319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The template class tree node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('TreeNNode_8031319583276')">+ TreeNNode</a></span>: <span class="keyword">typedef</span> TreeN&lt;T, TP, ChckP, ConvP&gt;;</code>
</div></td></tr><tr id="TreeNNode_8031319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('ThreadingPolicy_8041319583276')">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> TP&lt; TreeNNode&gt;;</code>
</div></td></tr><tr id="ThreadingPolicy_8041319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A thread-safe node type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('PtrThreadSafe_8051319583276')">+ PtrThreadSafe</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;</code>
</div></td></tr><tr id="PtrThreadSafe_8051319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A default node type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('PtrSingleThreaded_8061319583276')">+ PtrSingleThreaded</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;</code>
</div></td></tr><tr id="PtrSingleThreaded_8061319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Pointer to a node.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('Ptr_8071319583276')">+ Ptr</a></span>: <span class="keyword">typedef</span> Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType;</code>
</div></td></tr><tr id="Ptr_8071319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Storage policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('StoragePolicy_8081319583276')">+ StoragePolicy</a></span>: <span class="keyword">typedef</span> Ptr::StoragePolicy;</code>
</div></td></tr><tr id="StoragePolicy_8081319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Ownership policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('OwnershipPolicy_8091319583276')">+ OwnershipPolicy</a></span>: <span class="keyword">typedef</span> Ptr::OwnershipPolicy;</code>
</div></td></tr><tr id="OwnershipPolicy_8091319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Conversion policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('ConversionPolicy_8101319583276')">+ ConversionPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConversionPolicy;</code>
</div></td></tr><tr id="ConversionPolicy_8101319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Checking policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('CheckingPolicy_8111319583276')">+ CheckingPolicy</a></span>: <span class="keyword">typedef</span> Ptr::CheckingPolicy;</code>
</div></td></tr><tr id="CheckingPolicy_8111319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Constness policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('ConstnessPolicy_8121319583276')">+ ConstnessPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConstnessPolicy;</code>
</div></td></tr><tr id="ConstnessPolicy_8121319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('ConstPtr_8131319583276')">+ ConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::ConstSmartPtrType;</code>
</div></td></tr><tr id="ConstPtr_8131319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A non-const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('NonConstPtr_8141319583276')">+ NonConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::NonConstSmartPtrType;</code>
</div></td></tr><tr id="NonConstPtr_8141319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('SizeType_8151319583276')">+ SizeType</a></span>: <span class="keyword">typedef</span> unsigned int;</code>
</div></td></tr><tr id="SizeType_8151319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size (signed)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('SignedSizeType_8161319583276')">+ SignedSizeType</a></span>: <span class="keyword">typedef</span> int;</code>
</div></td></tr><tr id="SignedSizeType_8161319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A vector of nodes (std::vector)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('Vector_8171319583276')">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; Ptr&gt;;</code>
</div></td></tr><tr id="Vector_8171319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A list of nodes (std::list)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="javascript:toggleVisibility('List_8181319583276')">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; Ptr&gt;;</code>
</div></td></tr><tr id="List_8181319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><i>no description</i>
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Print the entire tree to the output stream.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="javascript:toggleVisibility('print_8191319583276')">+ print</a></span>: std::ostream&amp; (std::ostream&amp; out, bool recursive, unsigned int level);
</code>
</div></td></tr><tr id="print_8191319583276_desc" style="display:none"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Should only be used for debugging purposes only<br />
</div>
</td></tr>
</table>


