<title>TreeN</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2><code>TreeN</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">TreeN</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>TreeN</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Parent of the node <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the parent of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">parent</a></span>: Ptr ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the parent of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">parent</a></span>: Ptr () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">ReAttach to another parent.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">parent</a></span>: void (Ptr newParent);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Detach the node from its parent.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">detachFromParent</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Adding <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node to the end of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node to the end of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (T* node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_back</a></span>: void (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node to the end of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_back</a></span>: void (T* node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node at the begining.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_front</a></span>: void (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child node to the end of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_front</a></span>: void (T* node);
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Removing <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all children.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">clear</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove a child node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">remove</a></span>: bool (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the n-th child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">remove</a></span>: bool (const SizeType index);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all children.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">remove</a></span>: bool (const SignedSizeType index);
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Searching <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: iterator ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the last child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: iterator ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the n-th child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Ptr (const SizeType index);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Ptr (const SignedSizeType index);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the node has children.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">count</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Alias for count()<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first child.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">firstChild</a></span>: Ptr ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">firstChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the last child.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">lastChild</a></span>: Ptr ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">lastChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the previous sibling.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">previousSibling</a></span>: Ptr ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">previousSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the next sibling.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">nextSibling</a></span>: Ptr ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Return iterator to the first child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">nextSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Extra <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the node is a leaf.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">leaf</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Computes the depth of this node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">depth</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Computes the height from this node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">treeHeight</a></span>: SizeType ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Test if the current node is equals to another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">equals</a></span>: bool (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Z-Order <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the node to the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">bringToFront</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Move the node to the begining.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">sendToBack</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Schedule an asynchronous update of the item (depending upon the implementation)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">invalidate</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the item is invalidated (depending upon the implementation)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">isInvalidated</a></span>: bool ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Node&amp; (T* node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove a child node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator-=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Node&amp; (Ptr&amp; node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a child at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Node&amp; (T* node);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Comparison with another node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: Node&amp; (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the n-th child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator[]</a></span>: Ptr (const SizeType index);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the n-th child of the node.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator[]</a></span>: Ptr (const SignedSizeType index);
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Pointer management <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Increment the internal reference counter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">addRef</a></span>: void () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decrement the internal reference counter.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">release</a></span>: void () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The real type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Type</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Node.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Node</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The template class tree node.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">TreeNNode</a></span>: <span class="keyword">typedef</span> TreeN&lt;T, TP, ChckP, ConvP&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The threading policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> TP&lt; TreeNNode&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A thread-safe node type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">PtrThreadSafe</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A default node type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">PtrSingleThreaded</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer to a node.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Storage policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">StoragePolicy</a></span>: <span class="keyword">typedef</span> Ptr::StoragePolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Ownership policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">OwnershipPolicy</a></span>: <span class="keyword">typedef</span> Ptr::OwnershipPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The conversion policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ConversionPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConversionPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The checking policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">CheckingPolicy</a></span>: <span class="keyword">typedef</span> Ptr::CheckingPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The Constness policy.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ConstnessPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConstnessPolicy;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A const Pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::ConstSmartPtrType;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A non-const pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">NonConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::NonConstSmartPtrType;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Size.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">SizeType</a></span>: <span class="keyword">typedef</span> unsigned int;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Size (signed)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">SignedSizeType</a></span>: <span class="keyword">typedef</span> int;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A vector of nodes (std::vector)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; Ptr&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A list of nodes (std::list)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">List</a></span>: <span class="keyword">typedef</span> std::list&lt; Ptr&gt;;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Print the entire tree to the output stream.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">print</a></span>: std::ostream&amp; (std::ostream&amp; out, bool recursive, unsigned int level);
</code>
</td></tr>
</table>


