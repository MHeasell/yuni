<title>TreeN</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A generic N-ary tree class</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Iterators</h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a403dfaf6658fe2d506228ceeb3e724d2" href="#">iterator</a></span> : IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1ab82efb7a58c32380cff1d2e7481b4e6a" href="#">const_iterator</a></span> : IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a082f56f1b8f4987f089e1d7f85a4855b" href="#">depth_prefix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a0f650ade642d7a95074759c38a9e0c99" href="#">const_depth_prefix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1abc2ffba1d54869fbfc6317b4b3cfd3f9" href="#">depth_infix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a1e96e7793a2d3031637d98328692df00" href="#">const_depth_infix_iterator</a></span> : IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, true&gt;</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1ae12304091f4f0cc466620ff6125d69c5" href="#">Type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1aea8192927626a4072ae1b6f565b401e0" href="#">Node</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a37a6c3ca1b814b63b4c1f1cc9d36b7d6" href="#">TreeNNode</a></span> : TreeN&lt;T, TP, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1ab7fd7e5fed24174049ec8b5243efe84b" href="#">ThreadingPolicy</a></span> : TP&lt; TreeNNode&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a8f8eb8d434ee328b0deb7f392c8b3b51" href="#">PtrThreadSafe</a></span> : SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a284bcdfff91f2aa7fe34870da9d3810a" href="#">PtrSingleThreaded</a></span> : SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1abcb5de881ae848635d2e54f440497589" href="#">Ptr</a></span> : Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a678bec7a32788162e4e64355c0f136dd" href="#">StoragePolicy</a></span> : Ptr::StoragePolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a01cc8031607b13fd04f032fac661aad7" href="#">OwnershipPolicy</a></span> : Ptr::OwnershipPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a7af0d849ff69e58ec2d0345edf8c63b6" href="#">ConversionPolicy</a></span> : Ptr::ConversionPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a35a7ccfaf9915708a494a5cdc94042f2" href="#">CheckingPolicy</a></span> : Ptr::CheckingPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a3bc0c41386a460cc55a625cbb2fde012" href="#">ConstnessPolicy</a></span> : Ptr::ConstnessPolicy</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a96f4e6121a1db73df72e4ea30f35c8ef" href="#">ConstPtr</a></span> : Ptr::ConstSmartPtrType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1ae7fb2858ab1cd48d87ee40f02b1a977d" href="#">NonConstPtr</a></span> : Ptr::NonConstSmartPtrType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a87052b8ea2f3bd7c6ee6dc8f3cc4a67f" href="#">SizeType</a></span> : unsigned int</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1af06ec8027614cca44336fc417c827312" href="#">SignedSizeType</a></span> : int</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a04fad7bf73d87bc5e48d1aca141ae69f" href="#">Vector</a></span> : std::vector&lt; Ptr&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1Core_1_1TreeN_1a3a00dcbfaae5dcbca6cf616a1e02fe52" href="#">List</a></span> : std::list&lt; Ptr&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ad9612f38c50f7da69d292432140ee303">TreeN</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a4cbc4461e791168a1812792cee6fabd6"><b> ~ </b>TreeN</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Parent of the node</h4></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a18123083fac8ab8eeec4971fe4e298fb">parent</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1aa2800eab9fd054620f4aece28ded29bc">parent</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a7a86dd93f53cb11e29f18be4460db021">parent</a></span>(Ptr newParent)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a0fdb408ca811e8345a49af4016e1fc47">detachFromParent</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Adding</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a79ce7fe050488a38d0fdc26ab6dbacc5">append</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a45db971ff72faeb1dc182d4d839f6c2d">append</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a88d83847eccf6c51e41258139e07d458">push_back</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ad816bc06a701f3a3b3a4a96a1c90f747">push_back</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a0be9886e53f3e42781f9272262d1e0ce">push_front</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a7aeab7631d711350d760ba0da994efbb">push_front</a></span>(T* node)</code></td></tr>
<tr><td></td><td><br /><h4>Removing</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a37a677ada63d19ffffb62b971c5c90e7">clear</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a299fcfbd965e9ebf815f184d74870d67">remove</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a67ea479a13d03c927b610f093f3761ec">remove</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a1ee7504165ea1e69e0b85bc2c7202904">remove</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td></td><td><br /><h4>Searching</h4></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ae78946a9e2975da5fca477d5b1549e3c">begin</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a8ad7f0a4894bb51bf89c0342a2801f13">begin</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ad3ab3f325e47bb3150507e376b64c735">end</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a26d6211c8f7c10c5949c8a1377163b88">end</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ae0df6a815feb43c26d749e39f85d6999">find</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a0a0f95a23131e0c0e4ed6e0fd35e5fcd">find</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a5d40667ebd849ca3411419b958d61dd9">empty</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a1ff80f2c35ed9594aabfcc7ea648a963">count</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a61a0da55b06bcec39486e957075e4cec">size</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a65570fddb974824fe4ca08bfab628edb">firstChild</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a7636ee473dd97f1f3e93eaa4c135f708">firstChild</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1af5af76d27e265e0c1eae7ab71edd096c">lastChild</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1affc086f44c0c232c76e0dd8ecca0dac7">lastChild</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a3c4d4ebefe2ef3e5f665c5236e2464d4">previousSibling</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a99f982f6fd8bf787c7376ba1c00e66c5">previousSibling</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a8e20468403176038009d94718030fabf">nextSibling</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a8ed385ad2b23458f2cb762d266147ae9">nextSibling</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Extra</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ac6aefec9313f9197800bf7235981ce26">leaf</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a76bdda29b3b7a7bf2b2db82c7156173a">depth</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>SizeType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a9e43bdedd0685363ac4e769840872da3">treeHeight</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Comparisons</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a5838cc1f1b1e1994e0fafda454aa1cc0">equals</a></span>(const Ptr&amp; node) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Z-Order</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ae20c8c08231658bb69c46c3e33d5a1d7">bringToFront</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ab115fe3947d9c64ba427772c03dca1a4">sendToBack</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a991f3986ab5e04965d956a64b0e861ea">invalidate</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ae4c6857a59716a39f6ed8e8586c66258">isInvalidated</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a4006954dc3ff703967f9bf2c59d5a8a4">operator+=</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a5ad355f2c527253e2912fb43bad82318">operator+=</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a1af840acc8da0c6939c15ddc98017748">operator-=</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a43fdd111369fafe03b234a101eab3dfe">operator&lt;&lt;</a></span>(Ptr&amp; node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a2319914c212dcbd277f5674dde28fe8b">operator&lt;&lt;</a></span>(T* node)</code></td></tr>
<tr><td class="doxygen_index"><code>Node&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a7d1805c2ac9cb1d82e188ac4d4358771">operator==</a></span>(const Ptr&amp; node) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a011dc04c195e1953ea1d399904ac427b">operator[]</a></span>(const SizeType index)</code></td></tr>
<tr><td class="doxygen_index"><code>Ptr </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1af91ba2c16d9508e5c9ed01e9acf5ad81">operator[]</a></span>(const SignedSizeType index)</code></td></tr>
<tr><td></td><td><br /><h4>Pointer management</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1aa582ddca743e1c33ebcbbc8685841f97">addRef</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1ab69a2ed9464d592bcbd22cb3e97c61f5">release</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1a4af1dd885cb5a15a0c3783cde1f5157a">unique</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>std::ostream&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1Core_1_1TreeN_1abdc38a348da53c5975db934db4ebc67e">print</a></span>(std::ostream&amp; out, bool recursive, unsigned int level)</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>This class provides a generic and thread-safe implementation for N-ary trees. It behaves like an STL container class.<br /><source type="cpp">  class  MyNode  :  public  Core:: TreeN &lt;MyNode,  Policy::SingleThreaded&gt;
  {
  public :
         MyNode()
             :pValue()
         {}

         explicit  MyNode( const  String &amp;  v)
             :pValue(v)
         {}

         virtual  ~MyNode()  {}

         String  value()
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }

         void  value( const  String &amp;  s)
         {
             MyNode::ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  s;
         }

  private :
         //!  Put  here  variables  for  each  node
         String  pValue;
  };

  int  main( void )
  {
         MyNode::Ptr  root( new  MyNode( "Here  is  a  root  node" ));
         MyNode*  n  =  new  MyNode( "SubNode  1" );

         //  Adding  `n`  as  a  child  for  the  root  node
         *root  +=  n;

         //  A  few  children  for  the  node  `n`
         //  The  operator  `+=`  and  `&lt;&lt;`  are  equivalent
         n  &lt;&lt;  new  MyNode( "SubSubNode  1" )  &lt;&lt;  new  MyNode( "SubSubNode  2" )
             &lt;&lt;  new  MyNode( "SubSubNode  3" );

         return  0;
  }
</source>
<br /> Example of a pseudo XML tree :<source type="cpp">  class  MyXMLNode  :  public  Yuni::Core:: TreeN &lt;MyXMLNode&gt;
  {
  public :
         MyXMLNode()  :pValue()  {}
         virtual  MyXMLNode()  {}

         Yuni::String  value()
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             return  pValue;
         }
         void  value( const  Yuni::String &amp;  v)
         {
             ThreadingPolicy::MutexLocker  locker(* this );
             pValue  =  v;
         }

  protected :
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;node&gt;&lt;![CDATA["  &lt;&lt;  pValue  &lt;&lt;  "]]&gt;" ;
         }
         virtual  void  printBeginWL (std::ostream&amp;  out,  unsigned  int )  const
         {
             out  &lt;&lt;  "&lt;/node&gt;" ;
         }

  private :
         Yuni::String  pValue;

  };

  int  main( void )
  {
         MyXMLNode::Ptr  root( new  MyXMLNode( "root  node" ));
         MyXMLNode*  sub  =  new  MyXMLNode( "Sub  Node  1" );
         //  Adding  sub  nodes
         *root  &lt;&lt;  sub  &lt;&lt;  new  MyXMLNode( "Sub  Node  2" );
         //  Adding  sub-sub  nodes
         *sub  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  1" )  &lt;&lt;  new  MyXMLNode( "Sub  Sub  Node  2" );

         //  print
         root-&gt;print(std::cout)  &lt;&lt;  std::endl;

         return  0;
  }
</source>
<br /><div><b>note</b> :  Contrary to an STL-like container class, this class is not designed to be instantiated directly, but to be used as a base class.<br /> Each node is managed by a smart pointer, and assuming the `SingleThreaded` policy is not used, it is safe to manipulate a node from everywhere.<br /> When manipulating nodes, always prefer to use the `Ptr` typedef.<br /> Any checking policy might be used (passed to the smart pointer). However, we want to be able to have NULL pointers.<br /> This implementation will be more efficient when handling large datasets, and in a multithreaded context.<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> T</code> The real type of the tree class (CRTP)<br /></li><li><code> TP</code> The Threading policy<br /></li><li><code> ChckP</code> The Checking policy<br /></li><li><code> ConvP</code> The Conversion policy<br /></li></ul><br /></div><div style="margin-top:3em;border:1px solid #aaa;border-bottom-style:none;border-left-style:none;border-right-style:none"></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a403dfaf6658fe2d506228ceeb3e724d2" href="#">+ iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ab82efb7a58c32380cff1d2e7481b4e6a" href="#">+ const_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::ChildIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a082f56f1b8f4987f089e1d7f85a4855b" href="#">+ depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a0f650ade642d7a95074759c38a9e0c99" href="#">+ const_depth_prefix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthPrefixIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1abc2ffba1d54869fbfc6317b4b3cfd3f9" href="#">+ depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, false&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a1e96e7793a2d3031637d98328692df00" href="#">+ const_depth_infix_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Private::Core::Tree::DepthInfixIterator&lt; Node&gt;, true&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The real type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae12304091f4f0cc466620ff6125d69c5" href="#">+ Type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Node.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1aea8192927626a4072ae1b6f565b401e0" href="#">+ Node</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The template class tree node.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a37a6c3ca1b814b63b4c1f1cc9d36b7d6" href="#">+ TreeNNode</a></span>: <span class="keyword">typedef</span> TreeN&lt;T, TP, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The threading policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ab7fd7e5fed24174049ec8b5243efe84b" href="#">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> TP&lt; TreeNNode&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A thread-safe node type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a8f8eb8d434ee328b0deb7f392c8b3b51" href="#">+ PtrThreadSafe</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A default node type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a284bcdfff91f2aa7fe34870da9d3810a" href="#">+ PtrSingleThreaded</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;Node, Policy::Ownership::COMReferenceCounted, ChckP, ConvP&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Pointer to a node.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1abcb5de881ae848635d2e54f440497589" href="#">+ Ptr</a></span>: <span class="keyword">typedef</span> Static::If&lt;ThreadingPolicy::threadSafe, PtrThreadSafe, PtrSingleThreaded&gt;::ResultType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Storage policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a678bec7a32788162e4e64355c0f136dd" href="#">+ StoragePolicy</a></span>: <span class="keyword">typedef</span> Ptr::StoragePolicy;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Ownership policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a01cc8031607b13fd04f032fac661aad7" href="#">+ OwnershipPolicy</a></span>: <span class="keyword">typedef</span> Ptr::OwnershipPolicy;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Conversion policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a7af0d849ff69e58ec2d0345edf8c63b6" href="#">+ ConversionPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConversionPolicy;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Checking policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a35a7ccfaf9915708a494a5cdc94042f2" href="#">+ CheckingPolicy</a></span>: <span class="keyword">typedef</span> Ptr::CheckingPolicy;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Constness policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a3bc0c41386a460cc55a625cbb2fde012" href="#">+ ConstnessPolicy</a></span>: <span class="keyword">typedef</span> Ptr::ConstnessPolicy;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A const pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a96f4e6121a1db73df72e4ea30f35c8ef" href="#">+ ConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::ConstSmartPtrType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A non-const pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae7fb2858ab1cd48d87ee40f02b1a977d" href="#">+ NonConstPtr</a></span>: <span class="keyword">typedef</span> Ptr::NonConstSmartPtrType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Size.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a87052b8ea2f3bd7c6ee6dc8f3cc4a67f" href="#">+ SizeType</a></span>: <span class="keyword">typedef</span> unsigned int;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Size (signed)<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1af06ec8027614cca44336fc417c827312" href="#">+ SignedSizeType</a></span>: <span class="keyword">typedef</span> int;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A vector of nodes (std::vector)<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a04fad7bf73d87bc5e48d1aca141ae69f" href="#">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; Ptr&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A list of nodes (std::list)<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a3a00dcbfaae5dcbca6cf616a1e02fe52" href="#">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; Ptr&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Default constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ad9612f38c50f7da69d292432140ee303" href="#">+ TreeN</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Destructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a4cbc4461e791168a1812792cee6fabd6" href="#">+ <b> ~ </b>TreeN</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Parent of the node <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the parent of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a18123083fac8ab8eeec4971fe4e298fb" href="#">+ parent</a></span>: Ptr ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the parent of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1aa2800eab9fd054620f4aece28ded29bc" href="#">+ parent</a></span>: Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>ReAttach to another parent.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a7a86dd93f53cb11e29f18be4460db021" href="#">+ parent</a></span>: void (Ptr newParent);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Detach the node from its parent.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a0fdb408ca811e8345a49af4016e1fc47" href="#">+ detachFromParent</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Adding <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node to the end of the list.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a79ce7fe050488a38d0fdc26ab6dbacc5" href="#">+ append</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node to the end of the list.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a45db971ff72faeb1dc182d4d839f6c2d" href="#">+ append</a></span>: void (T* node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node at the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a88d83847eccf6c51e41258139e07d458" href="#">+ push_back</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node to the end of the list.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ad816bc06a701f3a3b3a4a96a1c90f747" href="#">+ push_back</a></span>: void (T* node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node at the begining.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a0be9886e53f3e42781f9272262d1e0ce" href="#">+ push_front</a></span>: void (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child node to the end of the list.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a7aeab7631d711350d760ba0da994efbb" href="#">+ push_front</a></span>: void (T* node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> node</code> The new child node<br /></li></ul><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Removing <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Remove all children.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a37a677ada63d19ffffb62b971c5c90e7" href="#">+ clear</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Remove a child node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a299fcfbd965e9ebf815f184d74870d67" href="#">+ remove</a></span>: bool (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Remove the n-th child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a67ea479a13d03c927b610f093f3761ec" href="#">+ remove</a></span>: bool (const SizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  True if the node has been removed, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Remove all children.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a1ee7504165ea1e69e0b85bc2c7202904" href="#">+ remove</a></span>: bool (const SignedSizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Searching <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae78946a9e2975da5fca477d5b1549e3c" href="#">+ begin</a></span>: iterator ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a8ad7f0a4894bb51bf89c0342a2801f13" href="#">+ begin</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the last child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ad3ab3f325e47bb3150507e376b64c735" href="#">+ end</a></span>: iterator ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a26d6211c8f7c10c5949c8a1377163b88" href="#">+ end</a></span>: const iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Find the n-th child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae0df6a815feb43c26d749e39f85d6999" href="#">+ find</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is only provided for convenience reasons. This method is slow and should be used with care.<br /><div class="doxygen_params">Parameters :</div><ul><li><code> index</code> Index of the child node to remove (zero-based) and this value can be out of bounds<br /></li></ul><div><code>return</code>  A pointer to a Ptr, NULL of not found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a0a0f95a23131e0c0e4ed6e0fd35e5fcd" href="#">+ find</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the node has children.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a5d40667ebd849ca3411419b958d61dd9" href="#">+ empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a1ff80f2c35ed9594aabfcc7ea648a963" href="#">+ count</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Alias for count()<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a61a0da55b06bcec39486e957075e4cec" href="#">+ size</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the first child.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a65570fddb974824fe4ca08bfab628edb" href="#">+ firstChild</a></span>: Ptr ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a7636ee473dd97f1f3e93eaa4c135f708" href="#">+ firstChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the last child.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1af5af76d27e265e0c1eae7ab71edd096c" href="#">+ lastChild</a></span>: Ptr ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1affc086f44c0c232c76e0dd8ecca0dac7" href="#">+ lastChild</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the previous sibling.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a3c4d4ebefe2ef3e5f665c5236e2464d4" href="#">+ previousSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a99f982f6fd8bf787c7376ba1c00e66c5" href="#">+ previousSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the next sibling.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a8e20468403176038009d94718030fabf" href="#">+ nextSibling</a></span>: Ptr ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Return iterator to the first child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a8ed385ad2b23458f2cb762d266147ae9" href="#">+ nextSibling</a></span>: const Ptr () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Extra <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the node is a leaf.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ac6aefec9313f9197800bf7235981ce26" href="#">+ leaf</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">A leaf is merely a node without any children<div><code>return</code>  True if this node is a leaf, False otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Computes the depth of this node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a76bdda29b3b7a7bf2b2db82c7156173a" href="#">+ depth</a></span>: SizeType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The depth of a node n is the length of the path from the root to the node. The set of all nodes at a given depth is sometimes called a level of the tree. The root node is at depth zero.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Computes the height from this node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a9e43bdedd0685363ac4e769840872da3" href="#">+ treeHeight</a></span>: SizeType ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">The height of a tree is the length of the path from the root to the deepest node in the tree. A (rooted) tree with only a node (the root) has a height of zero.<br /><div><code>return</code>  The height of the tree<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Test if the current node is equals to another one.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a5838cc1f1b1e1994e0fafda454aa1cc0" href="#">+ equals</a></span>: bool (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the two nodes are equal, false otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Z-Order <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Move the node to the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae20c8c08231658bb69c46c3e33d5a1d7" href="#">+ bringToFront</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer. When iterating over all children, the last one can be considered as the last drawn thus the first visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Move the node to the begining.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ab115fe3947d9c64ba427772c03dca1a4" href="#">+ sendToBack</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This method is especially useful when manipulating items on a layer When iterating over all children, the first one can be considered as the first drawn thus the last visible item for the user.<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Schedule an asynchronous update of the item (depending upon the implementation)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a991f3986ab5e04965d956a64b0e861ea" href="#">+ invalidate</a></span>: void ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the item is invalidated (depending upon the implementation)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ae4c6857a59716a39f6ed8e8586c66258" href="#">+ isInvalidated</a></span>: bool ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child at the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a4006954dc3ff703967f9bf2c59d5a8a4" href="#">+ operator+=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child at the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a5ad355f2c527253e2912fb43bad82318" href="#">+ operator+=</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Remove a child node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a1af840acc8da0c6939c15ddc98017748" href="#">+ operator-=</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child at the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a43fdd111369fafe03b234a101eab3dfe" href="#">+ operator&lt;&lt;</a></span>: Node&amp; (Ptr&amp; node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Append a child at the end.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a2319914c212dcbd277f5674dde28fe8b" href="#">+ operator&lt;&lt;</a></span>: Node&amp; (T* node);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Comparison with another node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a7d1805c2ac9cb1d82e188ac4d4358771" href="#">+ operator==</a></span>: Node&amp; (const Ptr&amp; node) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the n-th child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a011dc04c195e1953ea1d399904ac427b" href="#">+ operator[]</a></span>: Ptr (const SizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the n-th child of the node.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1af91ba2c16d9508e5c9ed01e9acf5ad81" href="#">+ operator[]</a></span>: Ptr (const SignedSizeType index);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>see</code> :  find()<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Pointer management <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Increment the internal reference counter.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1aa582ddca743e1c33ebcbbc8685841f97" href="#">+ addRef</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Decrement the internal reference counter.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1ab69a2ed9464d592bcbd22cb3e97c61f5" href="#">+ release</a></span>: void () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get if the object is an unique reference.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1a4af1dd885cb5a15a0c3783cde1f5157a" href="#">+ unique</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Print the entire tree to the output stream.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1Core_1_1TreeN_1abdc38a348da53c5975db934db4ebc67e" href="#">+ print</a></span>: std::ostream&amp; (std::ostream&amp; out, bool recursive, unsigned int level);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Should only be used for debugging purposes only<br />
</div>
</td></tr>
</table>


