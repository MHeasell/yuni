<title>Singleton</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Holder for a singleton class</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">StoredType</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">CreationPolicy</a></span> : CreationT&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">LifetimePolicy</a></span> : LifetimeT&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ThreadingPolicy</a></span> : ThreadingT&lt; Singleton&lt;T, CreationT, LifetimeT, ThreadingT&gt;&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Reference</a></span> : T&amp;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">VolatilePtr</a></span> : ThreadingPolicy::template Volatile&lt; T*&gt;::Type</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> Reference </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Instance</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">Singleton</a></span>(const Singleton&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code>Singleton&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const Singleton&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code>Singleton&lt;T, CreationT, LifetimeT, ThreadingT&gt;* </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&amp;</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const Singleton* </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&amp;</a></span>() <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>Manages creation, deletion and access in a MT environment<br /> For protection, some operations will fail at compile time. For example, supposing MySingleton inherits Singleton&lt;&gt; :<source type="cpp">  int  main( void )
  {
      MySingleton&amp;  instance  =  MySingleton::Instance ();
      //  Here  we  viciously  try  to  delete  the  instance
      delete  &amp;instance;
      return  0;
  }
</source>
<br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Stored singleton type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ StoredType</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="StoredType_20891319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Creation policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ CreationPolicy</a></span>: <span class="keyword">typedef</span> CreationT&lt; T&gt;;
</code>
</div></td></tr><tr id="CreationPolicy_20911319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Lifetime policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ LifetimePolicy</a></span>: <span class="keyword">typedef</span> LifetimeT&lt; T&gt;;
</code>
</div></td></tr><tr id="LifetimePolicy_20931319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Threading policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ThreadingPolicy</a></span>: <span class="keyword">typedef</span> ThreadingT&lt; Singleton&lt;T, CreationT, LifetimeT, ThreadingT&gt;&gt;;
</code>
</div></td></tr><tr id="ThreadingPolicy_20951319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Type as stored in the singleton (volatile if necessary)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Reference</a></span>: <span class="keyword">typedef</span> T&amp;;
</code>
</div></td></tr><tr id="Reference_20981319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Volatile pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ VolatilePtr</a></span>: <span class="keyword">typedef</span> ThreadingPolicy::template Volatile&lt; T*&gt;::Type;
</code>
</div></td></tr><tr id="VolatilePtr_20991319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the instance of this singleton.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Instance</a></span>: <span class="keyword">static</span> Reference ();
</code>
</div></td></tr><tr id="Instance_21011319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor will fail at compile time !<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ Singleton</a></span>:  (const Singleton&amp; );
</code>
</div></td></tr><tr id="Singleton_21031319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Assignment operator will fail at compile time !<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: Singleton&amp; (const Singleton&amp; );
</code>
</div></td></tr><tr id="operator=_21051319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Address-of operator will fail at compile time !<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator&amp;</a></span>: Singleton&lt;T, CreationT, LifetimeT, ThreadingT&gt;* ();
</code>
</div></td></tr><tr id="operator&_21071319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Address-of operator will fail at compile time !<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator&amp;</a></span>: const Singleton* () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator&_21091319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


