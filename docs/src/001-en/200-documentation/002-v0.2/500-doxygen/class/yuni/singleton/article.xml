<title>Singleton</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>Singleton</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_typedef">Stored singleton type.<br />
<code><span class="keyword">typedef</span> T <span class="method"><a href="#">StoredType</a></span>;</code></p>
<p class="doxygen_typedef">Creation policy.<br />
<code><span class="keyword">typedef</span> CreationT&lt; T &gt; <span class="method"><a href="#">CreationPolicy</a></span>;</code></p>
<p class="doxygen_typedef">Lifetime policy.<br />
<code><span class="keyword">typedef</span> LifetimeT&lt; T &gt; <span class="method"><a href="#">LifetimePolicy</a></span>;</code></p>
<p class="doxygen_typedef">Threading policy.<br />
<code><span class="keyword">typedef</span> ThreadingT&lt; Singleton &lt; T, CreationT, LifetimeT, ThreadingT &gt; &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">Type as stored in the singleton (volatile if necessary)<br />
<code><span class="keyword">typedef</span> T &amp; <span class="method"><a href="#">Reference</a></span>;</code></p>
<p class="doxygen_typedef">Volatile pointer.<br />
<code><span class="keyword">typedef</span> ThreadingPolicy::template Volatile&lt; T * &gt;::Type <span class="method"><a href="#">VolatilePtr</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Public</h3>
<p><code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Get the instance of this singleton.<br />
<code><span class="keyword">static</span> Reference <span class="method"><a href="#">Instance</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Copy constructor will fail at compile time !<br />
<code> <span class="method"><a href="#">Singleton</a></span>(const Singleton<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Assignment operator will fail at compile time !<br />
<code>Singleton &amp; <span class="method"><a href="#">operator=</a></span>(const Singleton<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Address-of operator will fail at compile time !<br />
<code>Singleton &lt; T, CreationT, LifetimeT, ThreadingT &gt; * <span class="method"><a href="#">operator&amp;</a></span>();</code></p>
<p class="doxygen_fun">Address-of operator will fail at compile time !<br />
<code>const Singleton * <span class="method"><a href="#">operator&amp;</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Protected constructor !<br />
<code> <span class="method"><a href="#">Singleton</a></span>();</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
