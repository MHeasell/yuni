<title>SmartPtr</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>SmartPtr</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Type alias</h3>
<p class="doxygen_typedef">Original type.<br />
<code><span class="keyword">typedef</span> T <span class="method"><a href="#">Type</a></span>;</code></p>
<p class="doxygen_typedef">The Storage policy.<br />
<code><span class="keyword">typedef</span> StorP&lt; T &gt; <span class="method"><a href="#">StoragePolicy</a></span>;</code></p>
<p class="doxygen_typedef">The Ownership policy.<br />
<code><span class="keyword">typedef</span> OwspP&lt; typename StorP&lt; T &gt;:: PointerType &gt; <span class="method"><a href="#">OwnershipPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The conversion policy.<br />
<code><span class="keyword">typedef</span> ConvP <span class="method"><a href="#">ConversionPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The checking policy.<br />
<code><span class="keyword">typedef</span> ChckP&lt; typename StorP&lt; T &gt;:: StoredType &gt; <span class="method"><a href="#">CheckingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The Constness policy.<br />
<code><span class="keyword">typedef</span> ConsP&lt; T &gt; <span class="method"><a href="#">ConstnessPolicy</a></span>;</code></p>
<p class="doxygen_typedef">the Pointer type<br />
<code><span class="keyword">typedef</span> StoragePolicy::PointerType <span class="method"><a href="#">PointerType</a></span>;</code></p>
<p class="doxygen_typedef">The Stored type.<br />
<code><span class="keyword">typedef</span> StoragePolicy::StoredType <span class="method"><a href="#">StoredType</a></span>;</code></p>
<p class="doxygen_typedef">The Reference type.<br />
<code><span class="keyword">typedef</span> StoragePolicy::ReferenceType <span class="method"><a href="#">ReferenceType</a></span>;</code></p>
<p class="doxygen_typedef">The Pointer type (const)<br />
<code><span class="keyword">typedef</span> ConstnessPolicy::Type * <span class="method"><a href="#">ConstPointerType</a></span>;</code></p>
<p class="doxygen_typedef">The Reference type (const)<br />
<code><span class="keyword">typedef</span> ConstnessPolicy::Type &amp; <span class="method"><a href="#">ConstReferenceType</a></span>;</code></p>
<p class="doxygen_typedef">Alias to itself.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt; <span class="method"><a href="#">SmartPtrType</a></span>;</code></p>
<p class="doxygen_typedef">A smart pointer with a const pointer.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, Policy::Constness::PropagateConst &gt; <span class="method"><a href="#">ConstSmartPtrType</a></span>;</code></p>
<p class="doxygen_typedef">A smart pointer with a non-const pointer.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, Policy::Constness::DontPropagateConst &gt; <span class="method"><a href="#">NonConstSmartPtrType</a></span>;</code></p>
<p class="doxygen_typedef">The Type to use for the copy constructor.<br />
<code><span class="keyword">typedef</span> Static::If &lt; OwnershipPolicy::destructiveCopy, SmartPtrType , const SmartPtrType &gt;::ResultType <span class="method"><a href="#">CopyType</a></span>;</code></p>
<p class="doxygen_typedef">Vector.<br />
<code><span class="keyword">typedef</span> std::vector&lt; SmartPtrType &gt; <span class="method"><a href="#">Vector</a></span>;</code></p>
<p class="doxygen_typedef">List.<br />
<code><span class="keyword">typedef</span> std::list&lt; SmartPtrType &gt; <span class="method"><a href="#">List</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Constructors &amp; Destructor</h3>
<p class="doxygen_fun">Default constructor.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>();</code></p>
<p class="doxygen_fun">Constructor with a given pointer, when implicit types are not allowed.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>(ExplicitStoredType ptr);</code></p>
<p class="doxygen_fun">Constructor with a given pointer, when implicit types are allowed.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>(ImplicitStoredType ptr);</code></p>
<p class="doxygen_fun">Constructor with a null pointer.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>(const NullPtr<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Copy constructor.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>(CopyType<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Copy constructor.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Copy constructor.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Move Constructor.<br />
<code> <span class="method"><a href="#">SmartPtr</a></span>(Static::MoveConstructor &lt; SmartPtrType &gt; rhs);</code></p>
<p class="doxygen_fun">Destructor.<br />
<code> <span class="method"><a href="#"><b> ~ </b>SmartPtr</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Swap</h3>
<p class="doxygen_fun">Swap from another smartptr.<br />
<code>void <span class="method"><a href="#">swap</a></span>(SmartPtr<b>&amp;</b> rhs);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operator * / -&gt;</h3>
<p class="doxygen_fun"><code>PointerType <span class="method"><a href="#">operator-&gt;</a></span>();</code></p>
<p class="doxygen_fun"><code>ConstPointerType <span class="method"><a href="#">operator-&gt;</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun"><code>ReferenceType <span class="method"><a href="#">operator*</a></span>();</code></p>
<p class="doxygen_fun"><code>ConstReferenceType <span class="method"><a href="#">operator*</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operator =</h3>
<p class="doxygen_fun">Copy.<br />
<code>SmartPtr &amp; <span class="method"><a href="#">operator=</a></span>(CopyType<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Reset.<br />
<code>SmartPtr &amp; <span class="method"><a href="#">operator=</a></span>(const NullPtr<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Copy from another smartptr.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />SmartPtr &amp; <span class="method"><a href="#">operator=</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun">Copy from another smartptr.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />SmartPtr &amp; <span class="method"><a href="#">operator=</a></span>(SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Comparisons</h3>
<p class="doxygen_fun">Operator `!` (to enable if (!mysmartptr) ...)<br />
<code>bool <span class="method"><a href="#">operator!</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">operator `==`<br />
<code>bool <span class="method"><a href="#">operator==</a></span>(const NullPtr<b>&amp;</b> ) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">operator `!=`<br />
<code>bool <span class="method"><a href="#">operator!=</a></span>(const NullPtr<b>&amp;</b> ) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">operator `==`<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator==</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Operator `!=`.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator!=</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Operator `&lt;`.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator&lt;</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Operator `&gt;`.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator&gt;</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Operator `&lt;=`.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator&lt;=</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Operator `&gt;=`.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br />bool <span class="method"><a href="#">operator&gt;=</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Cast-Operator</h3>
<p class="doxygen_fun">Cast-Operator.<br />
<code> <span class="method"><a href="#">operator Static::MoveConstructor&lt; SmartPtr &gt;</a></span>();</code></p>
<p class="doxygen_fun">Cast-Operator for `if (mySmartPtr) ...`.<br />
<code> <span class="method"><a href="#">operator AutomaticConversion *</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Get the internal stored pointer (weak pointer) by the smart pointer.<br />
<code><span class="keyword">static</span> T * <span class="method"><a href="#">WeakPointer</a></span>(const SmartPtr<b>&amp;</b> p);</code></p>
<p class="doxygen_fun">Perform a dynamic_cast on a smartptr.<br />
<code><span class="keyword">template</span>&lt;class S1 &gt;<br /><span class="keyword">static</span> S1 <span class="method"><a href="#">DynamicCast</a></span>(SmartPtr p);</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Get a pointer to the object, like operator -&gt; would do.<br />
<code>PointerType <span class="method"><a href="#">pointer</a></span>();</code></p>
<p class="doxygen_fun">Get a pointer to the object, like operator -&gt; would do.<br />
<code>ConstPointerType <span class="method"><a href="#">pointer</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Copy constructor with Dynamic casting.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(const SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs, const DynamicCastArg<b>&amp;</b> );</code></p>
<p class="doxygen_fun">Copy constructor with Dynamic casting.<br />
<code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs, const DynamicCastArg<b>&amp;</b> );</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;typename T , template&lt; class &gt; class OwspP, template&lt; class &gt; class ChckP, class ConvP , template&lt; class &gt; class StorP, template&lt; class &gt; class ConsP&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(typename SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt;::ExplicitStoredType ptr);</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;typename T , template&lt; class &gt; class OwspP, template&lt; class &gt; class ChckP, class ConvP , template&lt; class &gt; class StorP, template&lt; class &gt; class ConsP&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(typename SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt;:: CopyType<b>&amp;</b> rhs);</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;typename T1 , template&lt; class &gt; class OwspP1, template&lt; class &gt; class ChckP1, class ConvP1 , template&lt; class &gt; class StorP1, template&lt; class &gt; class ConsP1&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr &lt; T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1 &gt;<b>&amp;</b> rhs, const typename SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt;:: DynamicCastArg<b>&amp;</b> );</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;typename T , template&lt; class &gt; class OwspP, template&lt; class &gt; class ChckP, class ConvP , template&lt; class &gt; class StorP, template&lt; class &gt; class ConsP&gt;<br /> <span class="method"><a href="#">SmartPtr</a></span>(Static::MoveConstructor &lt; SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt; &gt; rhs);</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;typename T , template&lt; class &gt; class OwspP, template&lt; class &gt; class ChckP, class ConvP , template&lt; class &gt; class StorP, template&lt; class &gt; class ConsP&gt;<br />SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt; &amp; <span class="method"><a href="#">operator=</a></span>(typename SmartPtr &lt; T, OwspP, ChckP, ConvP, StorP, ConsP &gt;:: CopyType<b>&amp;</b> rhs);</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
