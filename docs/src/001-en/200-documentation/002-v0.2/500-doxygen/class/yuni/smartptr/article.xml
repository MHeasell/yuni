<title>SmartPtr</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Smart Pointer</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Type alias</h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1ada2e1a6dbab53be80668b6e95ec245e0" href="#">Type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1acea24a7c670d3f9b1b8a8cff57b3375b" href="#">StoragePolicy</a></span> : StorP&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a1849a25e52aa9eea6b0630e39655d429" href="#">OwnershipPolicy</a></span> : OwspP&lt; typename StorP&lt; T&gt;:: PointerType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a7dc564df439be1ee6bc828f456d020eb" href="#">ConversionPolicy</a></span> : ConvP</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1af419c5cf642d544ac827bac8b8e4b699" href="#">CheckingPolicy</a></span> : ChckP&lt; typename StorP&lt; T&gt;:: StoredType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a99eef5dd8461678321c89df983312235" href="#">ConstnessPolicy</a></span> : ConsP&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1ae8d25bf7455bacc11a84b0ff30834ec5" href="#">PointerType</a></span> : StoragePolicy::PointerType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1afd6dea55852a7fefd55b9971a0ad5a39" href="#">StoredType</a></span> : StoragePolicy::StoredType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a4c64950dc22b7b72e1627ded88514a7d" href="#">ReferenceType</a></span> : StoragePolicy::ReferenceType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1ae20fce89a8d6b69d0244d01ce3d20aa3" href="#">ConstPointerType</a></span> : ConstnessPolicy::Type*</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a0da3925a7ef14e3d5e5c5d92d46208ec" href="#">ConstReferenceType</a></span> : ConstnessPolicy::Type&amp;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1aa1790d3d32e7f2e82098dde2110c15f1" href="#">SmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a7ecced65a69aae49a80dd83f07411da1" href="#">ConstSmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::PropagateConst&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a7e8d41a83f5afdaf1d0d7cf5f049d7b1" href="#">NonConstSmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::DontPropagateConst&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1aa9f2ff39295b1384b458281ff1507ca2" href="#">CopyType</a></span> : Static::If&lt;OwnershipPolicy::destructiveCopy, SmartPtrType, const SmartPtrType&gt;::ResultType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1ad54f64b2392863d82efe8a41ec485f15" href="#">Vector</a></span> : std::vector&lt; SmartPtrType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a name="#classYuni_1_1SmartPtr_1a8a28084fb7224761ebbe15decb458f89" href="#">List</a></span> : std::list&lt; SmartPtrType&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aedc1d9f826d4784f8c0197a49c8580df">SmartPtr</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a472e8ee6bc2833610e9b543338ee3fc8">SmartPtr</a></span>(ExplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a6139217067f498aefc1f5eb2811d908e">SmartPtr</a></span>(ImplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a54a3e67aabc6720a891cf383ab0deafa">SmartPtr</a></span>(const NullPtr&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aefdd54bbe4cc988532f28bfb2f14b846">SmartPtr</a></span>(CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a08f274948e68b779b2a12989b33e78d6">SmartPtr</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ac6e8dd204fb30304610b57caab704767">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a104b053e811c4a4ea0a5ebd5e2151729">SmartPtr</a></span>(Static::MoveConstructor&lt;SmartPtrType&gt; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a1bd5c9b53b6f499c6363ce3c7c87f75e"><b> ~ </b>SmartPtr</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Swap</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a92105a9475d2566db87d9e48e38de288">swap</a></span>(SmartPtr&amp; rhs)</code></td></tr>
<tr><td></td><td><br /><h4>Operator * / -&gt;</h4></td></tr>
<tr><td class="doxygen_index"><code>PointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ad87aff38afb1e28ecbde230a7ec8b2fb">operator-&gt;</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstPointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aee3c2a10bd7076e1c8f98a6760b51171">operator-&gt;</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>ReferenceType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1afb1e2a63a6019c1ab341409a987fecd0">operator*</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstReferenceType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a3163aa3a333b0de3982dbb8faf894cba">operator*</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Operator =</h4></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a29b0af34eca9a2d9d78d37c189be0341">operator=</a></span>(CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a65c8aacc6d53c6b49fef9d1f677188e6">operator=</a></span>(const NullPtr&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ac14e029ded317cefa1ad19fd83f24358">operator=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a5ad6cd477b78ae35e7ff72084aa8c100">operator=</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td></td><td><br /><h4>Comparisons</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ad2d91d573f209bc1520516cab75d4997">operator!</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a0312c28202bf9a7dd3898e09fecaf51e">operator==</a></span>(const NullPtr&amp; ) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ae4a9ab6ef779079081e7a13729f7a370">operator!=</a></span>(const NullPtr&amp; ) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a1b7cd95b16b8da3380fd938b3f72d420">operator==</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a7ab93f3bf799337840f7b41ac1c7a055">operator!=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a585a32405ce490bae76599c1bd8f3e09">operator&lt;</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a1d1758451d7fe16ced40a08b002f4edb">operator&gt;</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1abc6c44f1810ec4bc515324114f571887">operator&lt;=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aa0e567e487591f3f2570571427772fa6">operator&gt;=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Cast-Operator</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aca7377c5b19105a9cbc2fec410c5aad5">operator Static::MoveConstructor&lt; SmartPtr &gt;</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a6c2f34ef62b96b498d017a7803f9d3ab">operator AutomaticConversion *</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T* </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1add3258c4865e737648f69224a7cd2c1e">WeakPointer</a></span>(const SmartPtr&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> S1 </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a5ffb2f4edb4fe31530b0e6c3b08af688">DynamicCast</a></span>(SmartPtr p)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>PointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a2f42e03ebcda9c766b107591a483017d">pointer</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstPointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a4f478b12884a4c04d62aead3b716552c">pointer</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1aa23bcc15c7b3f5ab5f06572470e1c676">SmartPtr</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a3daab359999bbc25a9188a3c198fa680">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a88431272999e4935c42c30d380c39ac3">SmartPtr</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;::ExplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1adc60d7f1fe0fc97480b2510dab5f004c">SmartPtr</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1ad6a4c9dd57a7cc2446dc1651081a056c">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a0a675ea3ea1b8f7540d74fac5d596aaf">SmartPtr</a></span>(Static::MoveConstructor&lt;SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&gt; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#classYuni_1_1SmartPtr_1a9bc2eaa9d9b469bc30c32bea2f04ee65">operator=</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs)</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>Smart pointers are abstract data type classes to simplify the memory management, especially in a multithreaded context. They simulate a pointer. They behave much like built-in C++ pointers except that they automatically delete the object pointed to at the appropriate time (automatic garbage collection), and can provide additional bounds checking.<br /> here is a simple example :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;

  struct  Foo
  {
         Foo( int  v)  :  value(v)  {}
         int  value;
  };

  int  main( void )
  {
         SmartPtr&lt;Foo&gt;  ptr;

         //  Allocating  a  new  `Foo`  instance
         ptr  =  new  Foo(42);

         //  Displaying  its  value,  like  if  it  were  a  standard  pointer
         if  (ptr)
             std::cout  &lt;&lt;  "Value  :  "  &lt;&lt;  ptr-&gt;value  &lt;&lt;  std::endl;

         //  The  instance  will  automatically  be  deleted  when  no  needed
         return  0;
  }
</source>
<br /> Here is a more complex example, dealing with inheritance :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;


  struct  Foo
  {
         Foo()
             :pValue(0)
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Constructor"  &lt;&lt;  std::endl;
         }
         Foo( const  int  v)
             :pValue(v)
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Constructor,  value  =  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;
         }
         virtual  ~Foo()
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Destructor,  value  =  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;
         }

         virtual  void  print()  const  {std::cout  &lt;&lt;  "Foo  :  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;}

  protected :
         int  pValue;
  };

  struct  Bar  :  public  Foo
  {
  public :
         Bar()  {}
         Bar( const  int  v)
             :Foo(v)
         {}
         virtual  Bar()  {}

         virtual  void  print()  const  {std::cout  &lt;&lt;  "Bar  :  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;}
  };

  int  main( void )
  {
         Yuni::SmartPtr&lt;Foo&gt;   p1( new  Foo(42));
         Yuni::SmartPtr&lt;Bar&gt;   p2( new  Bar(72));

         //  The  original  pointer  stored  by  p1  will  no  longer  be  needed  anymore
         //  and  will  be  destroyed
         //  For  obvious  reasons,  we  can  not  assign  p2  to  p1  (`Foo`  is  a  superclass  of  `Bar`)
         p1  =  p2;

         //  Print  the  values,  p1  and  p2  have  the  same  pointer  actually
         p1-&gt;print();  //  72
         p2-&gt;print();  //  72

         //  The  original  pointer  stored  in  p2  will  be  destroyed  here
         return  0;
  }
</source>
<br /><div><b>note</b> :  This smart pointer is thread-safe by default. If you do not need a locking mechanism, you should change the ownership policy.<br /></div><div><b>warning</b> :  Do not use SmartPtr with stack variables !<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;

  struct  Foo
  {
         int  bar;
  };

  void  doSomething(SmartPtr&lt;Foo&gt;  p)
  {
         std::cout  &lt;&lt;  p-&gt;bar  &lt;&lt;  std::endl;  //  Displays  42

         //  The  pointer  owned  by  `p`  will  be  deleted  at  the  end  of  the  function
  }

  int  main()
  {
         Foo  foo;
         foo.bar  =  42;
         doSomething(&amp;foo);

         //  Foo  will  be  also  deleted  here
         return  0;
  }
</source>
<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> T</code> The type<br /></li><li><code> OwspP</code> The ownership policy<br /></li><li><code> ChckP</code> The Checking policy<br /></li><li><code> ConvP</code> The Conversion policy<br /></li><li><code> StorP</code> The Storage policy<br /></li><li><code> ConsP</code> The Constness policy<br /></li></ul><br /></div><div style="margin-top:3em;border:1px solid #aaa;border-bottom-style:none;border-left-style:none;border-right-style:none"></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Type alias <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Original type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1ada2e1a6dbab53be80668b6e95ec245e0" href="#">+ Type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Storage policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1acea24a7c670d3f9b1b8a8cff57b3375b" href="#">+ StoragePolicy</a></span>: <span class="keyword">typedef</span> StorP&lt; T&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Ownership policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a1849a25e52aa9eea6b0630e39655d429" href="#">+ OwnershipPolicy</a></span>: <span class="keyword">typedef</span> OwspP&lt; typename StorP&lt; T&gt;:: PointerType&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The conversion policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a7dc564df439be1ee6bc828f456d020eb" href="#">+ ConversionPolicy</a></span>: <span class="keyword">typedef</span> ConvP;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The checking policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1af419c5cf642d544ac827bac8b8e4b699" href="#">+ CheckingPolicy</a></span>: <span class="keyword">typedef</span> ChckP&lt; typename StorP&lt; T&gt;:: StoredType&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Constness policy.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a99eef5dd8461678321c89df983312235" href="#">+ ConstnessPolicy</a></span>: <span class="keyword">typedef</span> ConsP&lt; T&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>the Pointer type<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1ae8d25bf7455bacc11a84b0ff30834ec5" href="#">+ PointerType</a></span>: <span class="keyword">typedef</span> StoragePolicy::PointerType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Stored type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1afd6dea55852a7fefd55b9971a0ad5a39" href="#">+ StoredType</a></span>: <span class="keyword">typedef</span> StoragePolicy::StoredType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Reference type.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a4c64950dc22b7b72e1627ded88514a7d" href="#">+ ReferenceType</a></span>: <span class="keyword">typedef</span> StoragePolicy::ReferenceType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Pointer type (const)<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1ae20fce89a8d6b69d0244d01ce3d20aa3" href="#">+ ConstPointerType</a></span>: <span class="keyword">typedef</span> ConstnessPolicy::Type*;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Reference type (const)<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a0da3925a7ef14e3d5e5c5d92d46208ec" href="#">+ ConstReferenceType</a></span>: <span class="keyword">typedef</span> ConstnessPolicy::Type&amp;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Alias to itself.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1aa1790d3d32e7f2e82098dde2110c15f1" href="#">+ SmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A smart pointer with a const pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a7ecced65a69aae49a80dd83f07411da1" href="#">+ ConstSmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::PropagateConst&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>A smart pointer with a non-const pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a7e8d41a83f5afdaf1d0d7cf5f049d7b1" href="#">+ NonConstSmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::DontPropagateConst&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>The Type to use for the copy constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1aa9f2ff39295b1384b458281ff1507ca2" href="#">+ CopyType</a></span>: <span class="keyword">typedef</span> Static::If&lt;OwnershipPolicy::destructiveCopy, SmartPtrType, const SmartPtrType&gt;::ResultType;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>Vector.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1ad54f64b2392863d82efe8a41ec485f15" href="#">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; SmartPtrType&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><b>List.<br /></b><div class="doxygen_name_spacer"></div>
<code><span class="method"><a name="classYuni_1_1SmartPtr_1a8a28084fb7224761ebbe15decb458f89" href="#">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; SmartPtrType&gt;;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Default constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1aedc1d9f826d4784f8c0197a49c8580df" href="#">+ SmartPtr</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor with a given pointer, when implicit types are not allowed.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a472e8ee6bc2833610e9b543338ee3fc8" href="#">+ SmartPtr</a></span>:  (ExplicitStoredType ptr);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor with a given pointer, when implicit types are allowed.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a6139217067f498aefc1f5eb2811d908e" href="#">+ SmartPtr</a></span>:  (ImplicitStoredType ptr);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Constructor with a null pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a54a3e67aabc6720a891cf383ab0deafa" href="#">+ SmartPtr</a></span>:  (const NullPtr&amp; );
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1aefdd54bbe4cc988532f28bfb2f14b846" href="#">+ SmartPtr</a></span>:  (CopyType&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a08f274948e68b779b2a12989b33e78d6" href="#">+ SmartPtr</a></span>:  (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1ac6e8dd204fb30304610b57caab704767" href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Move Constructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a104b053e811c4a4ea0a5ebd5e2151729" href="#">+ SmartPtr</a></span>:  (Static::MoveConstructor&lt;SmartPtrType&gt; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Destructor.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a1bd5c9b53b6f499c6363ce3c7c87f75e" href="#">+ <b> ~ </b>SmartPtr</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Swap <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Swap from another smartptr.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a92105a9475d2566db87d9e48e38de288" href="#">+ swap</a></span>: void (SmartPtr&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operator * / -&gt; <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1SmartPtr_1ad87aff38afb1e28ecbde230a7ec8b2fb" href="#">+ operator-&gt;</a></span>: PointerType ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1SmartPtr_1aee3c2a10bd7076e1c8f98a6760b51171" href="#">+ operator-&gt;</a></span>: ConstPointerType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1SmartPtr_1afb1e2a63a6019c1ab341409a987fecd0" href="#">+ operator*</a></span>: ReferenceType ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a name="classYuni_1_1SmartPtr_1a3163aa3a333b0de3982dbb8faf894cba" href="#">+ operator*</a></span>: ConstReferenceType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operator = <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a29b0af34eca9a2d9d78d37c189be0341" href="#">+ operator=</a></span>: SmartPtr&amp; (CopyType&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Reset.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a65c8aacc6d53c6b49fef9d1f677188e6" href="#">+ operator=</a></span>: SmartPtr&amp; (const NullPtr&amp; );
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy from another smartptr.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1ac14e029ded317cefa1ad19fd83f24358" href="#">+ operator=</a></span>: SmartPtr&amp; (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy from another smartptr.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a5ad6cd477b78ae35e7ff72084aa8c100" href="#">+ operator=</a></span>: SmartPtr&amp; (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `!` (to enable if (!mysmartptr) ...)<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1ad2d91d573f209bc1520516cab75d4997" href="#">+ operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>operator `==`<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a0312c28202bf9a7dd3898e09fecaf51e" href="#">+ operator==</a></span>: bool (const NullPtr&amp; ) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>operator `!=`<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1ae4a9ab6ef779079081e7a13729f7a370" href="#">+ operator!=</a></span>: bool (const NullPtr&amp; ) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>operator `==`<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a1b7cd95b16b8da3380fd938b3f72d420" href="#">+ operator==</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `!=`.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a7ab93f3bf799337840f7b41ac1c7a055" href="#">+ operator!=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `&lt;`.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a585a32405ce490bae76599c1bd8f3e09" href="#">+ operator&lt;</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `&gt;`.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a1d1758451d7fe16ced40a08b002f4edb" href="#">+ operator&gt;</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `&lt;=`.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1abc6c44f1810ec4bc515324114f571887" href="#">+ operator&lt;=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Operator `&gt;=`.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1aa0e567e487591f3f2570571427772fa6" href="#">+ operator&gt;=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Cast-Operator <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Cast-Operator.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1aca7377c5b19105a9cbc2fec410c5aad5" href="#">+ operator Static::MoveConstructor&lt; SmartPtr &gt;</a></span>:  ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Cast-Operator for `if (mySmartPtr) ...`.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a6c2f34ef62b96b498d017a7803f9d3ab" href="#">+ operator AutomaticConversion *</a></span>:  () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get the internal stored pointer (weak pointer) by the smart pointer.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1add3258c4865e737648f69224a7cd2c1e" href="#">+ WeakPointer</a></span>: <span class="keyword">static</span> T* (const SmartPtr&amp; p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><b>note</b> :  This methode should be used with care, especially in a multithreaded world<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The smart pointer<br /></li></ul><div><code>return</code>  The internal stored pointer (can be null)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Perform a dynamic_cast on a smartptr.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;class S1 &gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a5ffb2f4edb4fe31530b0e6c3b08af688" href="#">+ DynamicCast</a></span>: <span class="keyword">static</span> S1 (SmartPtr p);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Assuming the class `B` is a descendant of the class `A`<source type="cpp">  A::Ptr  a  =  new  B();

  B::Ptr  =  A::Ptr::DynamicCast&lt;B::Ptr&gt;(a);
</source>
<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get a pointer to the object, like operator -&gt; would do.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a2f42e03ebcda9c766b107591a483017d" href="#">+ pointer</a></span>: PointerType ();
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Get a pointer to the object, like operator -&gt; would do.<br /></b><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a name="classYuni_1_1SmartPtr_1a4f478b12884a4c04d62aead3b716552c" href="#">+ pointer</a></span>: ConstPointerType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy constructor with Dynamic casting.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1aa23bcc15c7b3f5ab5f06572470e1c676" href="#">+ SmartPtr</a></span>:  (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; );
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><b>Copy constructor with Dynamic casting.<br /></b><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a3daab359999bbc25a9188a3c198fa680" href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; );
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a88431272999e4935c42c30d380c39ac3" href="#">+ SmartPtr</a></span>:  (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;::ExplicitStoredType ptr);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1adc60d7f1fe0fc97480b2510dab5f004c" href="#">+ SmartPtr</a></span>:  (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1ad6a4c9dd57a7cc2446dc1651081a056c" href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: DynamicCastArg&amp; );
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a0a675ea3ea1b8f7540d74fac5d596aaf" href="#">+ SmartPtr</a></span>:  (Static::MoveConstructor&lt;SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&gt; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a name="classYuni_1_1SmartPtr_1a9bc2eaa9d9b469bc30c32bea2f04ee65" href="#">+ operator=</a></span>: SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&amp; (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs);
</code>
</div></td></tr><tr><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


