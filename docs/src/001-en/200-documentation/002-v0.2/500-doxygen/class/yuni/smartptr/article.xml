<title>SmartPtr</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>Smart Pointer</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Type alias</h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">StoragePolicy</a></span> : StorP&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">OwnershipPolicy</a></span> : OwspP&lt; typename StorP&lt; T&gt;:: PointerType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConversionPolicy</a></span> : ConvP</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">CheckingPolicy</a></span> : ChckP&lt; typename StorP&lt; T&gt;:: StoredType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstnessPolicy</a></span> : ConsP&lt; T&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">PointerType</a></span> : StoragePolicy::PointerType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">StoredType</a></span> : StoragePolicy::StoredType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ReferenceType</a></span> : StoragePolicy::ReferenceType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstPointerType</a></span> : ConstnessPolicy::Type*</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstReferenceType</a></span> : ConstnessPolicy::Type&amp;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">SmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ConstSmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::PropagateConst&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">NonConstSmartPtrType</a></span> : SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::DontPropagateConst&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">CopyType</a></span> : Static::If&lt;OwnershipPolicy::destructiveCopy, SmartPtrType, const SmartPtrType&gt;::ResultType</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Vector</a></span> : std::vector&lt; SmartPtrType&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">List</a></span> : std::list&lt; SmartPtrType&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(ExplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(ImplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(const NullPtr&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(Static::MoveConstructor&lt;SmartPtrType&gt; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>SmartPtr</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Swap</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">swap</a></span>(SmartPtr&amp; rhs)</code></td></tr>
<tr><td></td><td><br /><h4>Operator * / -&gt;</h4></td></tr>
<tr><td class="doxygen_index"><code>PointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-&gt;</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstPointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-&gt;</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>ReferenceType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator*</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstReferenceType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator*</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Operator =</h4></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const NullPtr&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs)</code></td></tr>
<tr><td></td><td><br /><h4>Comparisons</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator==</a></span>(const NullPtr&amp; ) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!=</a></span>(const NullPtr&amp; ) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator==</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&lt;</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&gt;</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&lt;=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&gt;=</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Cast-Operator</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator Static::MoveConstructor&lt; SmartPtr &gt;</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator AutomaticConversion *</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> T* </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">WeakPointer</a></span>(const SmartPtr&amp; p)</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">static</span> S1 </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">DynamicCast</a></span>(SmartPtr p)</code></td></tr>
<tr><td></td><td><br /><h4></h4></td></tr>
<tr><td class="doxygen_index"><code>PointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">pointer</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>ConstPointerType </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">pointer</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;::ExplicitStoredType ptr)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: DynamicCastArg&amp; )</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">SmartPtr</a></span>(Static::MoveConstructor&lt;SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&gt; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs)</code></td></tr>
</table></div>

<h2>Detailed Description</h2><div>Smart pointers are abstract data type classes to simplify the memory management, especially in a multithreaded context. They simulate a pointer. They behave much like built-in C++ pointers except that they automatically delete the object pointed to at the appropriate time (automatic garbage collection), and can provide additional bounds checking.<br /> here is a simple example :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;

  struct  Foo
  {
         Foo( int  v)  :  value(v)  {}
         int  value;
  };

  int  main( void )
  {
         SmartPtr&lt;Foo&gt;  ptr;

         //  Allocating  a  new  `Foo`  instance
         ptr  =  new  Foo(42);

         //  Displaying  its  value,  like  if  it  were  a  standard  pointer
         if  (ptr)
             std::cout  &lt;&lt;  "Value  :  "  &lt;&lt;  ptr-&gt;value  &lt;&lt;  std::endl;

         //  The  instance  will  automatically  be  deleted  when  no  needed
         return  0;
  }
</source>
<br /> Here is a more complex example, dealing with inheritance :<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;


  struct  Foo
  {
         Foo()
             :pValue(0)
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Constructor"  &lt;&lt;  std::endl;
         }
         Foo( const  int  v)
             :pValue(v)
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Constructor,  value  =  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;
         }
         virtual  ~Foo()
         {
             std::cout  &lt;&lt;  ( void *) this  &lt;&lt;  "  Destructor,  value  =  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;
         }

         virtual  void  print()  const  {std::cout  &lt;&lt;  "Foo  :  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;}

  protected :
         int  pValue;
  };

  struct  Bar  :  public  Foo
  {
  public :
         Bar()  {}
         Bar( const  int  v)
             :Foo(v)
         {}
         virtual  Bar()  {}

         virtual  void  print()  const  {std::cout  &lt;&lt;  "Bar  :  "  &lt;&lt;  pValue  &lt;&lt;  std::endl;}
  };

  int  main( void )
  {
         Yuni::SmartPtr&lt;Foo&gt;   p1( new  Foo(42));
         Yuni::SmartPtr&lt;Bar&gt;   p2( new  Bar(72));

         //  The  original  pointer  stored  by  p1  will  no  longer  be  needed  anymore
         //  and  will  be  destroyed
         //  For  obvious  reasons,  we  can  not  assign  p2  to  p1  (`Foo`  is  a  superclass  of  `Bar`)
         p1  =  p2;

         //  Print  the  values,  p1  and  p2  have  the  same  pointer  actually
         p1-&gt;print();  //  72
         p2-&gt;print();  //  72

         //  The  original  pointer  stored  in  p2  will  be  destroyed  here
         return  0;
  }
</source>
<br /><div><b>note</b> :  This smart pointer is thread-safe by default. If you do not need a locking mechanism, you should change the ownership policy.<br /></div><div><b>warning</b> :  Do not use SmartPtr with stack variables !<source type="cpp">  #include  &lt;iostream&gt;
  #include  &lt; yuni/core/smartptr.h &gt;

  struct  Foo
  {
         int  bar;
  };

  void  doSomething(SmartPtr&lt;Foo&gt;  p)
  {
         std::cout  &lt;&lt;  p-&gt;bar  &lt;&lt;  std::endl;  //  Displays  42

         //  The  pointer  owned  by  `p`  will  be  deleted  at  the  end  of  the  function
  }

  int  main()
  {
         Foo  foo;
         foo.bar  =  42;
         doSomething(&amp;foo);

         //  Foo  will  be  also  deleted  here
         return  0;
  }
</source>
<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> T</code> The type<br /></li><li><code> OwspP</code> The ownership policy<br /></li><li><code> ChckP</code> The Checking policy<br /></li><li><code> ConvP</code> The Conversion policy<br /></li><li><code> StorP</code> The Storage policy<br /></li><li><code> ConsP</code> The Constness policy<br /></li></ul><br /></div>
<table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Type alias <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Original type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="Type_33541319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Storage policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ StoragePolicy</a></span>: <span class="keyword">typedef</span> StorP&lt; T&gt;;
</code>
</div></td></tr><tr id="StoragePolicy_33551319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Ownership policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ OwnershipPolicy</a></span>: <span class="keyword">typedef</span> OwspP&lt; typename StorP&lt; T&gt;:: PointerType&gt;;
</code>
</div></td></tr><tr id="OwnershipPolicy_33561319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The conversion policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConversionPolicy</a></span>: <span class="keyword">typedef</span> ConvP;
</code>
</div></td></tr><tr id="ConversionPolicy_33571319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The checking policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ CheckingPolicy</a></span>: <span class="keyword">typedef</span> ChckP&lt; typename StorP&lt; T&gt;:: StoredType&gt;;
</code>
</div></td></tr><tr id="CheckingPolicy_33581319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Constness policy.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstnessPolicy</a></span>: <span class="keyword">typedef</span> ConsP&lt; T&gt;;
</code>
</div></td></tr><tr id="ConstnessPolicy_33591319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">the Pointer type<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ PointerType</a></span>: <span class="keyword">typedef</span> StoragePolicy::PointerType;
</code>
</div></td></tr><tr id="PointerType_33601319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Stored type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ StoredType</a></span>: <span class="keyword">typedef</span> StoragePolicy::StoredType;
</code>
</div></td></tr><tr id="StoredType_33611319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Reference type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ReferenceType</a></span>: <span class="keyword">typedef</span> StoragePolicy::ReferenceType;
</code>
</div></td></tr><tr id="ReferenceType_33621319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Pointer type (const)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstPointerType</a></span>: <span class="keyword">typedef</span> ConstnessPolicy::Type*;
</code>
</div></td></tr><tr id="ConstPointerType_33631319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Reference type (const)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstReferenceType</a></span>: <span class="keyword">typedef</span> ConstnessPolicy::Type&amp;;
</code>
</div></td></tr><tr id="ConstReferenceType_33641319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Alias to itself.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ SmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;;
</code>
</div></td></tr><tr id="SmartPtrType_33651319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A smart pointer with a const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ConstSmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::PropagateConst&gt;;
</code>
</div></td></tr><tr id="ConstSmartPtrType_33661319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">A smart pointer with a non-const pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ NonConstSmartPtrType</a></span>: <span class="keyword">typedef</span> SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, Policy::Constness::DontPropagateConst&gt;;
</code>
</div></td></tr><tr id="NonConstSmartPtrType_33671319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">The Type to use for the copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ CopyType</a></span>: <span class="keyword">typedef</span> Static::If&lt;OwnershipPolicy::destructiveCopy, SmartPtrType, const SmartPtrType&gt;::ResultType;
</code>
</div></td></tr><tr id="CopyType_33681319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Vector.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; SmartPtrType&gt;;
</code>
</div></td></tr><tr id="Vector_33691319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">List.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ List</a></span>: <span class="keyword">typedef</span> std::list&lt; SmartPtrType&gt;;
</code>
</div></td></tr><tr id="List_33701319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  ();
</code>
</div></td></tr><tr id="SmartPtr_33711319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with a given pointer, when implicit types are not allowed.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  (ExplicitStoredType ptr);
</code>
</div></td></tr><tr id="SmartPtr_33721319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with a given pointer, when implicit types are allowed.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  (ImplicitStoredType ptr);
</code>
</div></td></tr><tr id="SmartPtr_33741319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Constructor with a null pointer.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  (const NullPtr&amp; );
</code>
</div></td></tr><tr id="SmartPtr_33761319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  (CopyType&amp; rhs);
</code>
</div></td></tr><tr id="SmartPtr_33781319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="SmartPtr_33801319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr id="SmartPtr_33801319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="SmartPtr_33841319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr id="SmartPtr_33841319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Move Constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ SmartPtr</a></span>:  (Static::MoveConstructor&lt;SmartPtrType&gt; rhs);
</code>
</div></td></tr><tr id="SmartPtr_33881319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>SmartPtr</a></span>:  ();
</code>
</div></td></tr><tr id="~SmartPtr_33891319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Swap <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Swap from another smartptr.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ swap</a></span>: void (SmartPtr&amp; rhs);
</code>
</div></td></tr><tr id="swap_33911319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operator * / -&gt; <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a href="#">+ operator-&gt;</a></span>: PointerType ();
</code>
</div></td></tr><tr id="operator_>_33941319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a href="#">+ operator-&gt;</a></span>: ConstPointerType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator_>_33961319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a href="#">+ operator*</a></span>: ReferenceType ();
</code>
</div></td></tr><tr id="operator*_33971319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code> <span class="method"><a href="#">+ operator*</a></span>: ConstReferenceType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator*_33991319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operator = <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: SmartPtr&amp; (CopyType&amp; rhs);
</code>
</div></td></tr><tr id="operator=_34011319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Reset.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: SmartPtr&amp; (const NullPtr&amp; );
</code>
</div></td></tr><tr id="operator=_34021319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy from another smartptr.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator=_34031319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator=</a></span>: SmartPtr&amp; (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr id="operator=_34031319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy from another smartptr.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator=_34041319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator=</a></span>: SmartPtr&amp; (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs);
</code>
</div></td></tr><tr id="operator=_34041319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `!` (to enable if (!mysmartptr) ...)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!_34051319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">operator `==`<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator==</a></span>: bool (const NullPtr&amp; ) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator==_34061319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">operator `!=`<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator!=</a></span>: bool (const NullPtr&amp; ) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!=_34071319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">operator `==`<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator==_34081319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator==</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator==_34081319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `!=`.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator!=_34091319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator!=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!=_34091319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `&lt;`.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator<_34101319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator&lt;</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator<_34101319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `&gt;`.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator>_34111319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator&gt;</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator>_34111319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `&lt;=`.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator<=_34131319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator&lt;=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator<=_34131319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Operator `&gt;=`.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator>=_34161319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ operator&gt;=</a></span>: bool (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator>=_34161319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Cast-Operator <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Cast-Operator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator Static::MoveConstructor&lt; SmartPtr &gt;</a></span>:  ();
</code>
</div></td></tr><tr id="operator Static::MoveConstructor< SmartPtr >_34191319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Cast-Operator for `if (mySmartPtr) ...`.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator AutomaticConversion *</a></span>:  () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator AutomaticConversion *_34211319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the internal stored pointer (weak pointer) by the smart pointer.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ WeakPointer</a></span>: <span class="keyword">static</span> T* (const SmartPtr&amp; p);
</code>
</div></td></tr><tr id="WeakPointer_34221319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><b>note</b> :  This methode should be used with care, especially in a multithreaded world<br /></div><div class="doxygen_params">Parameters :</div><ul><li><code> p</code> The smart pointer<br /></li></ul><div><code>return</code>  The internal stored pointer (can be null)<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Perform a dynamic_cast on a smartptr.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="DynamicCast_34241319844517_tmpl"><span class="keyword">template</span>&lt;class S1 &gt;</div>
 <span class="method"><a href="#">+ DynamicCast</a></span>: <span class="keyword">static</span> S1 (SmartPtr p);
</code>
</div></td></tr><tr id="DynamicCast_34241319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">Assuming the class `B` is a descendant of the class `A`<source type="cpp">  A::Ptr  a  =  new  B();

  B::Ptr  =  A::Ptr::DynamicCast&lt;B::Ptr&gt;(a);
</source>
<br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get a pointer to the object, like operator -&gt; would do.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ pointer</a></span>: PointerType ();
</code>
</div></td></tr><tr id="pointer_34261319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get a pointer to the object, like operator -&gt; would do.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ pointer</a></span>: ConstPointerType () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="pointer_34281319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor with Dynamic casting.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="SmartPtr_34291319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (const SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; );
</code>
</div></td></tr><tr id="SmartPtr_34291319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor with Dynamic casting.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="SmartPtr_34321319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const DynamicCastArg&amp; );
</code>
</div></td></tr><tr id="SmartPtr_34321319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist" id="SmartPtr_34341319844517_tmpl"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;::ExplicitStoredType ptr);
</code>
</div></td></tr><tr id="SmartPtr_34341319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist" id="SmartPtr_34381319844517_tmpl"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs);
</code>
</div></td></tr><tr id="SmartPtr_34381319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist" id="SmartPtr_34421319844517_tmpl"><span class="keyword">template</span>&lt;typename T1 , template&lt; class&gt;class OwspP1, template&lt; class&gt;class ChckP1, class ConvP1 , template&lt; class&gt;class StorP1, template&lt; class&gt;class ConsP1&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (SmartPtr&lt;T1, OwspP1, ChckP1, ConvP1, StorP1, ConsP1&gt;&amp; rhs, const typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: DynamicCastArg&amp; );
</code>
</div></td></tr><tr id="SmartPtr_34421319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist" id="SmartPtr_34461319844517_tmpl"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a href="#">+ SmartPtr</a></span>:  (Static::MoveConstructor&lt;SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&gt; rhs);
</code>
</div></td></tr><tr id="SmartPtr_34461319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief"><code><div class="doxygen_tmpllist" id="operator=_34501319844517_tmpl"><span class="keyword">template</span>&lt;typename T , template&lt; class&gt;class OwspP, template&lt; class&gt;class ChckP, class ConvP , template&lt; class&gt;class StorP, template&lt; class&gt;class ConsP&gt;</div>
 <span class="method"><a href="#">+ operator=</a></span>: SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;&amp; (typename SmartPtr&lt;T, OwspP, ChckP, ConvP, StorP, ConsP&gt;:: CopyType&amp; rhs);
</code>
</div></td></tr><tr id="operator=_34501319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
</table>


