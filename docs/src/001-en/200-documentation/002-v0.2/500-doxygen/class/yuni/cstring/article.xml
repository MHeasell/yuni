<title>CString</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>CString</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Compatibility with std::string <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The type of object, charT, stored in the string.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">value_type</a></span>: <span class="keyword">typedef</span> char;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer to char.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">pointer</a></span>: <span class="keyword">typedef</span> char *;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Reference to char.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">reference</a></span>: <span class="keyword">typedef</span> char &amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Const reference to char.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_reference</a></span>: <span class="keyword">typedef</span> const char &amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">An unsigned integral type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">size_type</a></span>: <span class="keyword">typedef</span> Size;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A signed integral type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">difference_type</a></span>: <span class="keyword">typedef</span> ssize_t;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">CString comparison <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compare two string like strcmp()<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Compare</a></span>: <span class="keyword">static</span> int (const char<b>*</b>const s1, unsigned int l1, const char<b>*</b>const s2, unsigned int l2);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compare two string like strcmp() (insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CompareInsensitive</a></span>: <span class="keyword">static</span> int (const char<b>*</b>const s1, unsigned int l1, const char<b>*</b>const s2, unsigned int l2);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Faster implementation of some commons routines <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Upper case to lower case letter conversion (man 3 tolower)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ToLower</a></span>: <span class="keyword">static</span> int (int c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Lower case to upper case letter conversion (man 3 toupper)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ToUpper</a></span>: <span class="keyword">static</span> int (int c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">White-space character test.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">IsSpace</a></span>: <span class="keyword">static</span> bool (int c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">decimal-digit character test<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">IsDigit</a></span>: <span class="keyword">static</span> bool (int c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">decimal-digit character test (without zero)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">IsDigitNonZero</a></span>: <span class="keyword">static</span> bool (int c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">alphabetic character test<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">IsAlpha</a></span>: <span class="keyword">static</span> bool (int c);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Iterator .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">iterator</a></span>: <span class="keyword">typedef</span> IIterator &lt; typename Model::ByteIterator , false &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Iterator (const)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_iterator</a></span>: <span class="keyword">typedef</span> IIterator &lt; typename Model::ByteIterator , true &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Iterator for UTF8 characters.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">utf8iterator</a></span>: <span class="keyword">typedef</span> IIterator &lt; typename Model::UTF8Iterator , false &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Iterator for UTF8 characters (const)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_utf8iterator</a></span>: <span class="keyword">typedef</span> IIterator &lt; typename Model::UTF8Iterator , true &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Null iterator.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">null_iterator</a></span>: <span class="keyword">typedef</span> IIterator &lt; typename Model::NullIterator , true &gt;;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator on UTF8 characters pointing to the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8begin</a></span>: utf8iterator ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator on UTF8 characters pointing to the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8begin</a></span>: const_utf8iterator () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator on UTF8 characters pointing to the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8end</a></span>: null_iterator ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator on UTF8 characters pointing to the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8end</a></span>: null_iterator () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator pointing to the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: iterator ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator pointing to the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: const_iterator () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator pointing to the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: null_iterator ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator pointing to the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: null_iterator () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default Constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const CString<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor from a mere CString .<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const char<b>*</b>const block, const Size blockSize);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor from a copy of a substring of 's'.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const CString &lt; SizeT, ExpT, ZeroT &gt;<b>&amp;</b> s, Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor from a copy of a substring of 's'.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const CString &lt; SizeT, ExpT, ZeroT &gt;<b>&amp;</b> s, Size offset, Size n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor from a copy of a substring of 's' (std::string)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const std::basic_string&lt; char, TraitsT, AllocT &gt;<b>&amp;</b> s, Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor from a copy of a substring of 's' (std::string)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const std::basic_string&lt; char, TraitsT, AllocT &gt;<b>&amp;</b> s, Size offset, Size n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor by copy from iterator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor by copy from iterator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end, const StringT<b>&amp;</b> separator);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with a default value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Construct a string formed by a repetition of the character c, n times.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (size_t n, char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Construct a string formed by a repetition of the character c, n times.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">CString</a></span>:  (size_t n, unsigned char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>CString</a></span>:  ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Append / Assign / Fill <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign a new value to the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy a raw C-String.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const StringT<b>&amp;</b> str, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy a raw C-String.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const StringT<b>&amp;</b> str, const Size size, const Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign to the string all items within.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign to the string all items within.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end, const StringT<b>&amp;</b> separator);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign to thestring all items within.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assign</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end, const StringT<b>&amp;</b> separator, const EnclosureT<b>&amp;</b> enclosure);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string a new value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string all items within.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string all items within.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end, const StringT<b>&amp;</b> separator);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string all items within a range.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> begin, const IIterator &lt; ModelT2, ConstT2 &gt;<b>&amp;</b> end, const StringT<b>&amp;</b> separator, const EnclosureT<b>&amp;</b> enclosure);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string a new value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const StringT<b>&amp;</b> s, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append to the end of the string a new value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">append</a></span>: void (const StringT<b>&amp;</b> s, const Size size, const Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">write</a></span>: void (const U<b>&amp;</b> cstr);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">write</a></span>: void (const U<b>&amp;</b> cstr, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a single signed char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">put</a></span>: void (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a single unsigned char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">put</a></span>: void (const unsigned char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign a new value to the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">put</a></span>: void (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert a raw C-String at a given position in the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">insert</a></span>: bool (const Size offset, const char<b>*</b>const cstr, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert a single item at a given position in the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">insert</a></span>: bool (const Size offset, const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert an arbitrary C-String at a given position in the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">insert</a></span>: bool (const Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert an arbitrary C-String at a given position in the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">insert</a></span>: bool (const Size offset, const StringT<b>&amp;</b> u, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert any arbitrary string at a given offset provided by an iterator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">insert</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> it, const StringT<b>&amp;</b> string);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert a raw C-String at the beginning of in the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">prepend</a></span>: bool (const char<b>*</b>const cstr, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert a single item at the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">prepend</a></span>: bool (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert an arbitrary C-String at the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">prepend</a></span>: bool (const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Insert an arbitrary C-String at the beginning the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">prepend</a></span>: bool (const StringT<b>&amp;</b> u, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwrite</a></span>: void (const Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwrite</a></span>: void (const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwrite</a></span>: void (const Size offset, const char<b>*</b>const cstr, const Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string from the right of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwriteRight</a></span>: void (const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string from the right of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwriteRight</a></span>: void (const Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Overwrite a region of the string from the center of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">overwriteCenter</a></span>: void (const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Fill the entire string with a given pattern.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">fill</a></span>: void (const StringT<b>&amp;</b> pattern);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Fill the entire string with a given pattern from a given offset.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">fill</a></span>: void (Size offset, const StringT<b>&amp;</b> pattern);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Equivalent to append()<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_back</a></span>: void (const U<b>&amp;</b> u);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Equivalent to prepend()<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_front</a></span>: void (const U<b>&amp;</b> u);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Search / Replace <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">icontains</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes) (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">icontains</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString .<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">contains</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">icontains</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Size (const char<b>*</b>const cstr, Size offset, Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString .<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: Size (const StringT<b>&amp;</b> s, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes) (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind</a></span>: Size (const char<b>*</b>const cstr, Size offset, Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind</a></span>: Size (const StringT<b>&amp;</b> s, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">rfind</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">rfind</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">rfind</a></span>: Size (const char<b>*</b>const cstr, Size offset, Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString .<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">rfind</a></span>: Size (const StringT<b>&amp;</b> s, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">irfind</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">irfind</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes) (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">irfind</a></span>: Size (const char<b>*</b>const cstr, Size offset, Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">irfind</a></span>: Size (const StringT<b>&amp;</b> s, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string contains at least one occurence of a given char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">hasChar</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string contains at least one occurence of a given unsigned char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">hasChar</a></span>: bool (unsigned char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of occurrences of a single char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">countChar</a></span>: unsigned int (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of occurrences of a single unsigned char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">countChar</a></span>: unsigned int (unsigned char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a sub-string from the left.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">indexOf</a></span>: Size (Size offset, const char cstr) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of a raw sub-string with a given length (in bytes) from the left.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">indexOf</a></span>: Size (Size offset, const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Find the offset of any supported CString from the left.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">indexOf</a></span>: Size (Size offset, const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for an individual character.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_first_of</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for an individual character (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_first_of</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for any of the characters that are part of `seq`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_first_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for any of the characters that are part of `seq` (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_first_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for the first character that is not `c`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_first_not_of</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for the first character that is not `c` (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_first_not_of</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for any of the characters that are not part of `seq`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_first_not_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string for any of the characters that are not part of `seq` (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_first_not_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string from the end for an individual character.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_last_of</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string from the end for an individual character (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_last_of</a></span>: Size (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string from the end for an individual character.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_last_of</a></span>: Size (char c, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string from the end for any of the characters that are part of `seq`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find_last_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Searches the string from the end for any of the characters that are part of `seq` (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ifind_last_of</a></span>: Size (const StringT<b>&amp;</b> seq, Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the beginning.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">startsWith</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the beginning.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">startsWith</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given char can be found at the beginning.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">startsWith</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the beginning (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">istartsWith</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the beginning (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">istartsWith</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given char can be found at the beginning (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">istartsWith</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">endsWith</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">endsWith</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">endsWith</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">iendsWith</a></span>: bool (const char<b>*</b>const cstr, const Size len) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">iendsWith</a></span>: bool (const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if a given string can be found at the end (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">iendsWith</a></span>: bool (char c) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Erase.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">chop</a></span>: void (unsigned int n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the last char.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">removeLast</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the trailing slash or backslash at the end of the string (if any)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">removeTrailingSlash</a></span>: void ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Trimming <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all white-spaces (" \t\r\n") from the beginning and the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trim</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all white-spaces from the beginning and the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trim</a></span>: void (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Removes all items equal to one of those in 'whitespaces' from the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trim</a></span>: void (const StringT<b>&amp;</b> whitespaces);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Removes all items equal to one of those in 'u' from the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trimRight</a></span>: void (const StringT<b>&amp;</b> whitespaces);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all items equal to 'c' from the end of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trimRight</a></span>: void (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Removes all items equal to one of those in 'u' from the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trimLeft</a></span>: void (const StringT<b>&amp;</b> whitespaces);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all items equal to 'c' from the beginning of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">trimLeft</a></span>: void (const char c);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Remove / Erase <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Empty the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">clear</a></span>: CString &amp; ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Erase a part of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">erase</a></span>: void (const Size offset, const Size len);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Erase a part of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">erase</a></span>: void (const IIterator &lt; ModelT, ConstT &gt;<b>&amp;</b> offset, const Size len);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a string by another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">replace</a></span>: void (const StringT1<b>&amp;</b> from, const StringT2<b>&amp;</b> to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a string by another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">replace</a></span>: void (Size offset, const StringT1<b>&amp;</b> from, const StringT2<b>&amp;</b> to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a given char by another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">replace</a></span>: void (char from, char to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a given char by another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">replace</a></span>: void (Size offset, char from, char to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a given char by another one (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ireplace</a></span>: void (char from, char to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a given char by another one (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ireplace</a></span>: void (Size offset, char from, char to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a string by another one (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ireplace</a></span>: void (const StringT1<b>&amp;</b> from, const StringT2<b>&amp;</b> to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Replace all occurrences of a string by another one (case insensitive)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">ireplace</a></span>: void (Size offset, const StringT1<b>&amp;</b> from, const StringT2<b>&amp;</b> to);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the 'n' first characters.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">consume</a></span>: void (Size n);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Case conversion <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert the case (lower case) of characters in the string (O(N))<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">toLower</a></span>: CString &amp; ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert the case (upper case) of characters in the string (O(N))<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">toUpper</a></span>: CString &amp; ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Comparisons <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string is equals to another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">equals</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string is equals to another one (ignoring case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">equalsInsensitive</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compare the string with another one.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">compare</a></span>: int (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compare the string with another one (ignoring the case)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">compareInsensitive</a></span>: int (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Conversions <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert the string into something else.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">to</a></span>: U () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert the string into something else.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">to</a></span>: bool (U<b>&amp;</b> out) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterating through the string <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the next UTF-8 character.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8next</a></span>: UTF8::Error (Size<b>&amp;</b> offset, UTF8::Char<b>&amp;</b> out) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Memory management <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the item at a given position in a safe way.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">at</a></span>: int (const Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Truncate the string to the given length.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">truncate</a></span>: void (const Size newSize);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Ensure that there is enough allocated space for X caracters.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">reserve</a></span>: void (Size minCapacity);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Resize the string to 'len' bytes.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">resize</a></span>: void (const Size len);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Resize the string to 'len' bytes and fill the new content (if any)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">resize</a></span>: void (const Size len, const StringT<b>&amp;</b> pattern);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Releases any memory not required to store the character data.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">shrink</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Perform a full check about UTF8 validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8valid</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Perform a full check about UTF8 validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8valid</a></span>: UTF8::Error (Size<b>&amp;</b> offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Perform a fast check about UTF8 validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8validFast</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Compute the number of UTF-8 characters.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">utf8size</a></span>: Size () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the current size of the string (in bytes)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: Size () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">length</a></span>: Size () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">sizeInBytes</a></span>: size_t () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">the maximum number of characters that the string object can hold (for STL compliance)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">max_size</a></span>: size_t () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the cstr is empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">empty</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the cstr is null.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">null</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string is not empty (the exact opposite of `empty()`)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">notEmpty</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the current capacity of the string (in bytes)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">capacity</a></span>: Size () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">capacityInBytes</a></span>: size_t () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">A pointer to the original cstr (might be NULL)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">c_str</a></span>: const char * () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">A pointer to the original cstr (might be NULL)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">data</a></span>: const char * () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the item at a given position in a safe way.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">data</a></span>: char * ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Formatted buffer <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Reset the current value with a formatted string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">format</a></span>: CString &amp; (const StringT<b>&amp;</b> format, ... );</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append formatted string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">appendFormat</a></span>: CString &amp; (const StringT<b>&amp;</b> format, ... );</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a formatted string to the end of the current string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">vappendFormat</a></span>: void (const char<b>*</b> format, va_list args);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Misc <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first char of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">first</a></span>: char () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the last char of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">last</a></span>: char () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the string matches a simple pattern ('*' only managed)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">glob</a></span>: bool (const StringT<b>&amp;</b> pattern) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert all backslashes into slashes.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">convertBackslashesIntoSlashes</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Convert all slashes into backslashes.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">convertSlashesIntoBackslashes</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Split a string into several segments.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">split</a></span>: void (U&lt; UType, Alloc &gt;<b>&amp;</b> out, const StringT<b>&amp;</b> sep, bool keepEmptyElements, bool trimElements, bool emptyBefore) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Duplicate N times the content of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">duplicate</a></span>: void (int n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Extract the key and its value from a string (mainly provided by TDF files or Ini files)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">extractKeyValue</a></span>: void (StringT1<b>&amp;</b> key, StringT2<b>&amp;</b> value, bool ignoreCase) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Adaptor only <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Adapt from a mere C-String.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">adapt</a></span>: void (const char<b>*</b> cstring, Size length);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Adapt from any known string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">adapt</a></span>: void (const StringT<b>&amp;</b> string);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `[]`, for accessing to a single char (the offset must be valid)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator[]</a></span>: const char &amp; (const Size offset) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `[]`, for accessing to a single char (the offset must be valid)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator[]</a></span>: char &amp; (const Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `+=` (append)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: CString &amp; (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&lt;&lt;` (append)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: CString &amp; (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `=` (assign - copy)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: CString &amp; (const CString<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `=` (assign)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: CString &amp; (const U<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&lt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&gt;`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&gt;</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&lt;=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;=</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `&gt;=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&gt;=</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `==`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: bool (const CString<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `==`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator==</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `!=`.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!=</a></span>: bool (const StringT<b>&amp;</b> rhs) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator `!` (if (!s) ... - equivalent to if (s.empty()))<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">The operator *=, to dupplicate N times the content of the string.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator*=</a></span>: CString &amp; (int n);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">Size for a single chunk. Invalid offset. A non-zero value if the string must be zero terminated. A non-zero value if the string can be expanded. True if the string is a string adapter (only read-only operations are allowed)<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone">The string should remain untouched. The string should be converted to lowercase. char Case<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">POD type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Char</a></span>: <span class="keyword">typedef</span> char;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Type for the POD type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Type</a></span>: <span class="keyword">typedef</span> char;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Ancestor.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">AncestorType</a></span>: <span class="keyword">typedef</span> Private::CStringImpl::Data&lt; ChunkSizeT, ExpandableT, ZeroTerminatedT, char &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Size type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Size</a></span>: <span class="keyword">typedef</span> AncestorType::Size;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Self.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">CStringType</a></span>: <span class="keyword">typedef</span> CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Smartptr.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr &lt; CStringType &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A String vector.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Vector</a></span>: <span class="keyword">typedef</span> std::vector&lt; CStringType &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A String vector.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">VectorPtr</a></span>: <span class="keyword">typedef</span> std::vector&lt; Ptr &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A String list.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">List</a></span>: <span class="keyword">typedef</span> std::list&lt; CStringType &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">A string list.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ListPtr</a></span>: <span class="keyword">typedef</span> std::list&lt; Ptr &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><code><span class="method"><a href="#">WritableType</a></span>: <span class="keyword">typedef</span> CStringType::RetTrue;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone"><code><span class="method"><a href="#">CString</a></span>: typedef;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td></td><td class="doxnone"><code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">append</a></span>: void (const StringT<b>&amp;</b> s, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">append</a></span>: void (const StringT<b>&amp;</b> str, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">assign</a></span>: void (const StringT<b>&amp;</b> str, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">assign</a></span>: void (const StringT<b>&amp;</b> str, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">fill</a></span>: void (typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> pattern);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">indexOf</a></span>: CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size (typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> s) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">insert</a></span>: bool (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">insert</a></span>: bool (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> s, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">insert</a></span>: bool (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const char<b>*</b>const cstr, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">insert</a></span>: bool (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">prepend</a></span>: bool (const StringT<b>&amp;</b> s, const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">overwrite</a></span>: void (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">overwriteRight</a></span>: void (const typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size offset, const StringT<b>&amp;</b> s);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">resize</a></span>: void (typename CString &lt; ChunkSizeT, ExpandableT, ZeroTerminatedT &gt;:: Size len, const StringT<b>&amp;</b> pattern);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected
 <code class="doxygen_visibility">Protected
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign without checking for pointer validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assignWithoutChecking</a></span>: Size (const char<b>*</b>const block, const Size blockSize);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append without checking for pointer validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">appendWithoutChecking</a></span>: Size (const char<b>*</b>const block, const Size blockSize);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append without checking for pointer validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">appendWithoutChecking</a></span>: Size (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Assign without checking for pointer validity.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">assignWithoutChecking</a></span>: Size (const char c);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Adapt without any check.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">adaptWithoutChecking</a></span>: void (const char<b>*</b>const cstring, Size size);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Decal the inner data pointer (must only be used when the class is an adapter)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">decalOffset</a></span>: void (Size count);</code>
</td></tr>
</table>


