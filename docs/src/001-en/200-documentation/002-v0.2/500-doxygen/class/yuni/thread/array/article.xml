<title>Array</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="class" />



<h2><code>Array</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default Constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Array</a></span>:  ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Array</a></span>:  (const Array<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor with a given amount of thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Array</a></span>:  (unsigned int n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Constructor, with a given amount of thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">Array</a></span>:  (unsigned int n, bool autoStart);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>Array</a></span>:  ();</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Settings <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the new thread are automatically started.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">autoStart</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Set if the new thread are automatically started.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">autoStart</a></span>: void (const bool v);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the pointer to a specific thread.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator[]</a></span>: T::Ptr (unsigned int index) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Array &amp; (const Array<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy operator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: Array &amp; (const Ptr<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Array &amp; (const Array<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Array &amp; (T<b>*</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Array &amp; (const typename T::Ptr<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator+=</a></span>: Array &amp; (const Ptr<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Array &amp; (const Array<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Array &amp; (const Ptr<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Array &amp; (T<b>*</b> rhs);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Aggregate.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator&lt;&lt;</a></span>: Array &amp; (const typename T::Ptr<b>&amp;</b> rhs);</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td></td><td class="doxnone">A hard limit value for the number of threads in the pool.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Itself.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ArrayType</a></span>: <span class="keyword">typedef</span> Array &lt; T &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">The most suitable smart pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Ptr</a></span>: <span class="keyword">typedef</span> SmartPtr &lt; ArrayType &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Thread .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadType</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Smart Pointer for the thread.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadPtr</a></span>: <span class="keyword">typedef</span> T::Ptr;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Threading Policy .<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadingPolicy</a></span>: <span class="keyword">typedef</span> Policy::ObjectLevelLockable &lt; ArrayType &gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Thread list.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ThreadList</a></span>: <span class="keyword">typedef</span> std::vector&lt; typename T::Ptr &gt;;</code>
</td></tr>
<tr><td></td><td class="doxnone">Get if this policy is thread-safe.<div class="doxygen_name_spacer"></div>
<code><i>(unmanaged tag: 0)</i></code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public
 <code class="doxygen_visibility">Public
</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Clear the pool (remove all threads)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">clear</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add an existing thread into the container.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">add</a></span>: void (typename T::Ptr thread);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add an existing thread into the container.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">add</a></span>: void (typename T::Ptr thread, bool autostart);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">push_back</a></span>: void (typename T::Ptr thread);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Resize the pool.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">resize</a></span>: void (unsigned int n);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Start all threads.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">start</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Ask to all threads to stop their execution as soon as possible.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">gracefulStop</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Stop all threads.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">stop</a></span>: void (unsigned int timeout);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Restart all threads.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">restart</a></span>: void (unsigned int timeout);</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Wake up all threads.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">wakeUp</a></span>: void ();</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of threads.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: unsigned int () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><code> <span class="method"><a href="#">count</a></span>: unsigned int () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the array is empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">empty</a></span>: bool () <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Execute a predicate for each thread in pool.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">foreachThread</a></span>: void (PredicateT<b>&amp;</b> predicate) <span class="keyword">const</span>;</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Protected
 <code class="doxygen_visibility">Protected
</code></h3>
</td></tr>
<tr><td class="doxygen_var"></td><td class="doxnone">Mutex.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">pMutex</a></span>: Mutex;</code>
</td></tr>
</table>


