<title>LinkedList</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2>A singly linked list</h2>
<h3>Public typedef</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4></h4></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Size</a></span> : unsigned int</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">size_type</a></span> : Size</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">Type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">ValueType</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">value_type</a></span> : T</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">reference_type</a></span> : T&amp;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_reference_type</a></span> : const T&amp;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">pointer_type</a></span> : T*</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_pointer_type</a></span> : const T*</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">iterator</a></span> : IIterator&lt;Iterator, false&gt;</code></td></tr>
<tr><td class="doxygen_index"><code><span class="keyword">typedef</span></code></td><td class="doxygen_index_def"><code><span class="method"><a href="#">const_iterator</a></span> : IIterator&lt;Iterator, true&gt;</code></td></tr>
</table></div>

<h3>Public function</h3>
<div class="doxygen_brief"><table class="nostyle"><tr><td></td><td><h4>Constructors &amp; Destructor</h4></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">LinkedList</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">LinkedList</a></span>(const LinkedList&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">LinkedList</a></span>(const LinkedList&lt;U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">LinkedList</a></span>(const std::list&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">LinkedList</a></span>(const std::vector&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code> </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#"><b> ~ </b>LinkedList</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Iterators &amp; Accessors</h4></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">begin</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const_iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">begin</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">end</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const_iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">end</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>reference_type </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">front</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const_reference_type </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">front</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>reference_type </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">back</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>const_reference_type </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">back</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Find</h4></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const_reference_type value)</code></td></tr>
<tr><td class="doxygen_index"><code>const_iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const U&amp; value) <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>const_iterator </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">find</a></span>(const_reference_type value) <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Add</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(reference_type value)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(const LinkedList&lt;U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(const std::list&lt; U, A&gt; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_back</a></span>(const std::vector&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>()</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(reference_type value)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(const LinkedList&lt;U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(const std::list&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">push_front</a></span>(const std::vector&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">pop_front</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Remove</h4></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">erase</a></span>(iterator&amp; i)</code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(reference_type value)</code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const LinkedList&lt;U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const std::list&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">remove</a></span>(const std::vector&lt; U, A&gt;&amp; rhs)</code></td></tr>
<tr><td class="doxygen_index"><code>void </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">clear</a></span>()</code></td></tr>
<tr><td></td><td><br /><h4>Memory</h4></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">empty</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">notEmpty</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td class="doxygen_index"><code>Size </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">size</a></span>() <span class="keyword">const</span></code></td></tr>
<tr><td></td><td><br /><h4>Operators</h4></td></tr>
<tr><td class="doxygen_index"><code>LinkedList&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator=</a></span>(const LinkedList&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>LinkedList&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator+=</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>LinkedList&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator&lt;&lt;</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>LinkedList&amp; </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator-=</a></span>(const U&amp; value)</code></td></tr>
<tr><td class="doxygen_index"><code>bool </code></td><td class="doxygen_index_def"><code> <span class="method"><a href="#">operator!</a></span>() <span class="keyword">const</span></code></td></tr>
</table></div>

<h2>Detailed Description</h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Size</a></span>: <span class="keyword">typedef</span> unsigned int;
</code>
</div></td></tr><tr id="Size_3811319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Size type (STL compliant)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ size_type</a></span>: <span class="keyword">typedef</span> Size;
</code>
</div></td></tr><tr id="size_type_3821319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Value type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ Type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="Type_3831319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Value type.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ ValueType</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="ValueType_3841319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Value type (STL compliant)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ value_type</a></span>: <span class="keyword">typedef</span> T;
</code>
</div></td></tr><tr id="value_type_3851319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Reference.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ reference_type</a></span>: <span class="keyword">typedef</span> T&amp;;
</code>
</div></td></tr><tr id="reference_type_3861319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Reference (const)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ const_reference_type</a></span>: <span class="keyword">typedef</span> const T&amp;;
</code>
</div></td></tr><tr id="const_reference_type_3871319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Pointer.<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ pointer_type</a></span>: <span class="keyword">typedef</span> T*;
</code>
</div></td></tr><tr id="pointer_type_3881319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Pointer (const)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ const_pointer_type</a></span>: <span class="keyword">typedef</span> const T*;
</code>
</div></td></tr><tr id="const_pointer_type_3891319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief">Iterator (STL compliant)<br /><div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">+ iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Iterator, false&gt;;
</code>
</div></td></tr><tr id="iterator_3901319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><div class="doxygen_brief"><code><span class="method"><a href="#">+ const_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Iterator, true&gt;;
</code>
</div></td></tr><tr id="const_iterator_3911319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Default Constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ LinkedList</a></span>:  ();
</code>
</div></td></tr><tr id="LinkedList_3921319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ LinkedList</a></span>:  (const LinkedList&amp; rhs);
</code>
</div></td></tr><tr id="LinkedList_3931319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor from another linked list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="LinkedList_3941319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ LinkedList</a></span>:  (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="LinkedList_3941319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor from a standard std::list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="LinkedList_3951319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ LinkedList</a></span>:  (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="LinkedList_3951319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Copy constructor from a standard std::vector.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="LinkedList_3961319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ LinkedList</a></span>:  (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="LinkedList_3961319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Destructor.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ <b> ~ </b>LinkedList</a></span>:  ();
</code>
</div></td></tr><tr id="~LinkedList_3971319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators &amp; Accessors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ begin</a></span>: iterator ();
</code>
</div></td></tr><tr id="begin_3981319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ begin</a></span>: const_iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="begin_3991319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ end</a></span>: iterator ();
</code>
</div></td></tr><tr id="end_4001319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ end</a></span>: const_iterator () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="end_4011319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first item.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ front</a></span>: reference_type ();
</code>
</div></td></tr><tr id="front_4021319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ front</a></span>: const_reference_type () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="front_4031319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the last item.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ back</a></span>: reference_type ();
</code>
</div></td></tr><tr id="back_4041319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get an iterator at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ back</a></span>: const_reference_type () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="back_4051319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Find <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first item equal to a given value.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="find_4061319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ find</a></span>: iterator (const U&amp; value);
</code>
</div></td></tr><tr id="find_4061319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  An iterator to the item found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first item equal to a given value.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ find</a></span>: iterator (const_reference_type value);
</code>
</div></td></tr><tr id="find_4071319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  An iterator to the item found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first item equal to a given value.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="find_4081319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ find</a></span>: const_iterator (const U&amp; value) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="find_4081319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  An iterator to the item found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the first item equal to a given value.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ find</a></span>: const_iterator (const_reference_type value) <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="find_4091319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  An iterator to the item found<br /></div><br />
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Add <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the end of the list (default constructor)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_back</a></span>: void ();
</code>
</div></td></tr><tr id="push_back_4101319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_back_4111319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ push_back</a></span>: void (const U&amp; value);
</code>
</div></td></tr><tr id="push_back_4111319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the end of the list (default constructor)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_back</a></span>: void (reference_type value);
</code>
</div></td></tr><tr id="push_back_4121319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_back_4131319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_back</a></span>: void (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="push_back_4131319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_back_4141319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_back</a></span>: void (const std::list&lt; U, A&gt; rhs);
</code>
</div></td></tr><tr id="push_back_4141319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_back_4151319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_back</a></span>: void (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="push_back_4151319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the beginning of the list (default constructor)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_front</a></span>: void ();
</code>
</div></td></tr><tr id="push_front_4161319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the begining of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_front_4171319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ push_front</a></span>: void (const U&amp; value);
</code>
</div></td></tr><tr id="push_front_4171319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a value at the end of the list (default constructor)<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ push_front</a></span>: void (reference_type value);
</code>
</div></td></tr><tr id="push_front_4181319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_front_4191319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_front</a></span>: void (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="push_front_4191319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_front_4201319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_front</a></span>: void (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="push_front_4201319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Add a list of values at the beginning of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="push_front_4211319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ push_front</a></span>: void (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="push_front_4211319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove the first element.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ pop_front</a></span>: void ();
</code>
</div></td></tr><tr id="pop_front_4221319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Remove <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove the item pointed to by the iterator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ erase</a></span>: void (iterator&amp; i);
</code>
</div></td></tr><tr id="erase_4231319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove any item equal to a given value.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="remove_4241319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ remove</a></span>: Size (const U&amp; value);
</code>
</div></td></tr><tr id="remove_4241319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><source type="cpp">  Yuni::LinkedList&lt;int&gt;  list;
  list. push_back (10);
  list. push_back (42);
  list. remove (42);
</source>
<br /><source type="cpp">  struct  PredicateRemove
  {
         bool  operator == ( const  int &amp;  rhs)  const
         {
             return  !(rhs  %  2);
         }
  };

  int  main( void )
  {
     Yuni::LinkedList&lt;int&gt;   list;
     list  &lt;&lt;  10  &lt;&lt;  11  &lt;&lt;  2  &lt;&lt;  42;
     list. remove (PredicateRemove());
     return  0;
  }
</source>
<br /><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  The count of deleted items<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove the item pointed to by the iterator.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ remove</a></span>: Size (reference_type value);
</code>
</div></td></tr><tr id="remove_4251319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove any item equal to a value in the given list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="remove_4261319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ remove</a></span>: Size (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="remove_4261319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> A list of values to remove<br /></li></ul><div><code>return</code>  The number of items that have been removed<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove any item equal to a value in the given list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="remove_4271319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ remove</a></span>: Size (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="remove_4271319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> A list of values to remove<br /></li></ul><div><code>return</code>  The number of items that have been removed<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove any item equal to a value in the given list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="remove_4281319844517_tmpl"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">+ remove</a></span>: Size (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</div></td></tr><tr id="remove_4281319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> rhs</code> A list of values to remove<br /></li></ul><div><code>return</code>  The number of items that have been removed<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all items at once.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ clear</a></span>: void ();
</code>
</div></td></tr><tr id="clear_4291319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Memory <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the container is empty.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="empty_4301319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the container is empty, false otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get if the container is not empty.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ notEmpty</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="notEmpty_4311319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div><code>return</code>  True if the container is not empty, false otherwise<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Get the number of items in the container.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ size</a></span>: Size () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="size_4321319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">
</div>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Clear then add the value.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator=</a></span>: LinkedList&amp; (const LinkedList&amp; value);
</code>
</div></td></tr><tr id="operator=_4331319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to copy<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a new item at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator+=_4341319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ operator+=</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</div></td></tr><tr id="operator+=_4341319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to copy and add<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Append a new item at the end of the list.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator<<_4351319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ operator&lt;&lt;</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</div></td></tr><tr id="operator<<_4351319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to copy and add<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Remove all items equal to 'value'.<br /><div class="doxygen_name_spacer"></div>
<code><div class="doxygen_tmpllist" id="operator_=_4361319844517_tmpl"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">+ operator-=</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</div></td></tr><tr id="operator_=_4361319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc"><div class="doxygen_params">Parameters :</div><ul><li><code> value</code> The value to look for<br /></li></ul><div><code>return</code>  Always *this<br /></div><br />
</div>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone"><div class="doxygen_brief">Check if the container is empty.<br /><div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">+ operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</div></td></tr><tr id="operator!_4371319844517_desc"><td class="doxnone doxreturn"></td><td class="doxnone">
<div class="doxygen_name_spacer"></div>
<div class="doxygen_desc">This operator is strictly equivalent to the method 'empty()'<div><code>return</code>  True if the container is empty, false otherwise<br /></div><br />
</div>
</td></tr>
</table>


