<title>LinkedList</title>
<pragma:weight value="0.5" />
<pragma:toc visible="false" />
<tag name="doxygen" />
<tag name="dox:class" />



<h2><code>LinkedList</code></h2><table class="doxygen_table">
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Constructors &amp; Destructor <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Default Constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">LinkedList</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">LinkedList</a></span>:  (const LinkedList&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor from another linked list.<div class="doxygen_name_spacer"></div>
<code><div id="LinkedList_3881319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">LinkedList</a></span>:  (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor from a standard std::list.<div class="doxygen_name_spacer"></div>
<code><div id="LinkedList_3891319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">LinkedList</a></span>:  (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Copy constructor from a standard std::vector.<div class="doxygen_name_spacer"></div>
<code><div id="LinkedList_3901319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">LinkedList</a></span>:  (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Destructor.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#"><b> ~ </b>LinkedList</a></span>:  ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Iterators &amp; Accessors <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: iterator ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">begin</a></span>: const_iterator () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the end of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: iterator ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">end</a></span>: const_iterator () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first item.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">front</a></span>: reference_type ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">front</a></span>: const_reference_type () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the last item.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">back</a></span>: reference_type ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get an iterator at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">back</a></span>: const_reference_type () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Find <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first item equal to a given value.<div class="doxygen_name_spacer"></div>
<code><div id="find_4001319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">find</a></span>: iterator (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first item equal to a given value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: iterator (const_reference_type value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first item equal to a given value.<div class="doxygen_name_spacer"></div>
<code><div id="find_4021319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">find</a></span>: const_iterator (const U&amp; value) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the first item equal to a given value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">find</a></span>: const_iterator (const_reference_type value) <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Add <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the end of the list (default constructor)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_back</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_back_4051319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">push_back</a></span>: void (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the end of the list (default constructor)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_back</a></span>: void (reference_type value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_back_4071319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_back</a></span>: void (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_back_4091319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_back</a></span>: void (const std::list&lt; U, A&gt; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_back_4111319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_back</a></span>: void (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the beginning of the list (default constructor)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_front</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the begining of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_front_4131319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">push_front</a></span>: void (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a value at the end of the list (default constructor)<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">push_front</a></span>: void (reference_type value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_front_4161319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_front</a></span>: void (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_front_4171319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_front</a></span>: void (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Add a list of values at the beginning of the list.<div class="doxygen_name_spacer"></div>
<code><div id="push_front_4181319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">push_front</a></span>: void (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the first element.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">pop_front</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Remove <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the item pointed to by the iterator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">erase</a></span>: void (iterator&amp; i);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove any item equal to a given value.<div class="doxygen_name_spacer"></div>
<code><div id="remove_4211319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">remove</a></span>: Size (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove the item pointed to by the iterator.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">remove</a></span>: Size (reference_type value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove any item equal to a value in the given list.<div class="doxygen_name_spacer"></div>
<code><div id="remove_4231319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">remove</a></span>: Size (const LinkedList&lt;U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove any item equal to a value in the given list.<div class="doxygen_name_spacer"></div>
<code><div id="remove_4241319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">remove</a></span>: Size (const std::list&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove any item equal to a value in the given list.<div class="doxygen_name_spacer"></div>
<code><div id="remove_4251319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U , class A &gt;</div>
 <span class="method"><a href="#">remove</a></span>: Size (const std::vector&lt; U, A&gt;&amp; rhs);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all items at once.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">clear</a></span>: void ();
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Memory <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the container is empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">empty</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get if the container is not empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">notEmpty</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Get the number of items in the container.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">size</a></span>: Size () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Operators <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Clear then add the value.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator=</a></span>: LinkedList&amp; (const LinkedList&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a new item at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="operator+=_4311319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">operator+=</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Append a new item at the end of the list.<div class="doxygen_name_spacer"></div>
<code><div id="operator<<_4321319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">operator&lt;&lt;</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Remove all items equal to 'value'.<div class="doxygen_name_spacer"></div>
<code><div id="operator_=_4331319137232_templ" style="display:none"><span class="keyword">template</span>&lt;class U &gt;</div>
 <span class="method"><a href="#">operator-=</a></span>: LinkedList&amp; (const U&amp; value);
</code>
</td></tr>
<tr><td class="doxygen_fun"></td><td class="doxnone">Check if the container is empty.<div class="doxygen_name_spacer"></div>
<code> <span class="method"><a href="#">operator!</a></span>: bool () <span class="keyword">const</span>;
</code>
</td></tr>
<tr><td class="doxnone"></td><td class="doxnone"><h3 class="doxygen_section">Public <code class="doxygen_visibility">Public</code></h3>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Size type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Size</a></span>: <span class="keyword">typedef</span> unsigned int;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Size type (STL compliant)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">size_type</a></span>: <span class="keyword">typedef</span> Size;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Value type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">Type</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Value type.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">ValueType</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Value type (STL compliant)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">value_type</a></span>: <span class="keyword">typedef</span> T;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Reference.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">reference_type</a></span>: <span class="keyword">typedef</span> T&amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Reference (const)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_reference_type</a></span>: <span class="keyword">typedef</span> const T&amp;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer.<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">pointer_type</a></span>: <span class="keyword">typedef</span> T*;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Pointer (const)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">const_pointer_type</a></span>: <span class="keyword">typedef</span> const T*;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone">Iterator (STL compliant)<div class="doxygen_name_spacer"></div>
<code><span class="method"><a href="#">iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Iterator, false&gt;;</code>
</td></tr>
<tr><td class="doxygen_typedef"></td><td class="doxnone"><code><span class="method"><a href="#">const_iterator</a></span>: <span class="keyword">typedef</span> IIterator&lt;Iterator, true&gt;;</code>
</td></tr>
</table>


