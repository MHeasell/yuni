<title>Node</title>
<pragma:weight value="0.5" />
<tag name="doxygen" />
<tag name="class" />



<h2>Summary of the class <code>Node</code></h2><table class="nostyle">
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Parent of the node</h3>
<p class="doxygen_fun">Get the parent of the node.<br />
<code>Ptr <span class="method"><a href="#">parent</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Get the parent of the node.<br />
<code>Ptr <span class="method"><a href="#">parent</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">ReAttach to another parent.<br />
<code>void <span class="method"><a href="#">parent</a></span>(Ptr newParent);</code></p>
<p class="doxygen_fun">Detach the node from its parent.<br />
<code>void <span class="method"><a href="#">detachFromParent</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Adding</h3>
<p class="doxygen_fun">Append a child node to the end of the list.<br />
<code>void <span class="method"><a href="#">append</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Append a child node to the end of the list.<br />
<code>void <span class="method"><a href="#">append</a></span>(Node<b>*</b> node);</code></p>
<p class="doxygen_fun">Append a child node at the end.<br />
<code>void <span class="method"><a href="#">push_back</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Append a child node to the end of the list.<br />
<code>void <span class="method"><a href="#">push_back</a></span>(Node<b>*</b> node);</code></p>
<p class="doxygen_fun">Append a child node at the begining.<br />
<code>void <span class="method"><a href="#">push_front</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Append a child node to the end of the list.<br />
<code>void <span class="method"><a href="#">push_front</a></span>(Node<b>*</b> node);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Removing</h3>
<p class="doxygen_fun">Remove all children.<br />
<code>void <span class="method"><a href="#">clear</a></span>();</code></p>
<p class="doxygen_fun">Remove a child node.<br />
<code>bool <span class="method"><a href="#">remove</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Remove the n-th child of the node.<br />
<code>bool <span class="method"><a href="#">remove</a></span>(const SizeType index);</code></p>
<p class="doxygen_fun">Remove all children.<br />
<code>bool <span class="method"><a href="#">remove</a></span>(const SignedSizeType index);</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Searching</h3>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>iterator <span class="method"><a href="#">begin</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const iterator <span class="method"><a href="#">begin</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Return iterator to the last child of the node.<br />
<code>iterator <span class="method"><a href="#">end</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const iterator <span class="method"><a href="#">end</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Find the n-th child of the node.<br />
<code>Ptr <span class="method"><a href="#">find</a></span>(const SizeType index);</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>Ptr <span class="method"><a href="#">find</a></span>(const SignedSizeType index);</code></p>
<p class="doxygen_fun">Get if the node has children.<br />
<code>bool <span class="method"><a href="#">empty</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>SizeType <span class="method"><a href="#">count</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Alias for count()<br />
<code>SizeType <span class="method"><a href="#">size</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Get the first child.<br />
<code>Ptr <span class="method"><a href="#">firstChild</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const Ptr <span class="method"><a href="#">firstChild</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the last child.<br />
<code>Ptr <span class="method"><a href="#">lastChild</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const Ptr <span class="method"><a href="#">lastChild</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the previous sibling.<br />
<code>Ptr <span class="method"><a href="#">previousSibling</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const Ptr <span class="method"><a href="#">previousSibling</a></span>() <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the next sibling.<br />
<code>Ptr <span class="method"><a href="#">nextSibling</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Return iterator to the first child of the node.<br />
<code>const Ptr <span class="method"><a href="#">nextSibling</a></span>() <span class="keyword">const</span>; [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Extra</h3>
<p class="doxygen_fun">Get if the node is a leaf.<br />
<code>bool <span class="method"><a href="#">leaf</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Computes the depth of this node.<br />
<code>SizeType <span class="method"><a href="#">depth</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Computes the height from this node.<br />
<code>SizeType <span class="method"><a href="#">treeHeight</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Comparisons</h3>
<p class="doxygen_fun">Test if the current node is equals to another one.<br />
<code>bool <span class="method"><a href="#">equals</a></span>(const Ptr<b>&amp;</b> node) <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Z-Order</h3>
<p class="doxygen_fun">Move the node to the end.<br />
<code>void <span class="method"><a href="#">bringToFront</a></span>();</code></p>
<p class="doxygen_fun">Move the node to the begining.<br />
<code>void <span class="method"><a href="#">sendToBack</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Public</h3>
<p class="doxygen_fun">Schedule an asynchronous update of the item (depending upon the implementation)<br />
<code>void <span class="method"><a href="#">invalidate</a></span>();</code></p>
<p class="doxygen_fun">Get if the item is invalidated (depending upon the implementation)<br />
<code>bool <span class="method"><a href="#">isInvalidated</a></span>();</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Operators</h3>
<p class="doxygen_fun">Append a child at the end.<br />
<code>Node &amp; <span class="method"><a href="#">operator+=</a></span>(Ptr<b>&amp;</b> node); [inline]</code></p>
<p class="doxygen_fun">Append a child at the end.<br />
<code>Node &amp; <span class="method"><a href="#">operator+=</a></span>(Node<b>*</b> node); [inline]</code></p>
<p class="doxygen_fun">Remove a child node.<br />
<code>Node &amp; <span class="method"><a href="#">operator-=</a></span>(Ptr<b>&amp;</b> node); [inline]</code></p>
<p class="doxygen_fun">Append a child at the end.<br />
<code>Node &amp; <span class="method"><a href="#">operator&lt;&lt;</a></span>(Ptr<b>&amp;</b> node); [inline]</code></p>
<p class="doxygen_fun">Append a child at the end.<br />
<code>Node &amp; <span class="method"><a href="#">operator&lt;&lt;</a></span>(Node<b>*</b> node); [inline]</code></p>
<p class="doxygen_fun">Comparison with another node.<br />
<code>Node &amp; <span class="method"><a href="#">operator==</a></span>(const Ptr<b>&amp;</b> node) <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun">Get the n-th child of the node.<br />
<code>Ptr <span class="method"><a href="#">operator[]</a></span>(const SizeType index); [inline]</code></p>
<p class="doxygen_fun">Get the n-th child of the node.<br />
<code>Ptr <span class="method"><a href="#">operator[]</a></span>(const SignedSizeType index); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public</div></td>
<td><h3 class="h3noleftspace">Pointer management</h3>
<p class="doxygen_fun">Increment the internal reference counter.<br />
<code>void <span class="method"><a href="#">addRef</a></span>() <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Decrement the internal reference counter.<br />
<code>void <span class="method"><a href="#">release</a></span>() <span class="keyword">const</span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p>A markdown document. A document header. TOC (Table Of Content) Body for a document. Header (level 1, block) Header (level 2, block) Header (level 3, block) Header (level 4, block) Header (level 5, block) Header (level 6, block) Raw text. Paragraph. Quote. Emphasis. Bold (inline) Horizontal line. Unordered list. Ordered list. List item (ordered or unordered) Line break (br) Pragma directive. Number of items. Type for a single node.<br />
<code><i>(unmanaged tag)</i></code></p>
<p class="doxygen_typedef">Our ancestor.<br />
<code><span class="keyword">typedef</span> Core::TreeN &lt; Node , Policy::SingleThreaded &gt; <span class="method"><a href="#">AncestorType</a></span>;</code></p>
<p class="doxygen_typedef">Smart pointer.<br />
<code><span class="keyword">typedef</span> AncestorType::Ptr <span class="method"><a href="#">Ptr</a></span>;</code></p>
<p class="doxygen_typedef">Node.<br />
<code><span class="keyword">typedef</span> Node <span class="method"><a href="#">Node</a></span>;</code></p>
<p class="doxygen_typedef">The template class tree node.<br />
<code><span class="keyword">typedef</span> TreeN&lt; Node , Policy::SingleThreaded , Policy::Checking::None , Policy::Conversion::Allow &gt; <span class="method"><a href="#">TreeNNode</a></span>;</code></p>
<p class="doxygen_typedef">The threading policy.<br />
<code><span class="keyword">typedef</span> Policy::SingleThreaded &lt; TreeNNode &gt; <span class="method"><a href="#">ThreadingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">A thread-safe node type.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; Node , Policy::Ownership::COMReferenceCounted , Policy::Checking::None , Policy::Conversion::Allow &gt; <span class="method"><a href="#">PtrThreadSafe</a></span>;</code></p>
<p class="doxygen_typedef">A default node type.<br />
<code><span class="keyword">typedef</span> SmartPtr &lt; Node , Policy::Ownership::COMReferenceCounted , Policy::Checking::None , Policy::Conversion::Allow &gt; <span class="method"><a href="#">PtrSingleThreaded</a></span>;</code></p>
<p class="doxygen_typedef">The Storage policy.<br />
<code><span class="keyword">typedef</span> Ptr::StoragePolicy <span class="method"><a href="#">StoragePolicy</a></span>;</code></p>
<p class="doxygen_typedef">The Ownership policy.<br />
<code><span class="keyword">typedef</span> Ptr::OwnershipPolicy <span class="method"><a href="#">OwnershipPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The conversion policy.<br />
<code><span class="keyword">typedef</span> Ptr::ConversionPolicy <span class="method"><a href="#">ConversionPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The checking policy.<br />
<code><span class="keyword">typedef</span> Ptr::CheckingPolicy <span class="method"><a href="#">CheckingPolicy</a></span>;</code></p>
<p class="doxygen_typedef">The Constness policy.<br />
<code><span class="keyword">typedef</span> Ptr::ConstnessPolicy <span class="method"><a href="#">ConstnessPolicy</a></span>;</code></p>
<p class="doxygen_typedef">A const Pointer.<br />
<code><span class="keyword">typedef</span> Ptr::ConstSmartPtrType <span class="method"><a href="#">ConstPtr</a></span>;</code></p>
<p class="doxygen_typedef">A non-const pointer.<br />
<code><span class="keyword">typedef</span> Ptr::NonConstSmartPtrType <span class="method"><a href="#">NonConstPtr</a></span>;</code></p>
<p class="doxygen_typedef">Size.<br />
<code><span class="keyword">typedef</span> unsigned int <span class="method"><a href="#">SizeType</a></span>;</code></p>
<p class="doxygen_typedef">Size (signed)<br />
<code><span class="keyword">typedef</span> int <span class="method"><a href="#">SignedSizeType</a></span>;</code></p>
<p class="doxygen_typedef">A vector of nodes (std::vector)<br />
<code><span class="keyword">typedef</span> std::vector&lt; Ptr &gt; <span class="method"><a href="#">Vector</a></span>;</code></p>
<p class="doxygen_typedef">A list of nodes (std::list)<br />
<code><span class="keyword">typedef</span> std::list&lt; Ptr &gt; <span class="method"><a href="#">List</a></span>;</code></p>
<p>Get if this policy is thread-safe.<br />
<code><i>(unmanaged tag)</i></code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_var"><code>Type <span class="method"><a href="#">type</a></span>;</code></p>
<p class="doxygen_var">Text of the node.<br />
<code>String <span class="method"><a href="#">innerText</a></span>;</code></p>
<p class="doxygen_var">ID of the node.<br />
<code>String <span class="method"><a href="#">id</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun">Convert a node type into a mere c-string.<br />
<code><span class="keyword">static</span> const char * <span class="method"><a href="#">TypeToCString</a></span>(Type t); [inline]</code></p>
<p class="doxygen_fun">Get if a type is a block.<br />
<code><span class="keyword">static</span> bool <span class="method"><a href="#">ShouldAppendAParagraphNode</a></span>(Type t); [inline]</code></p>
</td></tr>
<tr><td><div class="visibility">Public
</div></td>
<td><h3 class="h3noleftspace">Public
</h3>
<p class="doxygen_fun"><code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Node</a></span>(); [inline]</code></p>
<p class="doxygen_fun"><code> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Node</a></span>(const Type t); [inline]</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;class StringT &gt;<br /> <span class="method"><a href="#">constructor</a></span> <span class="method"><a href="#">Node</a></span>(const Type t, const StringT<b>&amp;</b> text); [inline]</code></p>
<p class="doxygen_fun"><code> <span class="method"><a href="#">destructor</a></span> <span class="method"><a href="#"><b> ~ </b>Node</a></span>(); [inline]</code></p>
<p class="doxygen_fun"><code><span class="keyword">template</span>&lt;class StreamT &gt;<br />void <span class="method"><a href="#">dump</a></span>(StreamT<b>&amp;</b> out, unsigned int level) <span class="keyword">const</span>; [inline]</code></p>
<p class="doxygen_fun"><code>void <span class="method"><a href="#">flattenText</a></span>(String<b>&amp;</b> out) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Print the entire tree to the output stream.<br />
<code>std::ostream &amp; <span class="method"><a href="#">print</a></span>(std::ostream<b>&amp;</b> out, const bool recursive, const unsigned int level);</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_var">Parent.<br />
<code>Node * <span class="method"><a href="#">pParent</a></span>;</code></p>
<p class="doxygen_var">How many children do we have ?<br />
<code>SizeType <span class="method"><a href="#">pChildrenCount</a></span>;</code></p>
<p class="doxygen_var">The previous sibling.<br />
<code>Ptr <span class="method"><a href="#">pPreviousSibling</a></span>;</code></p>
<p class="doxygen_var">The next sibling.<br />
<code>Ptr <span class="method"><a href="#">pNextSibling</a></span>;</code></p>
<p class="doxygen_var">The first child.<br />
<code>Ptr <span class="method"><a href="#">pFirstChild</a></span>;</code></p>
<p class="doxygen_var">The last child.<br />
<code>Ptr <span class="method"><a href="#">pLastChild</a></span>;</code></p>
</td></tr>
<tr><td><div class="visibility">Protected
</div></td>
<td><h3 class="h3noleftspace">Protected
</h3>
<p class="doxygen_fun">Invalidate the item.<br />
<code>void <span class="method"><a href="#">invalidateWL</a></span>(); [inline]</code></p>
<p class="doxygen_fun">Get if the item is invalidated.<br />
<code>bool <span class="method"><a href="#">isInvalidatedWL</a></span>(); [inline]</code></p>
<p class="doxygen_fun">(only used for debugging)<br />
<code>void <span class="method"><a href="#">printBeginWL</a></span>(std::ostream<b>&amp;</b> out, const unsigned int level) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">(only used for debugging)<br />
<code>void <span class="method"><a href="#">printEndWL</a></span>(std::ostream<b>&amp;</b> out, const unsigned int level) <span class="keyword">const</span>;</code></p>
<p class="doxygen_fun">Remove all children.<br />
<code>void <span class="method"><a href="#">clearWL</a></span>();</code></p>
<p class="doxygen_fun">Append a child to the end of the list.<br />
<code>void <span class="method"><a href="#">pushBackWL</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Append a child to the end of the list.<br />
<code>void <span class="method"><a href="#">pushFrontWL</a></span>(Ptr<b>&amp;</b> node);</code></p>
<p class="doxygen_fun">Detach from the parent.<br />
<code>void <span class="method"><a href="#">detachFromParentWL</a></span>();</code></p>
<p class="doxygen_fun">Find a child node from its index (slow)<br />
<code>Ptr <span class="method"><a href="#">findFromIndexWL</a></span>(const SizeType index);</code></p>
</td></tr>
</table>


<h2>Detailed Description</h2>
