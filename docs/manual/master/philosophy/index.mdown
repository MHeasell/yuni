title: Philosophy
---


Philosphy
=========

Values
------

The Yuni team believes it is important to be clear as to what is important to
us. Stating clearly the values we believe in helps to be consistent in technical
and philosophical choices for Yuni.

 * **Efficiency**: We want Yuni to be fast. At least as fast as alternatives,
   and faster whenever possible.

 * **Portability**: The code must be portable and work seamlessly on every supported
   platform. The only exception is UI, where windows and controls must follow the
   visual codes of the host OS. Yuni also provides defines to help you manage your
   own non-portable code.

 * **Elegance**: We want Yuni to be elegant both in how it is written and in the
   interfaces it offers to users. Beautiful code is more easily debugged and maintained.
   A nice API encourages use. We also follow a strict coding style to ensure code
   legibility and homogeneity.

 * **Abstraction**: Most of the time, you do not care how a feature is implemented
   behind the curtains. You want an interface that matches your mental representation
   of the concepts you handle. The API has to use the correct vocabulary and
   structure to help you understand what it does (not how it does it).

 * **Modularity**: Features in Yuni are mostly independent. You can choose to use
   only what you need by including and linking with a strict minimum instead of the
   whole thing. This means you do not have to pay for anything you do not use
   (which is a very important asset allowed by C++). When some features rely on
   other features, the fact should be clearly documented.

 * **Completeness**: When dealing with a topic in Yuni, the whole topic should be
   covered. If any hole is left in the code (temporarily or permanently), a clear
   reason must be provided.

 * **Versatility**: Yuni must be able to adapt to your needs. We do that by offering
   statically configurable classes (using templates, and particularly policies),
   dynamically configurable behaviours (using method arguments), and by providing
   an extension mechanism that you can use to add features to some Yuni objects.
   Also, Yuni adapts to your level by offering good default values for beginners who
   want basic functionality, and complete configurable behaviour for advanced users
   who want to access all the power inside.


Structure
---------

Yuni's structure is a direct consequence of the values we believe in. Yuni is a set
of libraries because it allows for modularity. Yuni hides useless classes into
`Private` namespaces to avoid cluttering the API for more elegance. Yuni has compiled
libraries in some cases, and static libraries that have to be included in your
code when the need for versatility and / or efficiency arises.

Yuni is split into modules. The two main modules are `core` and "thread" which
are required dependencies for all the other modules. All the other modules are
optional and can be used on a case-by-case basis.


Love is in the small things
---------------------------

We want Yuni to be useful for all kinds of projects, and for all kinds of
developers. This is why we put a lot of attention to details. For example, we always
offer default values for optional method arguments (or template arguments). Of course
if you simply want to use the default behaviour, you could write :

	class MyEventLoop : public Yuni::Core::EventLoop::IEventLoop<MyEventLoop>
	{
		Yuni::String pMyString;
	};


But if you want to have full control over how to create your Yuni objects and do:

	class MyEventLoop : public Yuni::Core::EventLoop::IEventLoop<MyEventLoop,
		Yuni::Core::EventLoop::Flow::Timer<MyEventLoop>,
		Yuni::Core::EventLoop::Statistics::None,
		false>
	{
		Yuni::CustomString<256,false> pMyString;
	};


Well you can. Because we care about you.

Also, many other libraries will ask for exterior dependencies and will require
that you install them yourself using a package system, using a binary install, or worse,
by compiling the tarball yourself. Just like any other library, Yuni has requirements
for its use, but we do all we can to alleviate the load from your backs. First, those
libraries are linked to a feature, so if you do not want the feature, Yuni will not ask
you to have the library. Let's say for example that you are writing a command line task
scheduler. Why should we force you to have ffmpeg installed when you clearly
will not need audio ? We don't.


Second, if you end up really needing a feature, then it's up to us to make sure
that installing a compatible version of the required libraries will not be a
problem to you, will not break your system and will not take too much of your time.
The answer to that is DevPacks. Yuni will automatically download the DevPacks you
need depending on the features you asked for when launching CMake. It will not
install these library versions on your system, it will just keep them handy in
your project directory for its own use. What about the few people who do not
have Internet ? They can just go get the DevPack they need on someone else's
connection and then copy the file in the proper folder.
Yes, we cater to everyone, to the best of our ability.


Helping people to like C++
--------------------------

This is a list of things that are often pointed as "bad" about the C++ language.
It is by no means objective or complete, but will serve as a support to explain
how Yuni intends to help you write applications in C++.

 1. Pointers lead to problematic memory management; C++ has no garbage collection
 2. High-level code in C++ hides inefficiency in apparently simple constructs
 3. Over-complicated, difficult to master
 4. Too low-level because of its C legacy
 5. Lack of multi-threaded support, external APIs create portability issues
 6. The STL is not efficient, its prototypes / coding style are ugly

All those are reasonably valid points. Now here is how Yuni tries to compensate
for these drawbacks:

 1. Yuni offers [Smart Pointers][smartptr], which bring easier and safer memory
    management. They also avoid memory leaks without the massive overhead of a
	garbage collector.
 2. Efficiency being one of our prime concerns, Yuni's code is supposed to be
    reasonably fast. However incorrect use of a given feature can lead to
	inefficiency. The only way to alleviate this problem is for us to document
	proper uses of the various classes and methods.
 3. It is true that C++ can be very complicated to read, understand and debug.
    Yuni encapsulates most of the difficult code inside, well hidden in its
	bowels, and tries to offer you an easy yet powerful interface.
 4. C++ can be very low-level. But it does not have to be. Yuni offers some
    high-level concepts that are missing from C++ to help you think and code
	more abstractly : delegates, events, singletons, jobs. Also it
	encapsulates low-level routines inside OO interfaces :
	math, string, getopt, io, ...
 5. C++ has no native MT support in the language, and there is not much we
    can do about that. Also, few people are willing to write cross-platform
	threading support since it is a hassle and implicates very error-prone
	code. So Yuni does it for you.
 6. Some STL implementations are known to be slow, so in some cases Yuni
    offers its own faster implementations using more readable prototypes,
	in accordance with the Yuni coding style.



smartptr: ../concepts/smartptr/ "Smart Pointers concept"

