
						OPENGL VERSUS DIRECTX

Preamble:
---------

This document is meant as a reference for similarities and differences
between DirectX and OpenGL. It can help design code that will work on
both frameworks and will allow us to recognize which parts absolutely
have to be framework-dependent. Also, it will be a support for abstraction
of concepts.


Mesh display:
-------------

Mesh display is very similar in both APIs, so we will be mainly interested
in where they diverge. The principle behind vertex buffers is to store the
vertices we want to display in a buffer, possibly stored in hardware.


						DirectX									OpenGL

Name they use:
					Vertex Buffers							Vertex Buffer Objects (VBO)

Creation:
					HRESULT CreateVertexBuffer(				GLvoid glGenBuffers(
						UINT length,							GLsizei n,
						DWORD usage, // usage, see below		GLuint* buffers);
						DWORD FVF, // format
						D3DPOOL pool, // pool, see below
						IDirect3DVertexBuffer9** vBuf,
						HANDLE* handle);

Buffering data:
					HRESULT Lock(							glBindBuffer();
	   					unsigned int offsetToLock,			glBufferData();
						unsigned int sizeToLock,			glMapBuffer();
						void** data,						memset(...);
						DWORD flags							glUnmapBuffer();
						);									glVertexPointer();
					memset(...);
					HRESULT Unlock(void);


Displaying:
		TODO

Options:
					D3DUSAGE_DYNAMIC						GL_STREAM_DRAW
					D3DUSAGE_WRITEONLY						GL_DYNAMIC_DRAW
					D3DUSAGE_SOFTWAREPROCESSING				GL_STATIC_DRAW
					D3DPOOL_DEFAULT	// In hardware mem
					D3DPOOL_MANAGED // In system mem


Summary of interesting points :
-------------------------------
 * DirectX requires the device pointer for its API calls; OpenGL requires for the context to be active.
 * There are various scenarii for vertex buffer use, namely : software or hardware storage, static or dynamic usage, and read-only, write-only, or read-write.
