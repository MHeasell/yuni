
Concepts
========

Description
-----------

This section will deal with some important concepts in Yuni. Some may already be familiar to you, and others may be new. These concepts were not invented by the Yuni team, but they are fundamental to the understanding of how Yuni works, and therefore to the correct use of Yuni.


Policies
--------

### The Strategy pattern

Some of you may already be familiar with the Strategy design pattern. It allows for an algorithm to be composited using "bricks". This means that for a given feature, we want to provide several exchangeable behaviours.

For example, we can imagine a few ways to grant an access or not :

	struct IAllowAccessStrategy
	{
		virtual bool allowed(cont char* user, const char* pass) = 0;
	};

	struct Never: public IAllowAccessStrategy
	{
		virtual bool allowed(cont char* user, const char* pass)
		{
			return false;
		}
	};

	struct Always: public IAllowAccessStrategy
	{
		virtual bool allowed(cont char* user, const char* pass)
		{
			return true;
		}
	};

	struct CheckValidAccount: public IAllowAccessStrategy
	{
		virtual bool allowed(cont char* user, const char* pass)
		{
			return PasswordManager.IsValidAccount(user, pass);
		}
	};

We can see that to implement the typical Strategy pattern, all possible behaviours have to inherit a common strategy. That is because the call will look like this :

	class AccountManager
	{
	public:
		// [snip constructors and inits]

		bool connectUser(const char* user, const char* pass)
		{
			if (pNbConnections >= MaxConnectionCount)
				return false;
			if (!m_accessStrategy.allowed(user, pass))
				return false;
			// Do the actual connection
			[snip]
			return true;
		}

	private:
		IAllowAccessStrategy& m_accessStrategy;
	};

This allows for modifying the strategy during execution, in order to have flexible algorithms with generic behaviours. This is an interesting and useful pattern in and of itself, but the way we implement it in Yuni is a bit different.


### Policies

We use a static version of this pattern as described in [Modern C++ Design](http://www.moderncppdesign.com Modern C++ Design by Andrei Alexandrescu) as Policies. In this context, a policy is a class template parameter, and may be a class template itself. The purpose of policies is the same as strategies, except that the chosen policy is fixed at compilation, and cannot be modified during execution.

Let us present the above example with policies :

	struct Never
	{
		static bool Allowed(cont char* user, const char* pass)
		{
			return false;
		}
	};

	struct Always
	{
		static bool Allowed(cont char* user, const char* pass)
		{
			return true;
		}
	};

	struct CheckValidAccount
	{
		static bool Allowed(cont char* user, const char* pass)
		{
			return PasswordManager.IsValidAccount(user, pass);
		}
	};

As you can see, this is very similar to what we had before. Only two things have changed, and they are very much linked :
* The policies do not inherit a common base
* The methods are not virtual

Now the question would be : how can we use these policies if they do not derive from a single base ? Well, templates have a powerful hidden feature in that they define compliance with an interface _implicitly_. This may be considered actually less powerful than explicit interfaces, because the mechanism is not as clear and probably more error-prone, but the genericity offered by an algorithm that can accept any conforming object without its having to implement an explicit interface is non-negligible. Consider the following :

	struct Comparer
	{
		template<class T, class U>
		static bool greaterValue(const T& left, const U& right)
		{
			return left > right;
		}

		template<class T, class U>
		static bool greaterSize(const T& left, const U& right)
		{
			return left.size() > right.size();
		}
	};

In both methods, passing types as template parameters is a very powerful way to accept many different types for the comparisons. In the first method, any pair of types that are comparable with `operator <` will be accepted, be they basic types (int, float, double, ...) or user-defined types. The second method will accept all STL containers and any user type that simply defines a size() method with a compatible return type. This mechanism of implicit interface conformance is what really allows policies to work. Now that this is clear, here is how we use the policies we defined before :

	template<class AccessPolicyT = Policy::CheckValidAccount>
	class AccountManager
	{
	public:
		typedef AccessPolicyT AccessPolicy;

	public:
		// [snip constructors and inits]

		bool connectUser(const char* user, const char* pass)
		{
			if (pNbConnections >= MaxConnectionCount)
				return false;
			if (!AccessPolicy::Allowed(user, pass))
				return false;
			// Do the actual connection
			[snip]
			return true;
		}
	};

	int main(void)
	{
		AccountManager<Policy::Always> accountManager;
		if (!accountManager.connectUser("jack", "theR34per"))
		   return 1;
		return 0;
	}

As you can see, the policy that will be used for a given AccountManager has to be chosen at compile time and cannot be changed during execution.


### How to use policies in Yuni

Yuni uses policies for various powerful features, mainly derived from [Modern C++ Design](http://www.moderncppdesign.com Modern C++ Design by Andrei Alexandrescu). Currently, these are :
* Smart pointers : Yuni::SmartPtr accepts five policies that manage ownership, checking, conversion, storage and constness. See chapter on smart pointers.
* Threading : Threading policies are offered by Yuni for use in your classes as single-threaded (no lock), object-level lockable (each object has a mutex) or class-level lockable (a single mutex for all instances of the class). Many Yuni classes use threading policies internally for MT support, and some even let you choose the threading policy by yourself. See chapter on threading.
* Singleton : Yuni::Singleton accepts two policies that manage its creation and lifetime, as well as the afore-mentioned threading policy.
In all cases, Yuni provides a default value for the policies in its classes.

Thanks to policies, you can choose the behaviour you want for a given object when choosing the type for it. The simplest way to use this mechanism is to choose one of the proposed policies Yuni provides for a given behaviour. For example, you can choose to use the default values for a smart pointer and simply write :

	SmartPtr<MyClass> ptr;

Or you can choose to configure some or all of the policies, e.g. :

	SmartPtr<MyClass, Policy::Ownership::DestructiveCopy, Policy::Checking::NeverNull> ptr;

See the chapter on smart pointers for detailed explanations on types of ownership and checking.

Finally, thanks to the implicit interface conformance mechanism, it is possible to write your own policies for both your classes or Yuni classes. This is however a very advanced use of templates and requires solid knowledge of template metaprogramming. Also the interface being implicit, it is not clearly described and documented (yet). The only way to be sure that your policy will work is to check Yuni's source code and conform to the existing policies.
