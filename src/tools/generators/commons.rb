
class Generator

	#
	# \brief Constructor
	#
	def initialize
		# Max Arguments
		@maxArgumentCount = 16
	end

	def thisHeaderHasBeenGenerated(name)
		"/*!
** \\internal This file is automatically generated by '#{name}'.
** Please make any modifications you wish to this script instead of
** this file, as they will otherwise be lost at the next generation.
*/"
	end

	# getter
	def argumentCount
		@maxArgumentCount
	end
	# setter
	def argumentCount= (value)
		@maxArgumentCount = value
	end

	def templateParameterList(count, prefix = ', ')
		ret = ''
		if count > 0
			ret += prefix
		end
		(0..count - 1).each do |i|
			if i != 0
				ret += ', '
			end
			ret += "class A#{i}"
		end
		ret
	end

	def list(count, name = 'A', prefix = '', suffix = '')
		ret = ''
		if count > 0
			ret += prefix
		end
		(0..count - 1).each do |i|
			if i != 0
				ret += ', '
			end
			ret += "#{name}#{i}"
		end
		if count > 0
			ret += suffix
		end
		ret
	end

	def variableList(count, name = 'A', varname = 'a', prefix = '')
		ret = ''
		if count > 0
			ret += prefix
		end
		(0..count - 1).each do |i|
			if i != 0
				ret += ', '
			end
			ret += "#{name}#{i} #{varname}#{i}"
		end
		ret
	end

	def xArgumentsToStr(count)
		if count == 0
			return "0 argument"
		else
			if count == 1
				return "1 argument"
			else
				return "#{count} arguments"
			end
		end
	end

	def templateParameterListDoxygen(count)
		ret = ''
		(0..count-1).each do |i|
			ret += "\t** \\tparam A#{i} The type of the "
			# todo use `when`
			case i
				when 0: ret += "first"
				when 1: ret += "second"
				when 2: ret += "third"
				else ret += "#{i+1}th"
			end
			ret += " argument"
			if i != count - 1
				ret += "\n"
			end
		end
		ret
	end
end
