"Name"     = 'Nany'
"Author"   = 'Bruno BORRI, Damien GERARD'
"Version"  = '0.1'
"About"    = 'Grammar for the Nany scripting language, from the Yuni project team'
"Character Mapping" = 'Unicode'
"Case Sensitive" = 'True'
"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter} + {Letter Extended}
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]
{Char Chars}   = {Printable} - ['']
{Hex Digit}    = {Digit} + [abcdef] + [ABCDEF]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {ID Head}{ID Tail}*
BooleanLiteral= 'true' | 'false'
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
DecLiteral     = {Digit}+            ( [UuLl] | [Uu][Ll] | [Ll][Uu] )?
HexLiteral     = '0'[xX]{Hex Digit}+ ( [UuLl] | [Uu][Ll] | [Ll][Uu] )?
RealLiteral    = {Digit}*'.'{Digit}+ ( [FfDd] )?
CharLiteral    = '' ( {Char Chars} | '\'{Printable} )''
ConstQualifier = 'const'
VisibilityQualifier = 'public' | 'protected' | 'private' | 'published'
OptimQualifier = 'immutable' | 'stable' | 'threadunsafe'
BuiltInType    = 'any' | 'int' | 'unsigned int' | 'int8' | 'uint8' | 'int16' | 'uint16' | 'int32' | 'uint32' | 'int64' | 'uint64' | 'char' | 'float' | 'double' | 'bool'

! -------------------------------------------------
! Comments
! -------------------------------------------------

Comment Line = '#' | '//'
Comment Start = '#*' | '/*'
Comment End = '*#' | '*/'

! -------------------------------------------------
! Program / Unit
! -------------------------------------------------

! The grammar starts below
<Program> ::= <Unit Declaration> <Dependencies> <Implementation Block>

<Unit Declaration> ::= <Optional Visibility Qualifier> 'unit' Identifier ';'
               | 'program' Identifier ';'

<Dependencies> ::= 'uses' <Qualified Identifier> ';' <Dependencies>
               | ! Empty

<Implementation Block> ::= <Function Declaration> <Implementation Block>
               | <Optional Visibility Qualifier> <Class Declaration> <Implementation Block>
               | <Optional Visibility Qualifier> <Workflow Declaration> <Implementation Block>
               | <Optional Visibility Qualifier> <Enum Declaration> <Implementation Block>
               | ! Empty

! -------------------------------------------------
! Qualified Identifier
! -------------------------------------------------

<Qualified Identifier> ::= Identifier '.' <Qualified Identifier>
               | Identifier


! -------------------------------------------------
! Literals
! -------------------------------------------------

<Literal> ::= BooleanLiteral
               |  DecLiteral
               |  HexLiteral
               |  RealLiteral
               |  CharLiteral
               |  StringLiteral
               |  'nil'

! -------------------------------------------------
! Classes
! -------------------------------------------------

<Class Declaration> ::= 'class' Identifier <Optional Type Parameters> <In Block> <Out Block> '{' <Class Content> '}'

! TODO
<Class Content> ::= VisibilityQualifier <Class Content>
               | <Method Declaration> <Class Content>
               | <Optional Const Qualifier> <Attribute Declaration> <Class Content>
               | <Property Declaration> <Class Content>
               | <Class Declaration> <Class Content> ! Nested class
               | ! Empty

<Property Declaration> ::= 'property' Identifier 'read' <Qualified Identifier> ';'
               | 'property' Identifier 'write' <Qualified Identifier> ';'
               | 'property' Identifier 'read' <Qualified Identifier> 'write' <Qualified Identifier> ';'

<Attribute Declaration> ::= Identifier ';'
               | Identifier ':' <Type> ';'
               | Identifier ':=' <Expression> ';'
               | Identifier ':' <Type> ':=' <Expression> ';'

! -------------------------------------------------
! Workflows
! -------------------------------------------------

<Workflow Declaration> ::= 'workflow' Identifier '{' <Workflow Content> '}'

<Workflow Content> ::= <State Block> <Transition Block>

<State Block> ::= 'states' <Workflow States>
               | ! Empty

<Workflow States> ::= 'default' Identifier ';' <Workflow States>
               | 'state' Identifier ';' <Workflow States>
               | ! Empty

<Transition Block> ::= 'transitions' <Workflow Transitions>
               | ! Empty

<Workflow Transitions> ::= 'default' 'allow' ';' <Workflow Transitions>
               | 'default' 'forbid' ';' <Workflow Transitions>
               | 'allow' <Workflow Permissions> '=>' Identifier ';' <Workflow Transitions>
               | 'forbid' <Workflow Permissions> '=>' Identifier ';' <Workflow Transitions>

<Workflow Permission> ::= '*'
               | Identifier
               | '+' Identifier
               | '-' Identifier

<Workflow Permissions> ::= <Workflow Permission> ',' <Workflow Permissions>
               | <Workflow Permission>

! -------------------------------------------------
! Enums
! -------------------------------------------------

<Enum Declaration> ::= 'enum' Identifier '{' <Enum Content> '}'

<Enum Content> ::= Identifier ',' <Enum Content>
               | Identifier
               | ! Empty


! -------------------------------------------------
! Functions and methods
! -------------------------------------------------

<Function Declaration> ::= <Optional Optim Qualifier> 'function' Identifier <Optional Type Parameters> <Optional Parameters> <Return Type Declaration> <In Block> <Out Block> <Expression>

<Method Declaration> ::= <Optional Optim Qualifier> 'method' Identifier <Optional Type Parameters> <Optional Parameters> <Return Type Declaration> <In Block> <Out Block> <Expression>

<Return Type Declaration> ::= ':' <Type>
               | ! Empty

<Optional Parameters> ::= '(' <Parameter List> ')'
               | ! Empty

<Parameter List> ::= Identifier ':' <Type> <Parameter List Continued> ! With a forced type
               | Identifier <Parameter List Continued> ! With type inferred
               | Identifier ':' <Type> ':=' <Expression> <Parameter List Continued> ! With a default value
               | Identifier ':=' <Expression> <Parameter List Continued> ! With type inferred and a default value
               | ! Empty

<Parameter List Continued> ::= ',' <Parameter List>
               | ! Empty

<Optional Const Qualifier> ::= ConstQualifier
               | ! Empty

<Optional Optim Qualifier> ::= OptimQualifier
               | ! Empty

<Optional Visibility Qualifier> ::= VisibilityQualifier
               | ! Empty

! WARNING : We do not define a function call with no parentheses here,
! WARNING : it would conflict as reduce-reduce with a simple identifier
! WARNING : since there is no way to distinguish them before type-checking.
<Function Call> ::= <Qualified Identifier> '(' <Argument List> ')' ! Function / Method call

<Argument List> ::= <Expression> <Argument List Continued>

<Argument List Continued> ::= ',' <Expression>
               | ! Empty

! -------------------------------------------------
! Constraint blocks
! -------------------------------------------------

<In Block> ::= 'in' <Expression>
               | ! Empty

<Out Block> ::= 'out' <Expression>
               | ! Empty

! -------------------------------------------------
! Types
! -------------------------------------------------

<Type> ::= <Qualified Identifier>
               | 'typeof' Identifier
               | BuiltInType

<Optional Type Parameters> ::= '<' <Type Parameters> '>'
               | ! Empty

<Type Parameters> ::= Identifier <Type Parameters Continued>
               | Identifier ':=' <Type> <Type Parameters Continued>

<Type Parameters Continued> ::= ',' <Type Parameters>
               | ! Empty

! -------------------------------------------------
! Expressions
! -------------------------------------------------

<Expressions> ::= <Expression> <Expressions Continued>
               | ! Empty

<Expressions Continued> ::= ';' <Expression> <Expressions Continued>
               | ! Empty

<Expression>  ::= <Expression> '|' <Or Exp> ! Constraint
               |  <Expression> ';'
               |  <Or Exp>
               |  <Void Exp>

<Or Exp>      ::= <Or Exp> 'or' <And Exp> ! Boolean Or
               |  <And Exp>


<And Exp>  ::= <And Exp> 'and' <Compare Exp> ! Boolean And
               | <Compare Exp>

<Compare Exp> ::= <Compare Exp> '>'  <Regexp Exp> 
               |  <Compare Exp> '<'  <Regexp Exp> 
               |  <Compare Exp> '<=' <Regexp Exp> 
               |  <Compare Exp> '>=' <Regexp Exp>
               |  <Compare Exp> '='  <Regexp Exp>     !Equal
               |  <Compare Exp> '!=' <Regexp Exp>    !Not equal
               |  <Regexp Exp>

! Is the priority correct ?
<Regexp Exp>  ::= <Regexp Exp> '~' <Add Exp>
               |  <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp>

<Negate Exp>  ::= '-' <Value> 
               |  '--' <Value>
               |  '++' <Value>
               |  <Value> '--'
               |  <Value> '++'
               |  <Value>

<Void Exp>    ::= ConstQualifier <Qualified Identifier> <Return Type Declaration> ':=' <Expression> ! Const Declaration / Assignment
               | <Qualified Identifier> <Return Type Declaration> ':=' <Expression> ! Variable Declaration / Assignment
               | 'while' <Expression> 'do' <Expression>
               | 'for' Identifier ':=' <Expression> 'until' <Expression> 'do' <Expression>
               | 'for' Identifier ':=' <Expression> 'until' <Expression> 'inc' <Expression> 'do' <Expression>
               | 'foreach' <Qualified Identifier> 'in' <Expression> 'do' <Expression>
               | 'foreach' <Qualified Identifier> 'in' <Expression> 'order' 'do' <Expression>

! For use in arithmetic, requires parentheses around expressions to have proper priorities
! e.g. : weight := - car.weight + passengers.weight
<Value> ::= <Literal>
               | '(' <Expression> ')'
               | '{' <Expressions> '}'
               | <Qualified Identifier> ! Property or attribute or function call with no argument
               | <Function Call> ! Function call with arguments
               | 'sync' <Expression>
               | 'async' <Expression>
               | '&' <Expression>
               | 'new' <Qualified Identifier> ! Empty constructor
               | 'new' <Function Call> ! Constructor
               | 'if' <Expression> 'then' <Expression>
               | 'if' <Expression> 'then' <Expression> 'else' <Expression>
               | 'return' <Expression>

